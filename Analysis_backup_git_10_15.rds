---
title: "Tissue analysis clean"
output: html_notebook
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 


```{r}
#dependencies
library(Signac)
library(Seurat)
library(GenomeInfoDb)
library(EnsDb.Mmusculus.v79)
library(EnsDb.Mmusculus.v75)
library(ggplot2)
library(patchwork)
library(Signac)
library(tidyr)
library(Seurat)
library(devtools)
load_all("~/devel/seurat-private-feat-incrementalPCA/")
load_all("~/devel/signac-private-master/")
require(spam)
require(spam64)
library(reshape2)
library(dplyr)

human_all_atac<-readRDS("~/share_Yuhan/Human_5kb_bins.rds")
mouse_select_atac<-readRDS("~/share_Yuhan/Mouse_5kb_bins.rds")


human_all_atac$species<-"human"
mouse_select_atac$species<-"mouse"


species<-rbind(human_all_atac[["species"]],mouse_select_atac[["species"]])


# find integration anchors between mouse and human
anchors_H_M <- FindIntegrationAnchors( object.list=list(human_all_atac, mouse_select_atac),
                                       anchor.features = rownames(human_all_atac),scale=F,sparse=TRUE,spam=TRUE,
                                       assay = c('humanPeaks', 'humanPeaks'),
                                       k.filter = NA
)


saveRDS(anchors_H_M,file="All_bins.spam.achors.rds")


atac.feature <- intersect(rownames(human_all_atac ), rownames(mouse_select_atac))
obj.both <- merge(human_all_atac, mouse_select_atac)
VariableFeatures(obj.both) <- atac.feature
obj.both <- RunSVD(object = obj.both, n = 100 )

integrated_H_M_cre <- IntegrateEmbeddings(anchorset = anchors_H_M, reductions = obj.both[['lsi']] )


integrated_H_M_cre <- RunUMAP(
  object = integrated_H_M_cre,
  dims = 2:100,
  reduction = 'integrated_dr'
)

integrated_H_M_cre$celltype[which(is.na(integrated_H_M_cre$celltype))]<-"unknown"

integrated_H_M_cre<-AddMetaData(integrated_H_M_cre,species)


pi4 <- DimPlot(integrated_H_M_cre, pt.size = 1,group.by='celltype',split.by = 'species',label = T,raster = F) + ggplot2::ggtitle("LSI 2:100") + theme(legend.position = "none") #theme(legend.position="bottom")#+ theme(legend.position = "none")

DimPlot(integrated_H_M_cre, pt.size = 1,group.by='species')

integrated_H_M<-integrated_H_M_cre
```


```{r}

#integration done via 


Human_hlight<-list()
Mouse_hlight<-list()
for (i in levels(as.factor(integrated_H_M$celltype)))
{
  print(i)
MN<-names(integrated_H_M$celltype[integrated_H_M$celltype==i & integrated_H_M$species=="mouse"])
HN<-names(integrated_H_M$celltype[integrated_H_M$celltype==i & integrated_H_M$species=="human"])
if(length(MN)!=0)
{
Mouse_hlight[[i]]<-DimPlot(integrated_H_M, pt.size = 0.5,label = T,cells.highlight = MN,raster = F) + ggplot2::ggtitle(paste("Mouse",i,sep = " "))+theme(legend.position = "none")
}
if(length(HN)!=0)
{
Human_hlight[[i]]<-DimPlot(integrated_H_M, pt.size = 0.5,label = T,cells.highlight = HN,raster = F) + ggplot2::ggtitle(paste("Human",i,sep = " "))+theme(legend.position = "none")
}
}

ggsave(wrap_plots(Human_hlight, ncol = 7,nrow = 5),width = 30,height = 20,units = "in",filename = "Human_cells_hlight_cellsketch.png")
ggsave(wrap_plots(Mouse_hlight, ncol = 7,nrow = 5),width = 30,height = 20,units = "in",filename = "Mouse_cells_hlight_cellsketch.png")

integrated_H_M <- FindNeighbors(object = integrated_H_M, reduction = 'integrated_dr', dims = 2:100)
integrated_H_M <- FindClusters(object = integrated_H_M, verbose = T, algorithm = 3,resolution = 0.5)
pcl <-DimPlot(object = integrated_H_M, label = TRUE,raster = F,group.by = "humanPeaks_snn_res.0.8") + NoLegend()+ ggplot2::ggtitle("res 0.8")
pc2 <-DimPlot(object = integrated_H_M, label = TRUE,raster = F,group.by = "humanPeaks_snn_res.0.5") + NoLegend()+ ggplot2::ggtitle("res 0.5")
pc3 <-DimPlot(object = integrated_H_M, label = TRUE,raster = F,group.by = "humanPeaks_snn_res.0.3") + NoLegend()+ ggplot2::ggtitle("res 0.3")
pc4 <-DimPlot(object = integrated_H_M, label = TRUE,raster = F,group.by = "humanPeaks_snn_res.0.1") + NoLegend()+ ggplot2::ggtitle("res 0.1")


#now plot cluster id


ct_human=data.frame(celltype=integrated_H_M$celltype[integrated_H_M$species=="human"],cluster=integrated_H_M$humanPeaks_snn_res.0.5[integrated_H_M$species=="human"])
ct_mouse=data.frame(celltype=integrated_H_M$celltype[integrated_H_M$species=="mouse"],cluster=integrated_H_M$humanPeaks_snn_res.0.5[integrated_H_M$species=="mouse"])

human<-as.data.frame(table(ct_human))
mouse<-as.data.frame(table(ct_mouse))
human$cluster<-paste("Cluster",human$cluster,sep = " ")
mouse$cluster<-paste("Cluster",mouse$cluster,sep = " ")
human$celltype<-paste("Human",human$celltype,sep = " ")
mouse$celltype<-paste("Mouse",mouse$celltype,sep = " ")

human<-t(acast(human,celltype~cluster,value.var = "Freq"))
mouse<-t(acast(mouse,celltype~cluster,value.var = "Freq"))

all<-cbind(human,mouse)
small_clust<-all[which(rowSums(all)<3),]
all_large_clusters<-all[which(rowSums(all)>3),]

human<-human[which(rowSums(all)>3),]
mouse<-mouse[which(rowSums(all)>3),]
library(circlize)
col_fun1 = colorRamp2(c(0,max(human)),colors=c("white","#b2182b"))
col_fun2 = colorRamp2(c(0,max(mouse)),colors=c("white","#b2182b"))


H1 <- Heatmap(human,col=col_fun1,cluster_rows = FALSE,name = "Human", cluster_columns = FALSE,
    cell_fun = function(j, i, x, y, width, height, fill) {
        grid.text(sprintf("%i", human[i, j]), x, y, gp = gpar(fontsize = 10))
})

H2 <- Heatmap(mouse,col=col_fun2,cluster_rows = FALSE,"Mouse",cluster_columns = FALSE,
    cell_fun = function(j, i, x, y, width, height, fill) {
        grid.text(sprintf("%i", mouse[i, j]), x, y, gp = gpar(fontsize = 10))
})

All_separate<-H1+H2

human<-t(scale(t(human),scale = T,center = T))
mouse<-t(scale(t(mouse),scale = T,center = T))

all_scaled<-cbind(human,mouse)

col_fun3 = colorRamp2(c(min(all_scaled),max(all_scaled)),colors=c("#18b29f","#b2182b"))

H3 <- Heatmap(t(all_scaled),col=col_fun3,cluster_rows = T,name = "All", cluster_columns = T)

#0.5 is probably the best
saveRDS(integrated_H_M,file="Final_integration_all_bins_CCA.rds")
```

```{r}
#I can return to this later
library(plyr)
#fix fragment counts for human
countslist<-lapply(Fragments(human_all_atac),function(x){CountFragments(GetFragmentData(x,"path"))})
nameslist<-lapply(Fragments(human_all_atac),function(x){GetFragmentData(x,"cells")})

countslist2<-list()
for (i in 1:17){
  cellso=nameslist[[i]]
  cellsrn=names(nameslist[[i]])
  tempdf<-countslist[[i]][match(cellso,countslist[[i]]$CB),]
  tempdf$cellnames_renamed<-cellsrn
  countslist2[[i]]<-tempdf
}

metadata2<-ldply(countslist2, data.frame)
row.names(metadata2)<-metadata2$cellnames_renamed

human_all_atac<-AddMetaData(human_all_atac,metadata = metadata2)

```


#plotting script
```{r}

FindRegion(object=human_all_atac,assay = "cre",region = "NKX2-1")


  # region can be a string, name of a gene, or GRanges object
FindRegion <- function(
  object,
  region,
  sep = c("-", "-"),
  assay = NULL,
  extend.upstream = 0,
  extend.downstream = 0
) {
  if (!is(object = region, class2 = "GRanges")) {
    # if separators are present in the string and we can convert the
    # start to a number, assume we're using genomic coordinates
    if (all(sapply(X = sep, FUN = grepl, x = region))) {
      print("here")
      region <- StringToGRanges(regions = region, sep = sep)
    } else {
      region <- LookupGeneCoords(object = object, assay = assay, gene = region)
      if (is.null(x = region)) {
        stop("Gene not found")
      }
    }
  }
  
  region <- suppressWarnings(expr = Extend(
    x = region,
    upstream = extend.upstream,
    downstream = extend.downstream
  )
  )
  return(region)
}


plot_combined_cross_species<-function(gene,gene_mouse=NULL,upstr=1000,downstr=1000,plot_by="handannot",motif.names=NULL,highlight_human_reg=NULL,highlight_mouse_reg=NULL,validate=F){
  fname<-substring(gene, 1,1)
  sname<-substring(gene, 2)
  if(is.null(gene_mouse)) 
  {
  gene_mouse<-paste0(toupper(fname),tolower(sname))
  }
  gene_human<-toupper(gene)
  


 # reg_h<-FindRegion(object = human_all_atac,region = gene_human,extend.downstream = downstr,extend.upstream = upstr,assay = "cre")
#  reg_m<-FindRegion(object = mouse_select_atac,region = gene_mouse,extend.downstream = downstr,extend.upstream = upstr,assay = "mm10")
  
  reg_h <- LookupGeneCoords(object = human_all_atac,gene = gene_human,assay = "cre")
  reg_h <- suppressWarnings(expr = Extend(x = reg_h, upstream = upstr,downstream = downstr))
  
  reg_m <- LookupGeneCoords(object = mouse_select_atac,gene = gene_mouse,assay = "mm10")
  reg_m <- suppressWarnings(expr = Extend(x = reg_m, upstream = upstr,downstream = downstr))
  
  
  
  #findOverlaps(subject=reg_h,query = highlight_human_reg)
  
  print(paste0("plotting gene: ", gene))
  print(paste0("plotting human: ", gene_human," human: ",reg_h))
  print(paste0("plotting mouse: ", gene_mouse," mouse: ",reg_m))
  mm10_phylp="/home/torkenczyk/conservation_tracks/mm10.60way.phyloP60way.bw"
  hg38_phylp="/home/torkenczyk/conservation_tracks/hg38.phyloP100way.bw"
  mm10_lecif="/home/torkenczyk/conservation_tracks/mm10.hg38.LECIF.srt.median.bw"
  hg38_lecif="/home/torkenczyk/conservation_tracks/hg38.mm10.LECIF.srt.median.bw"
 # conservation_mm10<-BigwigTrack(region = reg_m,bigwig = mm10_phylp,type = 'heatmap')
  #conservation_hg38<-BigwigTrack(region = reg_h,bigwig = hg38_phylp,type = 'heatmap')
  
   hg38_A549_a="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/GSM3137776_ENCFF631HEX_signal_of_unique_reads_GRCh38.bigWig"
   hg38_A549_b="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/GSM3137777_ENCFF103COS_signal_of_unique_reads_GRCh38.bigWig"
   hg38_A549_c="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/GSM3137778_ENCFF957GCK_signal_of_unique_reads_GRCh38.bigWig"
  
   
   
  if(!is.null(motif.names)){
  print("Adding Motifs")
  print("For Hg38")
  ls<-unlist(GetMotifData(object = human_all_atac, assay = "cre", slot = "motif.names"))
  motif_labels<-names(ls[match(motif.names,ls)])
  M<-GetMotifData(human_all_atac, assay = "cre")[,motif_labels]
  M2<-apply(M,2,function(x){which(x>0)})
  M2n<-apply(M,2,function(x){which(x==0)})

  
  Mdf<-data.frame(motifs=rep("",times=length(row.names(M))))
  M<-as.matrix(M)
  for (mt in names(M2)){
    c_ct<-match(mt,colnames(M))
    mt_n<-ls[match(mt,names(ls))]
    M[M2[[mt]],c_ct]<-mt_n
    M[M2n[[mt]],c_ct]<-""
  }
  M<-as.data.frame(M)
  M <- M %>% unite(motif, colnames(M), sep = ',')
  M$motif<-gsub(M$motif,perl=T,pattern = ",{2,}",replacement = "")
  M$motif<-gsub(M$motif,perl=T,pattern = "^,",replacement = "")
  M$motif<-gsub(M$motif,perl=T,pattern = ",$",replacement = "")
  M$motif[which(M$motif=="")]<-"No motif"
  
  human_all_atac[["cre"]]<-AddMetaData(human_all_atac[["cre"]],M)
  mouse_select_atac[["cre"]]<-AddMetaData(mouse_select_atac[["cre"]],M)
  
  print("For MM10")
  ls<-unlist(GetMotifData(object = mouse_select_atac, assay = "mm10", slot = "motif.names"))
  motif_labels<-names(ls[match(motif.names,ls)])
  M<-GetMotifData(mouse_select_atac,assay = "mm10")[,motif_labels]
  M2<-apply(M,2,function(x){which(x>0)})
  M2n<-apply(M,2,function(x){which(x==0)})
  Mdf<-data.frame(motifs=rep("",times=length(row.names(M))))
  M<-as.matrix(M)
  for (mt in names(M2)){
    c_ct<-match(mt,colnames(M))
    mt_n<-ls[match(mt,names(ls))]
    M[M2[[mt]],c_ct]<-mt_n
    M[M2n[[mt]],c_ct]<-""
  }
  M<-as.data.frame(M)
  M <- M %>% unite(motif, colnames(M), sep = ',')
  M$motif<-gsub(M$motif,perl=T,pattern = ",{2,}",replacement = "")
  M$motif<-gsub(M$motif,perl=T,pattern = "^,",replacement = "")
  M$motif<-gsub(M$motif,perl=T,pattern = ",$",replacement = "")
  #M$motif<-gsub(M$motif,perl=T,pattern = ",No motif$",replacement = "")
  M$motif[which(M$motif=="")]<-"No motif"
  mouse_select_atac[["mm10"]]<-AddMetaData(mouse_select_atac[["mm10"]],M)
  
  mouse1<-CoveragePlot(
    object = mouse_select_atac,links = F,assay ="mm10",
    group.by=plot_by,
    region = gene_mouse,
    annotation=T,peaks=T,
    extend.upstream = upstr,
    extend.downstream = downstr,bigwig = list(mm10_phylp,mm10_lecif),bigwig.type = 'heatmap',peaks.group.by = "motif", region.highlight = highlight_mouse_reg
  )
  
  mouse2<-CoveragePlot(
    object = mouse_select_atac,links = F,assay ="cre",
    group.by=plot_by,
    region = gene_human,
    annotation=T,peaks=T,
    extend.upstream = upstr,
    extend.downstream = downstr,bigwig = list(hg38_phylp,hg38_lecif),bigwig.type = 'heatmap',peaks.group.by = "motif",region.highlight = highlight_human_reg
  )
  
  human<-CoveragePlot(
    object = human_all_atac, 
    group.by=plot_by,region = gene_human,assay ="cre",
    extend.upstream = upstr,
    extend.downstream = downstr,annotation=T,peaks=T,bigwig = list(hg38_phylp,hg38_lecif),bigwig.type = 'heatmap',peaks.group.by = "motif", region.highlight = highlight_human_reg
  )
  
  
  } else {
  
  
  mouse1<-CoveragePlot(
    object = mouse_select_atac,links = F,assay ="mm10",
    group.by=plot_by,
    region = reg_m,
    annotation=T,peaks=T,
    extend.upstream = upstr,
    extend.downstream = downstr,bigwig = list(mm10_phylp,mm10_lecif),bigwig.type = 'heatmap', region.highlight = highlight_mouse_reg
  )
  
  mouse2<-CoveragePlot(
    object = mouse_select_atac,links = F,assay ="cre",
    group.by=plot_by,
    region = reg_h,
    annotation=T,peaks=T,
    extend.upstream = upstr,
    extend.downstream = downstr,bigwig = list(hg38_phylp,hg38_lecif),bigwig.type = 'heatmap',region.highlight = highlight_human_reg
  )
  
    mouse2b<-CoveragePlot(
    object = mouse_select_atac,links = F,assay ="cre",
    group.by=plot_by,
    region = reg_h,
    annotation=F,peaks=F,
    extend.upstream = upstr,
    extend.downstream = downstr,region.highlight = highlight_human_reg)
  
  human<-CoveragePlot(
    object = human_all_atac, 
    group.by=plot_by,region = reg_h,assay ="cre",
    extend.upstream = upstr,
    extend.downstream = downstr,annotation=T,peaks=T,bigwig = list(hg38_phylp,hg38_lecif),bigwig.type = 'heatmap',region.highlight = highlight_human_reg
  )
  
  humanb<-CoveragePlot(
    object = human_all_atac, 
    group.by=plot_by,region = reg_h,assay ="cre",
    extend.upstream = upstr,
    extend.downstream = downstr,annotation=T,peaks=T,bigwig = list(hg38_A549_a,hg38_A549_b,hg38_A549_c),bigwig.type = "coverage",region.highlight = highlight_human_reg
  )
 
  }
  
  
    plots2<-wrap_plots(list(mouse2b,human), ncol = 1, heights = c(8,10))
    print(paste0("plotting gene: ", gene))
    png(filename = paste0("/home/torkenczyk/H_M_chromatin_atlas/human_data/plots/",gene,"_combined.wcons_yaxe2.png"),width = 20,height=18,units = "cm",res=300)
    print(plots2)
    dev.off()
    print("THIS")
    plots<-wrap_plots(list(mouse1,mouse2,human), ncol = 3, widths  = c(10,10,10))
    png(filename = paste0("/home/torkenczyk/H_M_chromatin_atlas/human_data/plots/",gene,"_combined.wcons2.png"),width = 30,height=25,units = "cm",res=300)
    print(wrap_plots(list(mouse1,mouse2,human), ncol = 3, widths  = c(10,10,10)))
    dev.off()
    
    
    
    if (validate==T){
    #with mouse
      print("Plotting validation of mouse")
    DefaultAssay(M_subset)<-"peaks"
    
    mouse2c<-CoveragePlot(
    object = M_subset,links = F,assay ="peaks",
    group.by="cell_type",
    region = reg_m,
    annotation=F,peaks=F,
    extend.upstream = upstr,
    extend.downstream = downstr,region.highlight = highlight_mouse_reg)
    plots3<-wrap_plots(list(mouse2c,mouse1), ncol = 1, heights = c(8,10))
    
    png(filename = paste0("/home/torkenczyk/H_M_chromatin_atlas/human_data/plots/",gene,"_combined.wcons_yaxe_mouse_VAL.png"),width = 20,height=18,units = "cm",res=300)
    print(plots3)
    dev.off()
    
    #with human
    
    print("Plotting validation of human")
    DefaultAssay(integrated)<-"bins"
    
    human_v<-CoveragePlot(object = integrated, 
    group.by="cluster_name",region = reg_h,assay ="bins",
    extend.upstream = upstr,
    extend.downstream = downstr,annotation=F,peaks=F,region.highlight = highlight_human_reg)
   
    plots4<-wrap_plots(list(human_v,humanb), ncol = 1, heights = c(8,14))
    print("THIS")
    png(filename = paste0("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/plots/",gene,"_combined.wcons_yaxe_human_VAL.png"),width = 20,height=28,units = "cm",res=300)
    print(plots4)
    dev.off()
    print("THIS2")
    png(filename = paste0("/home/torkenczyk/H_M_chromatin_atlas/human_data/plots/",gene,"_combined.wcons_yaxe_human_VAL.png"),width = 20,height=28,units = "cm",res=300)
    print(plots4)
    dev.off()
    
    }
    
   return(plots)
}

```


#Add in cluster annots based on 0.5
```{r}
library(hash)
Idents(integrated_H_M)<-paste("Cluster",integrated_H_M$humanPeaks_snn_res.0.5,sep = "_")

cluster_match<-hash()

cluster_match[["Cluster_1"]]<-"Hepatocytes"
cluster_match[["Cluster_9"]]<-"B-lymphocytes"
cluster_match[["Cluster_10"]]<-"T-lymphocytes"
cluster_match[["Cluster_20"]]<-"Smooth muscle cells"
cluster_match[["Cluster_25"]]<-"Smooth muscle cells"
cluster_match[["Cluster_29"]]<-"Endothelial cells"
cluster_match[["Cluster_23"]]<-"Endothelial cells"
cluster_match[["Cluster_13"]]<-"Endothelial cells"
cluster_match[["Cluster_14"]]<- "Fibroblasts"
cluster_match[["Cluster_12"]]<- "Fibroblasts"
cluster_match[["Cluster_6"]]<-  "Fibroblasts"
cluster_match[["Cluster_26"]]<- "Fibroblasts"
cluster_match[["Cluster_28"]]<-  "Fibroblasts"
cluster_match[["Cluster_7"]]<-"Cardiomyocytes"
cluster_match[["Cluster_18"]]<-"Cardiomyocytes"
cluster_match[["Cluster_3"]]<-"Pneumocytes"
cluster_match[["Cluster_15"]]<-"Pneumocytes"
cluster_match[["Cluster_16"]]<-"Macrophages"
cluster_match[["Cluster_4"]]<-"Macrophages"
cluster_match[["Cluster_24"]]<-"Macrophages"

cluster_match[["Cluster_19"]]<-"Myofibroblasts"
cluster_match[["Cluster_8"]]<-"Myofibroblasts"
cluster_match[["Cluster_21"]]<-"Schwann cells"
cluster_match[["Cluster_11"]]<-"Enterocytes"
cluster_match[["Cluster_0"]]<-"Enterocytes"
cluster_match[["Cluster_5"]]<-"Enterocytes"
cluster_match[["Cluster_17"]]<-"Goblet cells"
cluster_match[["Cluster_22"]]<-"Goblet cells"
cluster_match[["Cluster_27"]]<-"Goblet cells"

cluster_match[["Cluster_2"]]<-"remove" #this is misc
cluster_match[["Cluster_57"]]<-"remove" #this is misc
cluster_match[["Cluster_30"]]<-"remove"
cluster_match[["Cluster_31"]]<-"remove"
cluster_match[["Cluster_32"]]<-"remove"
cluster_match[["Cluster_33"]]<-"remove"
cluster_match[["Cluster_34"]]<-"remove"
cluster_match[["Cluster_35"]]<-"remove"
cluster_match[["Cluster_36"]]<-"remove"
cluster_match[["Cluster_37"]]<-"remove"
cluster_match[["Cluster_38"]]<-"remove"
cluster_match[["Cluster_39"]]<-"remove"
cluster_match[["Cluster_40"]]<-"remove"
cluster_match[["Cluster_41"]]<-"remove"
cluster_match[["Cluster_42"]]<-"remove"
cluster_match[["Cluster_43"]]<-"remove"
cluster_match[["Cluster_44"]]<-"remove"
cluster_match[["Cluster_45"]]<-"remove"
cluster_match[["Cluster_46"]]<-"remove"
cluster_match[["Cluster_47"]]<-"remove"
cluster_match[["Cluster_48"]]<-"remove"
cluster_match[["Cluster_49"]]<-"remove"
cluster_match[["Cluster_50"]]<-"remove"
cluster_match[["Cluster_51"]]<-"remove"
cluster_match[["Cluster_52"]]<-"remove"
cluster_match[["Cluster_53"]]<-"remove"
cluster_match[["Cluster_54"]]<-"remove"
cluster_match[["Cluster_55"]]<-"remove"
cluster_match[["Cluster_56"]]<-"remove"



Idents(integrated_H_M)<-hash::values(cluster_match,keys=Idents(integrated_H_M),simplify=T)
#remove collisions
Idents(integrated_H_M)[which(integrated_H_M$celltype=="Collisions")]<-"remove"


pcannot <-DimPlot(object = integrated_H_M, label = TRUE,raster = F) + NoLegend()+ ggplot2::ggtitle("Hand annotation")

sum(Idents(integrated_H_M)!="remove" & integrated_H_M$species=="mouse")

sum(Idents(integrated_H_M)!="remove" & integrated_H_M$species=="mouse")

handannot<-as.data.frame(Idents(integrated_H_M))
names(handannot)<-c("handannot")


#add to plotting rds
human_all_atac<-readRDS("/home/torkenczyk/Human_only_for_plotting.rds")
mouse_select_atac<-readRDS("/home/torkenczyk/Mouse_only_for_plotting.rds")

mouse_select_atac<-AddMetaData(mouse_select_atac,handannot)

human_plotnames<-data.frame(orig_names=names(human_all_atac$celltype))

human_plotnames$second<-str_split_fixed(human_plotnames$orig_names,n=2,pattern = "_")[,2]

row.names(human_plotnames)<-human_plotnames$second

handannot_human<-merge(human_plotnames,handannot,by="row.names")
row.names(handannot_human)<-handannot_human$orig_names


human_all_atac<-AddMetaData(human_all_atac,handannot_human)

#remove cluster




#Cardiomyocyte
p1<-plot_combined_cross_species(gene = "MYH6",motif.names = c("MEF2D","MEF2A","SRF","ELF2","JUND"))
p2<-plot_combined_cross_species("MYH7",plot_by = "tissue",motif.names = c("MEF2D","MEF2A","SRF","ELF2","JUND"))
p3<-plot_combined_cross_species(gene="SGCA",motif.names = c("MEF2D","MEF2A","SRF","ELF2","JUND"))


ph<-DimPlot(object = human_all_atac, label = TRUE,raster = F,group.by = "handannot") + NoLegend()+ ggplot2::ggtitle("human")
phorig<-DimPlot(object = human_all_atac2, label = TRUE,raster = F,group.by = "celltype") + NoLegend()+ ggplot2::ggtitle("human")
ph1<-DimPlot(object = human_all_atac2, label = TRUE,raster = F,group.by = "handannot",cells.highlight = names(human_all_atac2$handannot[human_all_atac2$handannot=="remove"]),pt.size = 0.5) + NoLegend()+ ggplot2::ggtitle("human remove cell highlighted")

cells<-names(human_all_atac2$handannot[human_all_atac2$handannot=="remove"])


pm<-DimPlot(object = mouse_select_atac, label = TRUE,raster = F,group.by = "handannot") + NoLegend()+ ggplot2::ggtitle("mouse")

ph2<-DimPlot(object = human_all_atac, label = TRUE,raster = F,group.by = "handannot",cells.highlight = names(human_all_atac$handannot)[which(human_all_atac$handannot=="remove")]) + NoLegend()+ ggplot2::ggtitle("human")
pm2<-DimPlot(object = mouse_select_atac, label = TRUE,raster = F,group.by = "handannot",cells.highlight = names(mouse_select_atac$handannot)[which(mouse_select_atac$handannot=="Pneumocytes")]) + NoLegend()+ ggplot2::ggtitle("mouse")


ph3<-DimPlot(object = human_all_atac, label = TRUE,raster = F,group.by = "celltype") + NoLegend()+ ggplot2::ggtitle("human")
pm3<-DimPlot(object = mouse_select_atac, label = TRUE,raster = F,group.by = "cell_label") + NoLegend()+ ggplot2::ggtitle("mouse")


HM<-ph+pm
HM2<-ph2+pm2
HM3<-ph3+pm3

plot_combined_cross_species(gene="SGCA",motif.names = c("MEF2D","MEF2A","SRF","ELF2","JUND"))

#lets see original umap coordinates
# We will now store this as a custom dimensional reduction called 'mds'
umap_orig<-data.frame(OUMAP1=human_all_atac2$UMAP1,OUMAP2=human_all_atac2$UMAP2)

human_all_atac2[["oUMAP"]] <- CreateDimReducObject(embeddings = as.matrix(umap_orig), key = "OUMAP_", assay = DefaultAssay(human_all_atac2))
DimPlot(object = human_all_atac2, label = TRUE,raster = F,group.by = "celltype",cells.highlight = names(human_all_atac2$handannot[human_all_atac2$handannot=="remove"])) + NoLegend()+ ggplot2::ggtitle("human")

```


#running DA
```{r}

markers_h <- presto:::wilcoxauc.Seurat(X = human_all_atac, group_by = 'handannot',assay = 'data', seurat_assay = 'cre',min.pct = 0)


markers_filt_h<-markers_h[markers_h$padj<0.05 & markers_h$logFC > 0,]
remove_h=head(filter(markers_filt_h,group=="remove")%>%arrange(pval),10)

markers_m <- presto:::wilcoxauc.Seurat(X = mouse_select_atac, group_by = 'handannot',assay = 'data', seurat_assay = 'cre',min.pct = 0)
markers_filt_m<-markers_m[markers_m$padj<0.05 & markers_m$logFC > 0,]
remove_m=head(filter(markers_filt_m,group=="remove")%>%arrange(pval),10)
remove_h=head(filter(markers_filt_h,group=="remove")%>%arrange(pval),10)

ClosestFeature(human_all_atac,regions = remove_h$feature)
ClosestFeature(mouse_select_atac,regions = remove_m$feature)

p1<-plot_combined_cross_species(gene = "SFI1")
p1<-plot_combined_cross_species(gene = "CTNND2")

#subset to cells that are not removed

pn_h=head(filter(markers_filt_h,group=="Pneumocytes")%>%arrange(pval),10)
pn_m=head(filter(markers_filt_m,group=="Pneumocytes")%>%arrange(pval),10)

ClosestFeature(human_all_atac,regions = pn_h$feature)
ClosestFeature(mouse_select_atac,regions = pn_m$feature)

p1<-plot_combined_cross_species(gene = "PRKCZ")
p1<-plot_combined_cross_species(gene = "POC1A")

#top pn before int

human_all_atac<-subset(human_all_atac, subset = handannot != "remove")
mouse_select_atac<-subset(mouse_select_atac, subset = handannot != "remove")

markers_h <- presto:::wilcoxauc.Seurat(X = human_all_atac, group_by = 'handannot',assay = 'data', seurat_assay = 'cre',min.pct = 0)
markers_filt_h<-markers_h[markers_h$padj<0.05 & markers_h$logFC > 0,]
remove_h=head(filter(markers_filt_h,group=="remove")%>%arrange(pval),10)
markers_m <- presto:::wilcoxauc.Seurat(X = mouse_select_atac, group_by = 'handannot',assay = 'data', seurat_assay = 'cre',min.pct = 0)
markers_filt_m<-markers_m[markers_m$padj<0.05 & markers_m$logFC > 0,]

pn_h2=head(filter(markers_filt_h,group=="Pneumocytes")%>%arrange(pval),10)
pn_m2=head(filter(markers_filt_m,group=="Pneumocytes")%>%arrange(pval),10)

ClosestFeature(human_all_atac,regions = pn_h2$feature)
ClosestFeature(mouse_select_atac,regions = pn_m2$feature)


mouse_select_atac2<-readRDS("/home/torkenczyk/H_M_chromatin_atlas/human_data/Mouse_plotting.rds")
DefaultAssay(mouse_select_atac2)<-"peaks"
mouse_select_atac2[["humanPeaks"]]<-NULL
mouse_select_atac2[["humanPeak2"]]<-NULL
mouse_select_atac2[["cre"]]<-NULL
mouse_select_atac2[["cre99"]]<-NULL
mouse_select_atac2[["cre05"]]<-NULL
mouse_select_atac2[["mm10"]]<-NULL
mouse_select_atac2[["chromvar"]]<-NULL

handannot<-as.data.frame(mouse_select_atac$handannot)
names(handannot)<-"handannot"
mouse_select_atac2<-AddMetaData(mouse_select_atac2,handannot)
mouse_select_atac2$handannot[is.na(mouse_select_atac2$handannot)]<-"remove"
mouse_select_atac2<-subset(mouse_select_atac2, subset = handannot != "remove")



markers_m_mm9 <- presto:::wilcoxauc.Seurat(X = mouse_select_atac2, group_by = 'handannot',assay = 'data', seurat_assay = 'peaks',min.pct = 0)


#markers_m_mm9 <- presto:::wilcoxauc.Seurat(X = mouse_select_atac, group_by = 'handannot',assay = 'data', seurat_assay = 'mm9',min.pct = 0)




```


#common da and species specific
```{r}
library("ggVennDiagram")
da.peaks<-list()
for (i in (levels(as.factor(markers_h$group))))
  {
  m_h<-filter(markers_filt_h,group==i)
  m_m<-filter(markers_filt_m,group==i)
  x=list(human=m_h$feature,mouse=m_m$feature)
  da.peaks[[i]]<-ggVennDiagram(x)+ggtitle(label = i)
  
}

wrap_plots(da.peaks,ncol=3,nrow = 5)



hg38tomm9peaks<-read.table(file="../mouse_data/Mouse_hg38_0.1_peaks.bed",header = F)
mm10tomm9peaks<-read.table(file="../mouse_data/Mouse_mm10_peaks.bed",header = F)
hg38tomm9peaks$feature_hg38<-paste(hg38tomm9peaks$V1,hg38tomm9peaks$V2,hg38tomm9peaks$V3,sep = "-")

mm10tomm9peaks$feature_mm10<-paste(mm10tomm9peaks$V1,mm10tomm9peaks$V2,mm10tomm9peaks$V3,sep = "-")
mm10tomm9peaks$feature_mm9<-gsub(mm10tomm9peaks$V4,pattern = "_",replacement = "-")
mm10tomm9peaks$V1<-NULL
mm10tomm9peaks$V2<-NULL
mm10tomm9peaks$V3<-NULL
mm10tomm9peaks$V4<-NULL

hg38tomm9peaks$feature_mm9<-gsub(hg38tomm9peaks$V4,pattern = "_",replacement = "-")
hg38tomm9peaks$V1<-NULL
hg38tomm9peaks$V2<-NULL
hg38tomm9peaks$V3<-NULL
hg38tomm9peaks$V4<-NULL


hg38tomm9peaks<-merge(hg38tomm9peaks,mm10tomm9peaks,by="feature_mm9")

mm9hg38logplots<-list()


#between mm9 and hg38
mousehumanlogplotsmm9<-list()
#between hg38 and hg38
mousehumanlogplotshg38<-list()
mouse_DA<-list()
human_DA<-list()
shared_DA<-list()
muse<-list()

for (i in (levels(as.factor(markers_h$group))))
  {
  print(i)

  m_h<-dplyr::filter(markers_h,group==i)
  m_m<-dplyr::filter(markers_m,group==i)
  m_m9<-dplyr::filter(markers_m_mm9,group==i)
  m_m9$feature_mm9=m_m9$feature
  m_m9<-merge(x=m_m9,y=hg38tomm9peaks,by="feature_mm9")
  m_m9$feature<-m_m9$feature_hg38
  
  matched<-findOverlaps(query=StringToGRanges(m_m9$feature),subject=StringToGRanges(m_m$feature))
  matched2<-findOverlapPairs(StringToGRanges(m_m9$feature),StringToGRanges(m_m$feature))
  #most 1on1 table(table(subjectHits(matched))>1) FALSE  196781 TRUE    8957 
  #most 1on1 table(table(queryHits(matched))>1) FALSE  123577 TRUE    39548 
  
 #matched2[as.vector(table(subjectHits(matched))>1) | as.vector(table(queryHits(matched))>1),]
  m_m9<-m_m9[queryHits(matched),]
  m_m9$feature_hg38matched<-m_m$feature[subjectHits(matched)]
  m_m9$logFC_hg38matched<-m_m$logFC[subjectHits(matched)]
  m_m9$avgExpr_hg38matched<-m_m$avgExpr[subjectHits(matched)]
  m_m9$auc_hg38matched<-m_m$auc[subjectHits(matched)]
  m_m9$padj_hg38matched<-m_m$padj[subjectHits(matched)]
  m_m9$pct_in_hg38matched<-m_m$pct_in[subjectHits(matched)]
  m_m9$pct_out_hg38matched<-m_m$pct_out[subjectHits(matched)]
  
  #first let us see if these values correlate
  mm9hg38logplots[[i]]<-ggplot(m_m9,aes(y=logFC_hg38matched,x=logFC))+geom_point()+theme_classic()+ggtitle(i)+ylab("hg38 calculated logFC")+xlab("mm9 calculated logFC")
  m_m9$feature<-m_m9$feature_hg38matched
  
  mu<-merge(x=m_m9,y=m_h,by="feature",all.x=T)
  mu<-mu[with(mu, order(-logFC.x)),]
  mu$rank.mouse<-c(1:length(mu$logFC.x))
  mu<-mu[with(mu, order(-logFC.y)),]
  mu$rank.human=c(1:length(mu$logFC.y))
  #this is a rough ordering
  mu$rankavg<-(mu$rank.mouse+mu$rank.human)/2
  mu$rankdiff.mouse<-mu$rank.mouse-mu$rank.human
  mu$rankdiff.human<-mu$rank.human-mu$rank.mouse
  if(i=="Schwann_cells" )
  {
  top_num_peaks=700
  }else{top_num_peaks=1000}
  mu<-mu[mu$padj.x<0.05 | mu$padj.y<0.05 | mu$padj_hg38matched<0.05,]
  mu<-mu[with(mu, order(rankavg)),]
  mu$category<-c(rep("shared",times=top_num_peaks),rep("other",times=length(mu$feature_mm9)-top_num_peaks))
  mu<-mu[with(mu, order(rank.human)),]
  mu$category[head(which(mu$category != "shared" & mu$logFC.y > 0 & mu$padj.x > 0.000001),n=top_num_peaks)]<-rep("human",times=top_num_peaks)
  mu<-mu[with(mu, order(rank.mouse)),]
  mu$category[head(which(mu$category != "shared" & mu$logFC.x > 0 & mu$category != "human" & mu$padj.y > 0.000001),n=top_num_peaks)]<-rep("mouse",times=top_num_peaks)
  
  
  #first let us see if these values correlate
  mousehumanlogplotsmm9[[i]]<-ggplot(mu,aes(x=logFC.x,y=logFC.y,color=category))+geom_point()+theme_classic()+ggtitle(i)+ylab("Human logFC")+xlab("Mouse mm9 calculated logFC")
  
  #first let us see if these values correlate
  mousehumanlogplotshg38[[i]]<-ggplot(mu,aes(x=logFC_hg38matched,y=logFC.y,color=category))+geom_point()+theme_classic()+ggtitle(i)+ylab("Human logFC")+xlab("Mouse hg38 calculated logFC")
  
  mouse_DA[[i]]<- mu[which(mu$category=="mouse"),]
  human_DA[[i]]<- mu[which(mu$category=="human"),]
  shared_DA[[i]]<- mu[which(mu$category=="shared"),]
  
  #what if we divide into quartiles (will be percetile)
  
  mu$m_quantile <- with(mu, factor(findInterval( logFC_hg38matched, c(-Inf,
                               quantile(logFC_hg38matched, probs=c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)), Inf)), labels=c("M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")))
  
  mu$h_quantile <- with(mu, factor(findInterval( logFC.y, c(-Inf,
                               quantile(logFC.y, probs=c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)), Inf)), labels=c("H1","H2","H3","H4","H5","H6","H7","H8","H9","H10")))
  
  mu$quantile_comb<-paste(mu$m_quantile,mu$h_quantile,sep = "_")
 
  muse[[i]]=mu
  
  
  
}


saveRDS(mouse_select_atac,file="Select_mouse_tissues.rds")
saveRDS(human_all_atac,file="Select_human_tissues.rds")
wrap_plots(mousehumanlogplotsmm9,ncol=4,nrow = 4)
wrap_plots(mousehumanlogplotshg38,ncol=4,nrow = 3)


ClosestFeature(mouse_select_atac,regions = pn_m$feature)

ClosestFeature(human_all_atac,regions = shared_DA$`Smooth muscle cells`$feature)
ho<-ClosestFeature(human_all_atac,regions = human_DA$`Smooth muscle cells`$feature)
mo<-ClosestFeature(human_all_atac,regions = mouse_DA$`Smooth muscle cells`$feature)



p1<-plot_combined_cross_species(gene = "SPARC")
p2<-plot_combined_cross_species(gene = "MPRIP")
p3<-plot_combined_cross_species(gene = "MPRIP")
p3<-plot_combined_cross_species(gene = "CNN1")
p3<-plot_combined_cross_species(gene = "MYH11")

p3<-plot_combined_cross_species(gene = "ZFHX3")
p3<-plot_combined_cross_species(gene = "TAGLN")
p3<-plot_combined_cross_species(gene = "SEPT9")


#this was only for the writeout downstream we should stick to the original

for (i in (levels(as.factor(markers_h$group))))
  {
  a<-names(human_DA[[i]])
  a<-gsub(a,pattern = "\\.x",replacement = ".mm9")
  a<-gsub(a,pattern = "feature_hg38",replacement = "mm9_lifted_hg38peak")
  a<-gsub(a,pattern = "feature_mm10",replacement = "mm9_lifted_mm10peak")
  a<-gsub(a,pattern = "feature_mm10",replacement = "mm9_lifted_mm10peak")
  a<-gsub(a,pattern = "\\.y",replacement = ".hg38")
  
  a<-paste(a,c("hg38_universal",rep("mouse",times=19),rep("human",times=9),rep("categorization",times=6)),sep = "_")
  names(human_DA[[i]])<-a
  names(shared_DA[[i]])<-a
  names(mouse_DA[[i]])<-a
  
}



save(shared_DA, file="active_use_objects/for_rahul/Shared.RData")

save(shared_DA, file="active_use_objects/for_rahul/Shared.bw.species.DA.RData")
save(mouse_DA, file="active_use_objects/for_rahul/Mouse_only.bw.species.DA.RData")
save(human_DA, file="active_use_objects/for_rahul/Human_only.bw.species.DA.RData")
```



#confirm overlap
```{r}
PNmm9<-shared_DA$Pneumocytes$feature_mm9_mouse
PNmm9_m<-mouse_DA$Pneumocytes$feature_mm9_mouse
PNmm9_h<-human_DA$Pneumocytes$feature_mm9_mouse


int_bed<-data.frame(chr=str_split_fixed(PNmm9,"-",n=3)[,1],start=str_split_fixed(PNmm9,"-",n=3)[,2],end=str_split_fixed(PNmm9,"-",n=3)[,3])
write.table(int_bed,file = "/home/torkenczyk/LD/celltype_bedfiles/Shared2celline.mm9.Pneumocytes.bed",quote = F,sep = "\t",row.names = F,col.names = F)


int_bed<-data.frame(chr=str_split_fixed(PNmm9_h,"-",n=3)[,1],start=str_split_fixed(PNmm9_h,"-",n=3)[,2],end=str_split_fixed(PNmm9_h,"-",n=3)[,3])
write.table(int_bed,file = "/home/torkenczyk/LD/celltype_bedfiles/Uniq2celline.h.mm9.Pneumocytes.bed",quote = F,sep = "\t",row.names = F,col.names = F)


int_bed<-data.frame(chr=str_split_fixed(PNmm9_m,"-",n=3)[,1],start=str_split_fixed(PNmm9_m,"-",n=3)[,2],end=str_split_fixed(PNmm9_m,"-",n=3)[,3])
write.table(int_bed,file = "/home/torkenczyk/LD/celltype_bedfiles/Uniq2celline.m.mm9.Pneumocytes.bed",quote = F,sep = "\t",row.names = F,col.names = F)

filecount = "/home/torkenczyk/H_M_chromatin_atlas/human_data/verify_peaks/Mouse/ATACseq_Matrix/chromatin.accessibility.raw.count.txt"

#this analysis is in that folder


#scATAC-seq analysis

lung_extra<-Read10X_h5(filename = "verify_peaks/Mouse/GSM4795059_7wk-scATAC_filtered_peak_bc_matrix.h5")
a<-read10xCounts("verify_peaks/GSM4795059_7wk-scATAC_filtered_peak_bc_matrix.h5")
library(DropletUtils)


DefaultAssay(mouse_select_atac)<-"mm10"

peaks_mm10<-row.names(mouse_select_atac)
granges_mm10<-StringToGRanges(peaks_mm10)
file_mouseval<-'verify_peaks/Mouse/GSM4795059_7wk-scATAC_fragments.tsv.gz'
frags_mm10 <- CreateFragmentObject(
  path = file_mouseval, 
  validate.fragments = TRUE
)
cRE_peaks_mm10<- FeatureMatrix(
  fragments = frags_mm10,
  features = granges_mm10,
)

# I did not quantify but could technically call peaks -> just did


# extract gene annotations from EnsDb
annotations_mouse_mm10 <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
# change to UCSC style since the data was mapped to mm
seqlevelsStyle(annotations_mouse_mm10) <- 'UCSC'
genome(annotations_mouse_mm10) <- "mm10"


mouse_select_atac[["mm10"]]<-CreateChromatinAssay(
  counts = cRE_peaks_mm10,
  genome = "mm10",
  ranges = mm10_peaks_granges,min.cells = 1,fragments = mm10_frags,annotation = annotations_mouse_mm10
)






```

#conservation of these site

```{r}

#check for conservation
bigwig<-"~/conservation_tracks/hg38.mm10.LECIF.srt.median.bw"
bigwig<-"~/conservation_tracks/hg38.phyloP100way.bw"
bigwig<-"~/conservation_tracks/hg38.phastCons100way.bw"
#check for unique mapping
bigwig<-"~/mappability_tracks/k50.Umap.MultiTrackMappability.bw"

region_value<-function(x){median(rtracklayer::import(con = bigwig,which = StringToGRanges(x),as = "NumericList")[[1]])}
vregvalue<-Vectorize(region_value,"x")


median_cons_reg_score<-list()
median_uniq_reg_score_h<-list()
median_uniq_reg_score_m<-list()


for (ct in levels(as.factor(markers_h$group))){
print(ct)
clusth<-human_DA[[ct]]$feature  
clustm<-mouse_DA[[ct]]$feature  
int_ist<-shared_DA[[ct]]$feature
int_ist<-unique(GRangesToString(sort(StringToGRanges(int_ist))))
int_bed<-data.frame(chr=str_split_fixed(int_ist,"-",n=3)[,1],start=str_split_fixed(int_ist,"-",n=3)[,2],end=str_split_fixed(int_ist,"-",n=3)[,3])
write.table(int_bed,file = paste0("/home/torkenczyk/LD/celltype_bedfiles/Shared2celline.",ct,".bed"),quote = F,sep = "\t",row.names = F,col.names = F)
unint_ist_m<-unique(GRangesToString(sort(StringToGRanges(clustm))))
unint_ist_h<-unique(GRangesToString(sort(StringToGRanges(clusth))))

unint_ist_m<-unint_ist_m[which(seqnames(StringToGRanges(unint_ist_m))!="chrY")]
unint_ist_h<-unint_ist_h[which(seqnames(StringToGRanges(unint_ist_h))!="chrY")]



unintint_bed_h<-data.frame(chr=str_split_fixed(unint_ist_m,"-",n=3)[,1],start=str_split_fixed(unint_ist_m,"-",n=3)[,2],end=str_split_fixed(unint_ist_m,"-",n=3)[,3])
unintint_bed_m<-data.frame(chr=str_split_fixed(unint_ist_h,"-",n=3)[,1],start=str_split_fixed(unint_ist_h,"-",n=3)[,2],end=str_split_fixed(unint_ist_h,"-",n=3)[,3])
write.table(unintint_bed_h,file = paste0("/home/torkenczyk/LD/celltype_bedfiles/Uniq2celline.h.",ct,".bed"),quote = F,sep = "\t",row.names = F,col.names = F)
write.table(unintint_bed_m,file = paste0("/home/torkenczyk/LD/celltype_bedfiles/Uniq2celline.m.",ct,".bed"),quote = F,sep = "\t",row.names = F,col.names = F)
print(length(unint_ist_h))
print(length(unint_ist_m))
print(length(int_ist))

#B_cells Cardiomyocytes Endothelial_cells Enterocytes Fibroblasts Goblet_cells Hepatocytes Macrophages Myofibroblasts Pneumocytes Schwann_cells

print("intersecting")
median_cons_reg_score[[ct]]<-vregvalue(int_ist)
print("Mouse")
median_uniq_reg_score_m[[ct]]<-vregvalue(unint_ist_m)

print("Human")
median_uniq_reg_score_h[[ct]]<-vregvalue(unint_ist_h)
}




top_1000_cons<-list()
for (ct in levels(as.factor(markers_h$group))){
a<-data.frame(score=median_cons_reg_score[[ct]],annot=rep("Conserved",times=length(median_cons_reg_score[[ct]])),celltype=rep(ct,times=length(median_cons_reg_score[[ct]])))
b<-data.frame(score=median_uniq_reg_score_m[[ct]],annot=rep("Mouse",times=length(median_uniq_reg_score_m[[ct]])),celltype=rep(ct,times=length(median_uniq_reg_score_m[[ct]])))
c<-data.frame(score=median_uniq_reg_score_h[[ct]],annot=rep("Human",times=length(median_uniq_reg_score_h[[ct]])),celltype=rep(ct,times=length(median_uniq_reg_score_h[[ct]])))
top_1000_cons[[ct]]<-rbind(a,b,c)
}

top_1000_cons_df<-Reduce(rbind,top_1000_cons)


mapp<-ggplot(top_1000_cons_df,aes(y=score,x=celltype,fill=annot))+geom_boxplot()+theme_classic()
write.table(top_1000_cons_df,row.names = T,col.names = T,sep="\t",quote=F,file = "Phylop_cons_1000.sites.txt")
write.table(top_1000_cons_df,row.names = T,col.names = T,sep="\t",quote=F,file = "Phast_cons_1000.sites.txt")
```


#now test if these DA sites are really DA
```{r}
library(chromVAR)
library(motifmatchr)
library(Matrix)
library(SummarizedExperiment)
library(BiocParallel)
library("BSgenome.Hsapiens.UCSC.hg38")
set.seed(2017)

#human_all_atac<-readRDS("/home/torkenczyk/Human_only_minimal_for_DA.rds")
#mouse_select_atac<-readRDS("/home/torkenczyk/Mouse_only_minimal_for_DA.rds")
have_reads_h<-human_all_atac[["cre"]][[]][human_all_atac[["cre"]][[]]$count>0,]
have_reads_m<-mouse_select_atac[["cre"]][[]][mouse_select_atac[["cre"]][[]]$count>0,]
#have_reads_m<-mouse_select_atac2[["peaks"]][[]][mouse_select_atac2[["peaks"]][[]]$count>0,] #if MM9


human_matched_h_hash<-list()
human_matched_m_hash<-list()
mouse_matched_m_hash<-list()
mouse_matched_h_hash<-list()
human_inters_matched_hash<-list()
mouse_inters_matched_hash<-list()

for (i in (levels(as.factor(markers_h$group)))) {
#clusth<-da.filt.human[da.filt.human$group==i,]$feature
#clustm<-da.filt.mouse[da.filt.mouse$group==i,]$feature
#hmatched<-row.names(have_reads_h) %in% clusth 
#mmatched<-row.names(have_reads_m) %in% clustm
#hda<-da.filt.human[da.filt.human$group==i,]
#mda<-da.filt.mouse[da.filt.mouse$group==i,]
#clusth<-head(hda[with(hda, order(-logFC)),],n=1000)$feature
#clustm<-head(mda[with(mda, order(-logFC)),],n=1000)$feature


#unint_ist_m<-subset(clustm, !(clustm %in% clusth))
#unint_ist_h<-subset(clusth, !(clusth %in% clustm))

unint_ist_m<-mouse_DA[[i]]$feature
unint_ist_h<-human_DA[[i]]$feature # IF orig

#unint_ist_m<-mouse_DA[[i]]$feature_mm9 # IF MM9
#unint_ist_h<-human_DA[[i]]$feature_mm9 # IF MM9

hmatched<-row.names(have_reads_h) %in% unint_ist_h
hmatched_m<-row.names(have_reads_h) %in% unint_ist_m
mmatched<-row.names(have_reads_m) %in% unint_ist_m
mmatched_h<-row.names(have_reads_m) %in% unint_ist_h

#himatched<-row.names(have_reads_h) %in% intersect(clusth,clustm)
himatched<-row.names(have_reads_h) %in% shared_DA[[i]]$feature
#mimatched<-row.names(have_reads_m) %in% intersect(clusth,clustm)

#mimatched<-row.names(have_reads_m) %in% shared_DA[[i]]$feature_mm9  #IF mm9
mimatched<-row.names(have_reads_m) %in% shared_DA[[i]]$feature

human_matched_h_hash[[i]]<-hmatched
human_matched_m_hash[[i]]<-hmatched_m
mouse_matched_m_hash[[i]]<-mmatched
mouse_matched_h_hash[[i]]<-mmatched_h

human_inters_matched_hash[[i]]<-himatched
mouse_inters_matched_hash[[i]]<-mimatched
}



human_matched_h_df <- data.frame(matrix(unlist(human_matched_h_hash), ncol =length(human_matched_h_hash)))
names(human_matched_h_df)<-names(human_matched_h_hash)
human_matched_m_df <- data.frame(matrix(unlist(human_matched_m_hash), ncol =length(human_matched_m_hash)))
names(human_matched_m_df)<-names(human_matched_m_hash)
mouse_matched_m_df <- data.frame(matrix(unlist(mouse_matched_m_hash), ncol=length(mouse_matched_m_hash)))
names(mouse_matched_m_df)<-names(mouse_matched_m_hash)
mouse_matched_h_df <- data.frame(matrix(unlist(mouse_matched_h_hash), ncol=length(mouse_matched_h_hash)))
names(mouse_matched_h_df)<-names(mouse_matched_h_hash)


#now intersected
human_inters_matched_df <- data.frame(matrix(unlist(human_inters_matched_hash), ncol =length(human_inters_matched_hash)))
names(human_inters_matched_df)<-names(human_inters_matched_hash)
mouse_inters_matched_df <- data.frame(matrix(unlist(mouse_inters_matched_hash), ncol=length(mouse_inters_matched_hash)))
names(mouse_inters_matched_df)<-names(mouse_inters_matched_hash)


#human in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)

#human in mouse
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_h, annotations = anno_h_m)

#in case runs mm9
#dev_h_h<-dev_h
#dev_h_m<-dev_h

#human mouse intersect
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h <- getAnnotations(annotations = human_inters_matched_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_i <- computeDeviations(object = fragments_h, annotations = anno_h)

#mouse in mouse

rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = mouse_matched_m_df, rowRanges = rowRanges)
#mouse select atac2 if mm9
#fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac2, assay = "peaks", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
#fragments_m <- addGCBias(fragments_m, genome = BSgenome.Mmusculus.UCSC.mm9)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_m_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
#dev_m_m<-dev_m
#dev_m_h<-dev_m

#mouse in human
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_h <- getAnnotations(annotations = mouse_matched_h_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
#fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac2, assay = "peaks", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
#fragments_m <- addGCBias(fragments_m, genome = BSgenome.Mmusculus.UCSC.mm9)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_m_h <- computeDeviations(object = fragments_m, annotations = anno_m_h)

#intersecting in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m <- getAnnotations(annotations = mouse_inters_matched_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
#fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac2, assay = "peaks", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
#fragments_m <- addGCBias(fragments_m, genome = BSgenome.Mmusculus.UCSC.mm9)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_m_i <- computeDeviations(object = fragments_m, annotations = anno_m)



chromvar.hz <- SummarizedExperiment::assays(dev_h_m)[[2]]
#rownames(x = chromvar.hz) <- colnames(x = anno_h)
human_all_atac[["Deviation_DA_mouse"]] <- CreateAssayObject(data = chromvar.hz)
chromvar.hz <- SummarizedExperiment::assays(dev_h_h)[[2]]
#rownames(x = chromvar.hz) <- colnames(x = anno_h)
human_all_atac[["Deviation_DA_human"]] <- CreateAssayObject(data = chromvar.hz)




DefaultAssay(human_all_atac)<- "Deviation_DA_human"
p1<-RidgePlot(human_all_atac, features = row.names(human_all_atac), ncol = 4)
DefaultAssay(human_all_atac)<- "Deviation_DA_mouse"
p2<-RidgePlot(human_all_atac, features = row.names(human_all_atac), ncol = 4)
#
pdf(file = "./plots/Deviation_DA_human_in_human.pdf",width = 30,height=25)
p1
dev.off()

pdf(file= "./plots/Deviation_DA_mouse_in_human.pdf",width = 30,height=25)
p2
dev.off()


chromvar.hz <- SummarizedExperiment::assays(dev_m_m)[[2]]
#rownames(x = chromvar.hz) <- colnames(x = anno_h)
mouse_select_atac[["Deviation_DA_mouse"]] <- CreateAssayObject(data = chromvar.hz)
chromvar.hz <- SummarizedExperiment::assays(dev_m_h)[[2]]
mouse_select_atac[["Deviation_DA_human"]] <- CreateAssayObject(data = chromvar.hz)

DefaultAssay(mouse_select_atac)<-"Deviation_DA_mouse"
p1b<-RidgePlot(mouse_select_atac, features = row.names(human_all_atac), ncol = 4)
DefaultAssay(mouse_select_atac)<-"Deviation_DA_human"
p2b<-RidgePlot(mouse_select_atac, features = row.names(human_all_atac), ncol = 4)


chromvar.hz <- SummarizedExperiment::assays(dev_h_i)[[2]]
#rownames(x = chromvar.hz) <- colnames(x = anno_h)
human_all_atac[["Deviation_DA_int"]] <- CreateAssayObject(data = chromvar.hz)

chromvar.hz <- SummarizedExperiment::assays(dev_m_i)[[2]]
#rownames(x = chromvar.hz) <- colnames(x = anno_h)
mouse_select_atac[["Deviation_DA_int"]] <- CreateAssayObject(data = chromvar.hz)

DefaultAssay(mouse_select_atac)<-"Deviation_DA_int"

p1c<-RidgePlot(mouse_select_atac, features = row.names(mouse_select_atac), ncol = 4)

DefaultAssay(human_all_atac)<-"Deviation_DA_int"

p2c<-RidgePlot(human_all_atac, features = row.names(human_all_atac), ncol = 4)

p1


```

#calculation of motif analysis
```{r}
#motif

library(BSgenome.Mmusculus.UCSC.mm10)
library(BSgenome.Mmusculus.UCSC.mm9)
library(qvalue)
library(JASPAR2020)
library(TFBSTools)
library(patchwork)
library(ggrepel)
set.seed(1234)



Idents(human_all_atac)<-human_all_atac$handannot
Idents(mouse_select_atac)<-mouse_select_atac$handannot

saveRDS(mouse_select_atac,file="Select_mouse_tissues.rds")
saveRDS(human_all_atac,file="Select_human_tissues.rds")

DefaultAssay(human_all_atac)<-"cre"
DefaultAssay(mouse_select_atac)<-"cre"

# Get a list of motif position frequency matrices from the JASPAR database
pfh <- getMatrixSet(
  x = JASPAR2020,
  opts = list(species = c(9606), all_versions = FALSE)
)

## Get a list of motif position frequency matrices from the JASPAR database
#pfm <- getMatrixSet(
#  x = JASPAR2020,
#  opts = list(species = 10090, all_versions = FALSE)
#)

#remove not chr1:23 x and Y seqs
human_granges<-StringToGRanges(row.names(human_all_atac))

# add motif information
human_all_atac <- AddMotifs(
  object = human_all_atac,
  genome = BSgenome.Hsapiens.UCSC.hg38,
  pfm = pfh
)

#no need to remove seqs for mouse since they do not project to human unique seqs
DefaultAssay(mouse_select_atac)<-"cre"
# add motif information
mouse_select_atac <- AddMotifs(
  object = mouse_select_atac,
  genome = BSgenome.Hsapiens.UCSC.hg38,
  pfm = pfh
)

DefaultAssay(mouse_select_atac)<-"mm10"
# add motif information
mouse_select_atac <- AddMotifs(
  object = mouse_select_atac,
  genome = BSgenome.Mmusculus.UCSC.mm10,
  pfm = pfh
)


mouse_select_atac[["mm9"]]<-CreateChromatinAssay(
  counts = GetAssayData(mouse_select_atac2,slot="counts",assay="peaks")[,colnames(mouse_select_atac)],
  genome = "mm9",
  ranges = StringToGRanges(row.names(mouse_select_atac2)),
)

DefaultAssay(mouse_select_atac)<-"mm9"
# add motif information
mouse_select_atac <- AddMotifs(
  object = mouse_select_atac,
  genome = BSgenome.Mmusculus.UCSC.mm9,
  pfm = pfh
)

saveRDS(mouse_select_atac,file="Select_mouse_tissues.rds")
saveRDS(human_all_atac,file="Select_human_tissues.rds")


#let us try mm9 and mm10


motifs_enrichlist_h_hg38<-list()
motifs_enrichlist_m_hg38<-list()
motifs_enrichlist_i_hg38<-list()

motifs_enrichlist_m_mm9<-list()
motifs_enrichlist_m_mm10<-list()
motifs_enrichlist_i_mm9<-list()
motifs_enrichlist_i_mm10<-list()

motifs_m_mm10<-list()
motifs_i_mm10<-list()
motifs_m_mm9<-list()
motifs_i_mm9<-list()
motifs_m_hg38<-list()
motifs_i_hg38<-list()
motifs_h_hg38<-list()
human_only<-list()
mouse_only<-list()
int_only<-list()

human_only<-list()
mouse_only1<-list()
mouse_only2<-list()
int_only1<-list()
int_only2<-list()
summary_plots_hg38<-list()


#this is the old way of finding shared, unique sites
for (i in levels(as.factor(markers_h$group))){
clusth<-human_DA[[i]]$feature
clustm<-mouse_DA[[i]]$feature
clustmm9<-mouse_DA[[i]]$feature_mm9
clustmm10<-mouse_DA[[i]]$feature_mm10
intersected<-shared_DA[[i]]$feature
intersectedmm9<-shared_DA[[i]]$feature_mm9
intersectedmm10<-shared_DA[[i]]$feature_mm10

DefaultAssay(mouse_select_atac)<-"cre"
DefaultAssay(human_all_atac)<-"cre"
enriched.motifs_h_hg38 <- FindMotifs(object = human_all_atac,features = clusth)
enriched.motifs_m_hg38 <- FindMotifs(object = mouse_select_atac,features = clustm)
enriched.motifs_i_hg38 <- FindMotifs(object = human_all_atac,features = intersected)

#enriched.motifs_h_m <- FindMotifs(object = human_all_atac,features = clustm)
#enriched.motifs_m_h <- FindMotifs(object = mouse_select_atac,features = clusth)




DefaultAssay(mouse_select_atac)<-"mm9"
enriched.motifs_i_mm9 <- FindMotifs(object = mouse_select_atac,features = intersectedmm9)
enriched.motifs_m_mm9 <- FindMotifs(object = mouse_select_atac,features = clustmm9)
DefaultAssay(mouse_select_atac)<-"mm10"
enriched.motifs_i_mm10 <- FindMotifs(object = mouse_select_atac,features = intersectedmm10)
enriched.motifs_m_mm10 <- FindMotifs(object = mouse_select_atac,features = clustmm10)


enriched.motifs_h_hg38$qvalues<-qvalue(enriched.motifs_h_hg38$pvalue,pi0 = 1)$qvalues
enriched.motifs_m_hg38$qvalues<-qvalue(enriched.motifs_m_hg38$pvalue,pi0 = 1)$qvalues


enriched.motifs_m_mm9$qvalues<-qvalue(enriched.motifs_m_mm9$pvalue,pi0 = 1)$qvalues
enriched.motifs_m_mm10$qvalues<-qvalue(enriched.motifs_m_mm10$pvalue,pi0 = 1)$qvalues

enriched.motifs_i_hg38$qvalues<-qvalue(enriched.motifs_i_hg38$pvalue,pi0 = 1)$qvalues
enriched.motifs_i_mm9$qvalues<-qvalue(enriched.motifs_i_mm9$pvalue,pi0 = 1)$qvalues
enriched.motifs_i_mm10$qvalues<-qvalue(enriched.motifs_i_mm10$pvalue,pi0 = 1)$qvalues

motifs_enrichlist_h_hg38[[i]]<-enriched.motifs_h_hg38
DefaultAssay(human_all_atac)<-"cre"
motifs_h_hg38[[i]]<-MotifPlot(object = human_all_atac,motifs = head(rownames(enriched.motifs_h_hg38)))

motifs_enrichlist_m_hg38[[i]]<-enriched.motifs_m_hg38
motifs_enrichlist_i_hg38[[i]]<-enriched.motifs_i_hg38
DefaultAssay(mouse_select_atac)<-"cre"
motifs_m_hg38[[i]]<-MotifPlot(object = mouse_select_atac,motifs = head(rownames(enriched.motifs_m_hg38)))
motifs_i_hg38[[i]]<-MotifPlot(object = mouse_select_atac,motifs = head(rownames(enriched.motifs_i_hg38)))

motifs_enrichlist_i_mm9[[i]]<-enriched.motifs_i_mm9
motifs_enrichlist_m_mm9[[i]]<-enriched.motifs_m_mm9
DefaultAssay(mouse_select_atac)<-"mm9"
motifs_m_mm9[[i]]<-MotifPlot(object = mouse_select_atac,motifs = head(rownames(enriched.motifs_m_mm9)))
motifs_i_mm9[[i]]<-MotifPlot(object = mouse_select_atac,motifs = head(rownames(enriched.motifs_i_mm9)))

motifs_enrichlist_i_mm10[[i]]<-enriched.motifs_i_mm10
motifs_enrichlist_m_mm10[[i]]<-enriched.motifs_m_mm10
DefaultAssay(mouse_select_atac)<-"mm10"
motifs_m_mm10[[i]]<-MotifPlot(object = mouse_select_atac,motifs = head(rownames(enriched.motifs_m_mm10)))
motifs_i_mm10[[i]]<-MotifPlot(object = mouse_select_atac,motifs = head(rownames(enriched.motifs_i_mm10)))

summary_plots_mm10<-list()
#for (i in levels(as.factor(markers_h$group))){

m1<-merge(motifs_enrichlist_h_hg38[[i]],motifs_enrichlist_m_hg38[[i]],by="motif.name",all=TRUE,suffixes = c(".human",".mouse"))
m2<-merge(motifs_enrichlist_i_hg38[[i]],as.data.frame(m1),by="motif.name",all=TRUE,suffixes = c(".intersect",".unique"))
m2<-m2[order(m2$fold.enrichment.mouse,decreasing = T),]
m2$mouse.order<-c(1:length(m2$fold.enrichment.mouse))
m2<-m2[order(m2$fold.enrichment,decreasing = T),]
m2$intersect.order<-c(1:length(m2$fold.enrichment))
m2<-m2[order(m2$fold.enrichment.human,decreasing = T),]
m2$human.order<-c(1:length(m2$fold.enrichment.human))

ggplot()+geom_point(aes(x=m2$intersect.order,y=m2$fold.enrichment,color="intersect"))+geom_point(aes(x=m2$intersect.order,y=m2$fold.enrichment.mouse,color="mouse"))+theme_classic()

m2$sigh<-m2$qvalues
m2$sigh[which(m2$qvalues<0.05 & m2$qvalues.human<0.05)]<-"significant intersect and human"
m2$sigh[which(m2$qvalues>0.05 & m2$qvalues.human<0.05)]<-"significant human"
m2$sigh[which(m2$qvalues<0.05 & m2$qvalues.human>0.05)]<-"significant intersect"
m2$sigh[which(m2$qvalues>0.05 & m2$qvalues.human>0.05)]<-"not significant"

m2$sigm<-m2$qvalues
m2$sigm[which(m2$qvalues<0.05 & m2$qvalues.mouse<0.05)]<-"significant intersect and mouse"
m2$sigm[which(m2$qvalues>0.05 & m2$qvalues.mouse<0.05)]<-"significant mouse"
m2$sigm[which(m2$qvalues<0.05 & m2$qvalues.mouse>0.05)]<-"significant intersect"
m2$sigm[which(m2$qvalues>0.05 & m2$qvalues.mouse>0.05)]<-"not significant"



ph_orderh<-ggplot(m2,aes(x=intersect.order,y=human.order,color=sigh))+geom_point()+scale_color_manual(values = c("not significant"="grey","significant human"="blue","significant intersect"="red","significant intersect and human"="magenta"))+theme_classic()+
geom_text_repel(
    data = subset(m2, m2$qvalues>0.05 & m2$qvalues.human<0.05),
    aes(label = motif.name),
    size = 5,
    box.padding = unit(0.35, "lines"),
    point.padding = unit(0.3, "lines")
  )+theme(legend.position = "bottom")

pi_orderh<-ggplot(m2,aes(x=intersect.order,y=human.order,color=sigh))+geom_point()+scale_color_manual(values = c("not significant"="grey","significant human"="blue","significant intersect"="red","significant intersect and human"="magenta"))+theme_classic()+
geom_text_repel(
    data = subset(m2, m2$qvalues<0.05 & m2$qvalues.human>0.05),
    aes(label = motif.name),
    size = 5,
    box.padding = unit(0.35, "lines"),
    point.padding = unit(0.3, "lines")
  )+theme(legend.position = "none")

pm_orderm<-ggplot(m2,aes(x=intersect.order,y=mouse.order,color=sigm))+geom_point()+scale_color_manual(values = c("not significant"="grey","significant mouse"="green","significant intersect"="red","significant intersect and mouse"="cyan"))+theme_classic()+
geom_text_repel(
    data = subset(m2, m2$qvalues>0.05 & m2$qvalues.mouse<0.05),
    aes(label = motif.name),
    size = 5,
    box.padding = unit(0.35, "lines"),
    point.padding = unit(0.3, "lines")
  )+theme(legend.position = "bottom")

pi_orderm<-ggplot(m2,aes(x=intersect.order,y=mouse.order,color=sigm))+geom_point()+scale_color_manual(values = c("not significant"="grey","significant mouse"="green","significant intersect"="red","significant intersect and mouse"="cyan"))+theme_classic()+
geom_text_repel(
    data = subset(m2, m2$qvalues<0.05 & m2$qvalues.mouse>0.05),
    aes(label = motif.name),
    size = 5,
    box.padding = unit(0.35, "lines"),
    point.padding = unit(0.3, "lines")
  )+theme(legend.position = "none")



summary_plots_hg38[[i]]<-ph_orderh+pi_orderh+pm_orderm+pi_orderm

m3<-merge(motifs_enrichlist_i_mm10[[i]],motifs_enrichlist_m_mm9[[i]],suffixes = c(".intersect",".mouse"),by="motif.name",all=TRUE)

m3<-m3[order(m3$fold.enrichment.mouse,decreasing = T),]
m3$mouse.order<-c(1:length(m2$fold.enrichment.mouse))
m3<-m3[order(m3$fold.enrichment.intersect,decreasing = T),]
m3$intersect.order<-c(1:length(m3$fold.enrichment.intersect))

m3$sigm<-m3$qvalues.intersect
m3$sigm[which(m3$qvalues.intersect<0.005 & m3$qvalues.mouse<0.005)]<-"significant intersect and mouse"
m3$sigm[which(m3$qvalues.intersect>0.005 & m3$qvalues.mouse<0.005)]<-"significant mouse"
m3$sigm[which(m3$qvalues.intersect<0.005 & m3$qvalues.mouse>0.005)]<-"significant intersect"
m3$sigm[which(m3$qvalues.intersect>0.005 & m3$qvalues.mouse>0.005)]<-"not significant"


pm_orderm2<-ggplot(m3,aes(x=intersect.order,y=mouse.order,color=sigm))+geom_point()+scale_color_manual(values = c("not significant"="grey","significant mouse"="green","significant intersect"="red","significant intersect and mouse"="cyan"))+theme_classic()+
geom_text_repel(
    data = subset(m3, m3$qvalues.intersect>0.005 & m3$qvalues.mouse<0.005),
    aes(label = motif.name),
    size = 5,
    box.padding = unit(0.35, "lines"),
    point.padding = unit(0.3, "lines")
  )+theme(legend.position = "bottom")

pi_orderm2<-ggplot(m3,aes(x=intersect.order,y=mouse.order,color=sigm))+geom_point()+scale_color_manual(values = c("not significant"="grey","significant mouse"="green","significant intersect"="red","significant intersect and mouse"="cyan"))+theme_classic()+
geom_text_repel(
    data = subset(m3, m3$qvalues.intersect<0.005 & m3$qvalues.mouse>0.005),
    aes(label = motif.name),
    size = 5,
    box.padding = unit(0.35, "lines"),
    point.padding = unit(0.3, "lines")
  )+theme(legend.position = "none")

summary_plots_mm10[[i]]<-pm_orderm2+pi_orderm2


ontlym1<-m3[which(m3$qvalues.mouse<0.01 & m3$qvalues.intersect>0.05),]
ontlyint1<-m3[which(m3$qvalues.mouse>0.05 & m3$qvalues.intersect<0.01),]
#ggplot(m2,aes(x=fold.enrichment,y=fold.enrichment.mouse))+geom_point()+theme_classic()
#ggplot(m2,aes(x=fold.enrichment,y=fold.enrichment.human))+geom_point()+theme_classic()+geom_text(a)

ontlyint2<-m2[which(m2$qvalues.mouse>0.1 & m2$qvalues.human>0.1 & m2$qvalues<0.01),]
ontlym2<-m2[which(m2$qvalues.mouse<0.01 & m2$qvalues.human>0.1 & m2$qvalues>0.1),]
ontlyh<-m2[which(m2$qvalues.mouse>0.1 & m2$qvalues.human<0.01 & m2$qvalues>0.1),]

int_only1[[i]]<-ontlyint1
mouse_only1[[i]]<-ontlym1
human_only[[i]]<-ontlyh
mouse_only2[[i]]<-ontlym2
int_only2[[i]]<-ontlyint2
}

#for all motifs print out and order

m_all_list<-list()
for (i in levels(as.factor(markers_h$group))){
m1<-merge(motifs_enrichlist_h_hg38[[i]],motifs_enrichlist_m_hg38[[i]],by="motif.name",all=TRUE,suffixes = c(".human",".mouse"))
m2<-merge(motifs_enrichlist_i_hg38[[i]],as.data.frame(m1),by="motif.name",all=TRUE,suffixes = c(".intersect",".unique"))
names(m2)<-c(paste0(names(m2)[1:9],rep("_intersect",times=9)),paste0(names(m2)[10:25],rep("_unique",times=15)))
#rank human
m2<-m2[with(m2, order(pvalue.human_unique)),]
m2$rank.human_unique<-c(1:length(m2$pvalue.human_unique))
#rank mouse
m2<-m2[with(m2, order(pvalue.mouse_unique)),]
m2$rank.mouse_unique<-c(1:length(m2$pvalue.mouse_unique))
#rank shared
m2<-m2[with(m2, order(pvalue_intersect)),]
m2$rank.intersect<-c(1:length(m2$pvalue_intersect))

#order differentce
m2$rankdiff.mouse<-m2$rank.mouse-(m2$rank.human+m2$rank.intersect)/2
m2$rankdiff.human<-m2$rank.human-(m2$rank.mouse+m2$rank.intersect)/2
m2$rankdiff.intersect<-m2$rank.intersect-(m2$rank.mouse+m2$rank.human)/2

m_all_list[[i]]<-m2

}

save(m_all_list, file="active_use_objects/for_rahul/All.motif.info.RData")

#use m_all_list again for chromvar

motif_merge <- function(df1, df2){                                # Create own merging function
  merge(df1, df2, by = "motif",all=T)
}

jointM<-Reduce(motif_merge,motifs_enrichlist)

p <- ggplot(data = enriched.motifs, mapping = aes_string(x = 'Celltype', y = 'annot')) +
    geom_point(mapping = aes_string(size = 'fold.enrichment', color = 'qvalue')) +
    scale_colour_gradientn(colors=colorPal(10)) +
    theme_classic() +
    theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))

#now lets highligh specific TFs in peaks
i="Cardiomyocytes"
i="Pneumocytes"
CT_test<-list()
for (i in (levels(as.factor(markers_h$group))))
{


  
  
  
}

CT_CARD<-CT_test
CT_PNU<-CT_test

ggplot(mudf,aes(x=logFC_hg38matched,y=logFC.y,color=quantile_comb))+geom_point()+theme_classic()



int_only1$Cardiomyocytes


plot_TF_fold<-function(celltype=NULL,TFs=NULL){
if(is.null(celltype) || is.null(celltype)){print("Provide celltype and TFs")}
else{
ls<-unlist(GetMotifData(object = human_all_atac, assay = "cre", slot = "motif.names"))
motif_labels<-names(ls[match(TFs,ls)])
moinfo<-as.data.frame(as.matrix(GetMotifData(object = human_all_atac, assay = "cre", slot = "data")[,motif_labels]))
names(moinfo)<-TFs
moinfo<-moinfo>0
mu<-muse[[celltype]]
#remove duplicates here
mu<-mu[!duplicated(mu$feature),]
row.names(mu)<-mu$feature
#merge with TFs
mu<-merge(mu,moinfo,by="row.names")
motif_plots<-list()
for (j in TFs)
{
mu_m<-mu[mu[,j],]
mu_n<-mu[!mu[,j],]
p<-ggplot(mu_n,aes_string(x="logFC_hg38matched",y="logFC.y",alpha = 1/10))+geom_point()+theme_classic()+ggtitle(i)+ylab("Human logFC")+xlab("Mouse hg38 calculated logFC")
motif_plots[[j]]<-p+geom_point(data = mu_m,mapping = aes_string(x="logFC_hg38matched",y="logFC.y",color=j))
}
return(motif_plots)
}}
  
p<-plot_TF_fold(celltype = "Cardiomyocytes",TFs = c("SRF","OVOL1","ETS2","NRF1","ZNF148"))

motif.all <- GetMotifData(
  object = human_all_atac, assay = "cre", slot = "data"
)

  ls<-unlist(GetMotifData(object = human_all_atac, assay = "cre", slot = "motif.names"))
  motif_labels<-names(ls[match(motif.names,ls)])
  M<-GetMotifData(human_all_atac, assay = "cre")[,motif_labels]
  M2<-apply(M,2,function(x){which(x>0)})
  M2n<-apply(M,2,function(x){which(x==0)})

a<-merge(CT_test$M10_H10,CT_test$M1_H10,by="motif",suffixes = c(".int",".human"))
b<-merge(CT_test$M10_H10,CT_test$M10_H1,by="motif",suffixes = c(".int",".mouse"))

ggplot(a,aes(x=-log(pvalue.int),y=-log(pvalue.human)))+geom_point()+theme_classic()
ggplot(b,aes(x=-log(pvalue.int),y=-log(pvalue.mouse)))+geom_point()+theme_classic()

b[-log(b$pvalue.int)> 5 | b$pvalue.mouse > 0.9,]


library(RColorBrewer)
n <- 100
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,n), col=sample(col_vector, n))

library(randomcoloR)

plot_quantile_pval<-function(TF=NULL){
cont<-list()
  for (j in (levels(as.factor(mudf$quantile_comb))))
  {print(j)
    a<-CT_test[[j]]
    b<-a[a$motif.name==TF,]
    cont[[j]]<-data.frame(p=b$pvalue,section=j)
  }

d<-bind_rows(cont, .id = "column_label")

mudf$section<-mudf$quantile_comb
mudf2<-merge(mudf,d,all.x=TRUE,by="section")


n <- 100
palette <- distinctColorPalette(n)

p<-ggplot(mudf2,aes(x=logFC_hg38matched,y=logFC.y,color=-log10(p)))+geom_point()+theme_classic()+ylab("Human logFC")+xlab("Mouse hg38 calculated logFC")+ggtitle(label = TF)
return(p)
}
p2<-ggplot(mudf,aes(x=logFC_hg38matched,y=logFC.y,color=quantile_comb))+geom_point()+theme_classic()+scale_colour_manual(values = palette)+theme(legend.position = "none")

p_MEF2D<-plot_quantile_pval(TF = "MEF2D")
p_MEF2C<-plot_quantile_pval(TF = "MEF2C")
p_MEF2A<-plot_quantile_pval(TF = "MEF2A")
p_SRF<-plot_quantile_pval(TF = "MEF2A")
p_ETS2<-plot_quantile_pval(TF = "ETS2")
p_OVOL1<-plot_quantile_pval(TF = "OVOL1")
p_OVOL1<-plot_quantile_pval(TF = "ERF")

p_ETV5<-plot_quantile_pval(TF = "ETV5")
p_ZFP42<-plot_quantile_pval(TF = "ZFP42")

p_MYOD1<-plot_quantile_pval(TF = "MYOD1")
p_ZEB1<-plot_quantile_pval(TF = "ZEB1")
p_ZNF75D<-plot_quantile_pval(TF = "ZNF75D")


p2+p_MEF2C+p_MEF2D

p2+p_ETV5+p_ZFP42
p2+p_MYOD1+p_ZNF75D

mouse_select_atac
MYD<-plot_combined_cross_species(gene = "MYOD1")

#pneumocytes

p_TEAD1<-plot_quantile_pval(TF = "TEAD1")
p_TEAD2<-plot_quantile_pval(TF = "TEAD2")
p_TEAD3<-plot_quantile_pval(TF = "TEAD3")
p_NKX28<-plot_quantile_pval(TF = "NKX2-8")

p2+p_TEAD1+p_NKX28

p_THAP1<-plot_quantile_pval(TF = "THAP1")
p_KLF13<-plot_quantile_pval(TF = "KLF13")

p2+p_THAP1+p_KLF13


DefaultAssay(human_all_atac)<-"chromvar"

SOX8<-VlnPlot(
  object = human_all_atac,
  features = "MA1120.1",split.by = "tissue"
)


```

```{r}
#motif chromvar
human_all_atac <- RunChromVAR(
  object = human_all_atac,
  genome = BSgenome.Hsapiens.UCSC.hg38
)

mouse_select_atac <- RunChromVAR(
  object = mouse_select_atac,
  genome = BSgenome.Hsapiens.UCSC.hg38
)

saveRDS(mouse_select_atac,file="Select_mouse_tissues.rds")
saveRDS(human_all_atac,file="Select_human_tissues.rds")

#calculate cell type specific Tfs
DefaultAssay(human_all_atac)<-"chromvar"

differential.activity.h <- FindAllMarkers(
  object = human_all_atac,
  only.pos = TRUE,
  test.use = 'LR',
  latent.vars = 'nCount_cre'
)

DefaultAssay(human_all_atac)<-"cre"

#calculate cell type specific Tfs
DefaultAssay(mouse_select_atac)<-"chromvar"

differential.activity.m <- FindAllMarkers(
  object = mouse_select_atac,
  only.pos = TRUE,
  test.use = 'LR',
  latent.vars = 'nCount_cre'
)



h_list<-list()
for (i in levels(differential.activity.h$cluster))
{print(i)
h_list[[i]]<-MotifPlot(
  object = human_all_atac,
  motifs = head(differential.activity.h[differential.activity.h$cluster==i,]$gene),
  assay = 'creprun'
)
}



DefaultAssay(mouse_select_atac)<-"cre"

m_list<-list()
clusters<-levels(differential.activity.m$cluster)
for (i in clusters)
{print(i)
m_list[[i]]<-MotifPlot(
  object = mouse_select_atac,
  motifs = head(differential.activity.m[differential.activity.m$cluster==i,]$gene),
  assay = 'cre'
)
}



DefaultAssay(mouse_select_atac)<-"chromvar"
DefaultAssay(human_all_atac)<-"chromvar"

p1<-FeaturePlot(human_all_atac, features =  goblet_shared[32],col=c("blue","green","red"),raster=F)
p2<-FeaturePlot(mouse_select_atac, features =  goblet_shared[32],col=c("blue","green","red"),raster=F)

VlnPlot(human_all_atac,features =  goblet_shared[32])+ theme(legend.position = "none")|VlnPlot(mouse_select_atac,features =  goblet_shared[32])+ theme(legend.position = "none")

CM<-differential.activity.h[differential.activity.h$cluster=="Cardiomyocytes",]$gene[na.omit(match(differential.activity.h[differential.activity.h$cluster=="Cardiomyocytes",]$gene,differential.activity.m[differential.activity.m$cluster=="Cardiomyocytes",]$gene))]
MYF<-differential.activity.h[differential.activity.h$cluster=="Myofibroblasts",]$gene[na.omit(match(differential.activity.h[differential.activity.h$cluster=="Myofibroblasts",]$gene,differential.activity.m[differential.activity.m$cluster=="Myofibroblasts",]$gene))]

#"MA0660.1", mef2B

VlnPlot(human_all_atac,features =  "MA0660.1")+ theme(legend.position = "none")|VlnPlot(mouse_select_atac,features =  "MA0660.1")+ theme(legend.position = "none")

#"MA0083.3", SRF

VlnPlot(human_all_atac,features =  "MA0083.3")+ theme(legend.position = "none")|VlnPlot(mouse_select_atac,features =  "MA0083.3")+ theme(legend.position = "none")



levels(Idents(human_all_atac))
Idents(mouse_select_atac) <- factor(Idents(mouse_select_atac), levels = levels(Idents(human_all_atac)))

DotPlot(human_all_atac,assay = "chromvar",features =  c("MA0660.1","MA0083.3","MA0653.1")) | DotPlot(mouse_select_atac,assay = "chromvar",features = c("MA0660.1","MA0083.3","MA0653.1"))


outersect <- function(x, y) {
  sort(c(setdiff(x, y),
         setdiff(y, x)))
}


comparison<-list()
all<-c()
all_out<-c()
for (i in levels(Idents(mouse_select_atac)))
{
M<-differential.activity.m[differential.activity.m$cluster==i,]$gene
H<-differential.activity.h[differential.activity.h$cluster==i,]$gene
#sh<-merge(differential.activity.m[differential.activity.m$cluster==i,],differential.activity.h[differential.activity.h$cluster==i,],by='gene')
IN_one<-outersect(M,H)
IN_both<-intersect(M,H)
all_out<-c(all_out,head(IN_one,n=2))
#top_both<-c(head(IN_both,n=2),head(IN_one,n=2))
top_both<-c(head(IN_both,n=5))
all<-c(all,top_both)
comparison[[i]]<-DotPlot(human_all_atac,assay = "chromvar",features =  top_both,cols=c('#3182bd',"#de2d26")) + theme(legend.position="top")+ggtitle(label = "Human") +xlab(label = "") | DotPlot(mouse_select_atac,assay = "chromvar",features = top_both,cols=c('#3182bd',"#de2d26"))+ theme(legend.position="top")+ggtitle(label = "Mouse") +theme(axis.title.y=element_blank(),axis.text.y=element_blank(), axis.ticks.y=element_blank())+xlab(label = "")
}

all<-unique(all)
all_out<-unique(all_out)


ls<-unlist(GetMotifData(object = human_all_atac, assay = "cre", slot = "motif.names"))
motif_labels<-ls[match(all,names(ls))]



p1<-DotPlot(human_all_atac,assay = "chromvar",features =  all,cols=c('#3182bd',"#de2d26")) + theme(legend.position="top")+ggtitle(label = "Human") +ylab(label = "")


p2<-DotPlot(mouse_select_atac,assay = "chromvar",features = all,cols=c('#3182bd',"#de2d26"))+ theme(legend.position="top")+ggtitle(label = "Mouse") 


p_human<-p1 + scale_x_discrete(labels=motif_labels)+theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))+xlab(label = "")
p_mouse<-p2 + scale_x_discrete(labels=motif_labels)+theme(axis.title.y=element_blank(),axis.text.y=element_blank(), axis.ticks.y=element_blank(),axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))+xlab(label = "")


P_shared<-p_human | p_mouse

intersect_df<-data.frame(motif=character(),log_fold_change=double(),qvalue=double(),celltype=character(),species=character())
#see the top motifs in DA
for (i in levels(Idents(mouse_select_atac)))
{
ct_DA_mt<-m_all_list[[i]]
res_loc_DA<-ct_DA_mt[match(all,ct_DA_mt$motif_intersect),]
out<-data.frame(motif=res_loc_DA$motif.name_intersect,log_fold_change=res_loc_DA$fold.enrichment_intersect,qvalue=res_loc_DA$qvalues_intersect,celltype=rep(i,times=length(res_loc_DA$motif.name_intersect)),species=rep("intersect",times=length(res_loc_DA$motif.name_intersect)))
out2<-data.frame(motif=res_loc_DA$motif.name_intersect,log_fold_change=res_loc_DA$fold.enrichment.human_unique,qvalue=res_loc_DA$qvalues.human_unique,celltype=rep(i,times=length(res_loc_DA$motif.name_intersect)),species=rep("human",times=length(res_loc_DA$motif.name_intersect)))
out3<-data.frame(motif=res_loc_DA$motif.name_intersect,log_fold_change=res_loc_DA$fold.enrichment.mouse_unique,qvalue=res_loc_DA$qvalues.mouse_unique,celltype=rep(i,times=length(res_loc_DA$motif.name_intersect)),species=rep("mouse",times=length(res_loc_DA$motif.name_intersect)))
intersect_df<-rbind(intersect_df,out)
intersect_df<-rbind(intersect_df,out2)
intersect_df<-rbind(intersect_df,out3)
}


intersect_df$celltype<-factor(intersect_df$celltype,levels = c(levels(Idents(mouse_select_atac))))
intersect_df$main<-paste0(intersect_df$celltype,"_",intersect_df$species)
intersect_df$main<-factor(intersect_df$main,levels = c(unique(intersect_df$main)))
intersect_df$motif<-factor(intersect_df$motif,levels = c(motif_labels))

p_intersect<-ggplot(intersect_df,aes(y=main,x=motif,color= qvalue,size=log_fold_change))+geom_point()+theme_classic()+theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))+scale_color_gradient(high = '#3182bd', low = "#de2d26")+ylab('')+xlab('')
ggsave(p_intersect,file="./plots/ChromVar_highlighted_TFs_plotted_on_DA_sites.png",width = 12,height = 7.5)

P_shared<-p_human | p_mouse
p_intersect

#now unique

unique_df<-data.frame(motif=character(),log_fold_change=double(),qvalue=double(),celltype=character(),peaks=character())
#see the top motifs in DA, s
for (i in levels(Idents(mouse_select_atac)))
{
ct_DA_mt<-m_all_list[[i]]
ct_DA_mt<-ct_DA_mt[which(ct_DA_mt$qvalues.human_unique>0.1 & ct_DA_mt$qvalues_intersect>0.1 & ct_DA_mt$qvalues.mouse_unique<0.05),]
res_loc_DA=head(ct_DA_mt[order(ct_DA_mt$rankdiff.mouse),],n=5)
#res_loc_DA<-ct_DA_mt[match(all,ct_DA_mt$motif_intersect),]
out_h<-data.frame(motif=res_loc_DA$motif.name_intersect,log_fold_change=res_loc_DA$fold.enrichment.human_unique,qvalue=res_loc_DA$qvalues.human_unique,celltype=rep(i,times=length(res_loc_DA$motif.name_intersect)),peaks=rep("human",times=length(res_loc_DA$motif.name_intersect)))
out_m<-data.frame(motif=res_loc_DA$motif.name_intersect,log_fold_change=res_loc_DA$fold.enrichment.mouse_unique,qvalue=res_loc_DA$qvalues.mouse_unique,celltype=rep(i,times=length(res_loc_DA$motif.name_intersect)),peaks=rep("mouse",times=length(res_loc_DA$motif.name_intersect)))
out_i<-data.frame(motif=res_loc_DA$motif.name_intersect,log_fold_change=res_loc_DA$fold.enrichment_intersect,qvalue=res_loc_DA$qvalues_intersect,celltype=rep(i,times=length(res_loc_DA$motif.name_intersect)),peaks=rep("intersect",times=length(res_loc_DA$motif.name_intersect)))
unique_df<-rbind(unique_df,out_m,out_h,out_i)

}
unique_df$annot<-paste(unique_df$celltype,unique_df$peaks,sep = "_")
annot_order<-unique(unique_df$annot)
motif_order<-unique(unique_df$motif)
unique_df$annot<-factor(unique_df$annot,levels=annot_order)
unique_df$motif<-factor(unique_df$motif,levels=motif_order)

p_m_u<-ggplot(unique_df,aes(y=annot,x=motif,color= qvalue,size=log_fold_change))+geom_point()+theme_classic()+theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))+scale_color_gradient2(high = '#3182bd',midpoint = 0.25 ,low = "#de2d26")
p_h_u<-ggplot(unique_df,aes(y=annot,x=motif,color= qvalue,size=log_fold_change))+geom_point()+theme_classic()+theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))+scale_color_gradient2(high = '#3182bd',midpoint = 0.25 ,low = "#de2d26")
p_i_u<-ggplot(unique_df,aes(y=annot,x=motif,color= qvalue,size=log_fold_change))+geom_point()+theme_classic()+theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))+scale_color_gradient2(high = '#3182bd',midpoint = 0.25 ,low = "#de2d26")+ylab("")+xlab("")



p2<-MotifPlot(
  object = mouse_select_atac,
  motifs = all,
  assay = 'cre'
)


#only in one

#"MA0660.1", mef2B

wrap_plots(MotifPlot(
  object = mouse_select_atac,
  motifs = c("MA0048.2"),
  assay = 'cre'
) , VlnPlot(human_all_atac,features =  "MA0048.2")+ ylab("Deviation score") +xlab(label="") + theme(legend.position = "none") ,VlnPlot(mouse_select_atac,features =  "MA0048.2")+ ylab("Deviation score")+ theme(legend.position = "none") +xlab(label=""),ncol = 1,heights = c(0.2,1,1),widths = c(0.2,1,1))



```


#go ontology analysis
```{r}

#GREAT
library(rGREAT)
library(BSgenome.Hsapiens.UCSC.hg38)

GO_DA <- function (input_peaks,background_peaks=NULL,genome="hg38")
{
if (is.null(background_peaks)){
job = submitGreatJob(input_peaks, species = genome) 
} else
{
job = submitGreatJob(input_peaks, species = "hg38",bg=background_peaks)
}
tb = getEnrichmentTables(job)
return(tb)
}

DefaultAssay(human_all_atac)<-"cre"

bp=sort(StringToGRanges(row.names(human_all_atac)))
DefaultAssay(mouse_select_atac)<-"mm9"
bp2=sort(StringToGRanges(row.names(mouse_select_atac)))
DefaultAssay(mouse_select_atac)<-"cre"
GO_enrichlist_int<-list()
GO_enrichlist_h<-list()
GO_enrichlist_m<-list()
GO_enrichlist_m2<-list()
for (i in (levels(as.factor(markers_h$group)))){
print(i)
clusth<-StringToGRanges(unique(GRangesToString(sort(StringToGRanges(human_DA[[i]]$feature)))))
clustm<-StringToGRanges(unique(GRangesToString(sort(StringToGRanges(mouse_DA[[i]]$feature)))))
#clustm2<-StringToGRanges(unique(GRangesToString(sort(StringToGRanges(mouse_DA[[i]]$feature_mm9)))))
intersected<-StringToGRanges(unique(GRangesToString(sort(StringToGRanges(shared_DA[[i]]$feature)))))
GO_enrichlist_int[[i]]<-GO_DA(input_peaks = intersected,background_peaks = bp,genome = "hg38")
GO_enrichlist_h[[i]]<-GO_DA(input_peaks = clusth,background_peaks = bp,genome = "hg38")
GO_enrichlist_m[[i]]<-GO_DA(input_peaks = clustm,background_peaks = bp,genome = "hg38")

#GO_enrichlist_m2[[i]]<-GO_DA(input_peaks = clustm2,background_peaks = bp2,genome = "mm9")

}

save(GO_enrichlist_m, file="GO_enrichlist_m.RData")
save(GO_enrichlist_m2, file="GO_enrichlist_m_mm9.RData")

ont<-availableOntologies(job)

GobioPCM<-data.frame(annot=GO_enrichlist_m$Cardiomyocytes$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Cardiomyocytes$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Cardiomyocytes$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Cardiomyosites",times=length(GO_enrichlist_m$Cardiomyocytes$`GO Biological Process`$Hyper_Adjp_BH)))
GobioPnmc<-data.frame(annot=GO_enrichlist_m$Pneumocytes$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Pneumocytes$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Pneumocytes$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Pneumocytes",times=length(GO_enrichlist_m$Pneumocytes$`GO Biological Process`$Hyper_Adjp_BH)))
GobioMFb<-data.frame(annot=GO_enrichlist_m$Myofibroblasts$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Myofibroblasts$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Myofibroblasts$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Myofibroblast",times=length(GO_enrichlist_m$Myofibroblasts$`GO Biological Process`$Hyper_Adjp_BH)))
GobioBcls<-data.frame(annot=GO_enrichlist_m$B_cells$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$B_cells$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$B_cells$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("B cells",times=length(GO_enrichlist_m$B_cells$`GO Biological Process`$Hyper_Adjp_BH)))
Gobioendo<-data.frame(annot=GO_enrichlist_m$Endothelial_cells$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Endothelial_cells$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Endothelial_cells$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Endothelial_cells",times=length(GO_enrichlist_m$Cardiomyocytes$`GO Biological Process`$Hyper_Adjp_BH)))
GobioSW<-data.frame(annot=GO_enrichlist_m$Schwann_cells$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Schwann_cells$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Schwann_cells$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Swann_cells",times=length(GO_enrichlist_m$Schwann_cells$`GO Biological Process`$Hyper_Adjp_BH)))
Gobioent<-data.frame(annot=GO_enrichlist_m$Enterocytes$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Enterocytes$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Enterocytes$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Enterocytes",times=length(GO_enrichlist_m$Enterocytes$`GO Biological Process`$Hyper_Adjp_BH)))
Gobigob<-data.frame(annot=GO_enrichlist_m$Goblet_cells$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Goblet_cells$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Goblet_cells$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Goblet cells",times=length(GO_enrichlist_m$Goblet_cells$`GO Biological Process`$Hyper_Adjp_BH)))
Gobifib<-data.frame(annot=GO_enrichlist_m$Fibroblasts$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Fibroblasts$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Fibroblasts$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Fibroblasts",times=length(GO_enrichlist_m$Fibroblasts$`GO Biological Process`$Hyper_Adjp_BH)))
GobiHep<-data.frame(annot=GO_enrichlist_m$Hepatocytes$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Hepatocytes$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Hepatocytes$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Hepatocytes",times=length(GO_enrichlist_m$Hepatocytes$`GO Biological Process`$Hyper_Adjp_BH)))
GobiMAC<-data.frame(annot=GO_enrichlist_m$Macrophages$`GO Biological Process`$name,Hyper_Adjp_BH=GO_enrichlist_m$Macrophages$`GO Biological Process`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist_m$Macrophages$`GO Biological Process`$Hyper_Fold_Enrichment,Celltype=rep("Macrophages",times=length(GO_enrichlist_m$Hepatocytes$`GO Biological Process`$Hyper_Adjp_BH)))



Gobio<-rbind(head(GobioPCM,n=5),head(GobioMFb,n=5),head(GobiHep,n=5),head(GobioPnmc,n=5),head(Gobioendo,n=5),head(GobioSW,n=5),head(GobioBcls,n=5),head(GobiMAC,n=5),head(Gobioent,n=5),head(Gobigob,n=5),head(Gobifib,n=5))
write.table(Gobio,file="Mouse_DA_sites_go.txt",quote = F,sep="\t",col.names = T)

  col.low = "brown1"
  col.mid = "floralwhite"
  col.high = "dodgerblue"
  
Gobio$Celltype<-factor(Gobio$Celltype, levels = c("Swann_cells","Enterocytes","Goblet cells","B cells","Macrophages","Endothelial_cells","Fibroblasts", "Myofibroblast", "Cardiomyosites","Pneumocytes","Hepatocytes"))
  colorPal <- grDevices::colorRampPalette(c(col.low, col.mid, col.high))
pm <- ggplot(data = Gobio, mapping = aes_string(x = 'Celltype', y = 'annot')) +
    geom_point(mapping = aes_string(size = 'Hyper_Fold_Enrichment', color = 'Hyper_Adjp_BH')) +
    scale_colour_gradientn(colors=colorPal(10)) +
    theme_classic() +
    theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))


GobioPCM<-data.frame(annot=GO_enrichlist$Cardiomyocytes$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Cardiomyocytes$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Cardiomyocytes$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Cardiomyosites",times=length(GO_enrichlist$Cardiomyocytes$`GO Molecular Function`$Hyper_Adjp_BH)))
GobioPnmc<-data.frame(annot=GO_enrichlist$Pneumocytes$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Pneumocytes$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Pneumocytes$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Pneumocytes",times=length(GO_enrichlist$Pneumocytes$`GO Molecular Function`$Hyper_Adjp_BH)))
GobioMFb<-data.frame(annot=GO_enrichlist$Myofibroblasts$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Myofibroblasts$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Myofibroblasts$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Myofibroblast",times=length(GO_enrichlist$Myofibroblasts$`GO Molecular Function`$Hyper_Adjp_BH)))
GobioBcls<-data.frame(annot=GO_enrichlist$B_cells$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$B_cells$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$B_cells$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("B cells",times=length(GO_enrichlist$B_cells$`GO Molecular Function`$Hyper_Adjp_BH)))
Gobioendo<-data.frame(annot=GO_enrichlist$Endothelial_cells$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Endothelial_cells$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Endothelial_cells$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Endothelial_cells",times=length(GO_enrichlist$Cardiomyocytes$`GO Molecular Function`$Hyper_Adjp_BH)))
GobioSW<-data.frame(annot=GO_enrichlist$Schwann_cells$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Schwann_cells$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Schwann_cells$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Swann_cells",times=length(GO_enrichlist$Schwann_cells$`GO Molecular Function`$Hyper_Adjp_BH)))
Gobioent<-data.frame(annot=GO_enrichlist$Enterocytes$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Enterocytes$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Enterocytes$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Enterocytes",times=length(GO_enrichlist$Enterocytes$`GO Molecular Function`$Hyper_Adjp_BH)))
Gobigob<-data.frame(annot=GO_enrichlist$Goblet_cells$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Goblet_cells$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Goblet_cells$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Goblet cells",times=length(GO_enrichlist$Goblet_cells$`GO Molecular Function`$Hyper_Adjp_BH)))
Gobifib<-data.frame(annot=GO_enrichlist$Fibroblasts$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Fibroblasts$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Fibroblasts$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Fibroblasts",times=length(GO_enrichlist$Fibroblasts$`GO Molecular Function`$Hyper_Adjp_BH)))
GobiHep<-data.frame(annot=GO_enrichlist$Hepatocytes$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Hepatocytes$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Hepatocytes$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Hepatocytes",times=length(GO_enrichlist$Hepatocytes$`GO Molecular Function`$Hyper_Adjp_BH)))
GobiMAC<-data.frame(annot=GO_enrichlist$Macrophages$`GO Molecular Function`$name,Hyper_Adjp_BH=GO_enrichlist$Macrophages$`GO Molecular Function`$Hyper_Adjp_BH,Hyper_Fold_Enrichment=GO_enrichlist$Macrophages$`GO Molecular Function`$Hyper_Fold_Enrichment,Celltype=rep("Macrophages",times=length(GO_enrichlist$Hepatocytes$`GO Molecular Function`$Hyper_Adjp_BH)))

Gobio<-rbind(head(GobioPCM,n=5),head(GobiHep,n=5),head(GobioMFb,n=5),head(GobioPnmc,n=5),head(Gobioendo,n=5),head(GobioSW,n=5),head(GobioBcls,n=5),head(GobiMAC,n=5),head(Gobioent,n=5),head(Gobigob,n=5),head(Gobifib,n=5))
write.table(Gobio,file="Conserved_DA_sites_go_mol_func.txt",quote = F,sep="\t",col.names = T)

  col.low = "brown1"
  col.mid = "floralwhite"
  col.high = "dodgerblue"
  
Gobio$Celltype<-factor(Gobio$Celltype, levels = c("Swann_cells","Enterocytes","Goblet cells","B cells","Macrophages","Endothelial_cells","Fibroblasts", "Myofibroblast", "Cardiomyosites","Pneumocytes","Hepatocytes"))
  colorPal <- grDevices::colorRampPalette(c(col.low, col.mid, col.high))
p2 <- ggplot(data = Gobio, mapping = aes_string(x = 'Celltype', y = 'annot')) +
    geom_point(mapping = aes_string(size = 'Hyper_Fold_Enrichment', color = 'Hyper_Adjp_BH')) +
    scale_colour_gradientn(colors=colorPal(10)) +
    theme_classic() +
    theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))






```


Validation in a human lung dataset

```{r}



all_data<- read.table(
  file = "/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSE161381_lung_snATAC.UMAP.cluster_labels.txt.gz",
  header = TRUE,
  row.names = 1
)


counts_D122 <- read.table("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906342_D122.mtx.gz",skip = 2)
rows_D122 <- read.table("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906342_D122.regions.tsv.gz")
cols_D122<-read.table("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906342_D122.barcodes.tsv.gz")

resize<-StringToGRanges(rows_D122$V1,sep = c(":", "-"))
end(resize)<-end(resize)-1
start(resize)<-start(resize)+1

D122_H<-sparseMatrix(i=counts_D122[,2],j=counts_D122[,1],x=counts_D122[,3])
colnames(D122_H)<-cols_D122$V1
# I have to shrink ranges
row.names(D122_H)<-paste0("chr",GRangesToString(resize))


human_D122_atac_assay <- CreateChromatinAssay(
  counts = D122_H,
  sep = c(":", "-"),
  genome = "hg38",
  fragments = NULL,
)


human_D1221_atac <- CreateSeuratObject(
  counts = human_D122_atac_assay,
  assay = 'bins',
  project = 'ATAC',
  meta.data = all_data
)

saveRDS(human_D1221_atac,file="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906342_D122.seurat.rds")


human_D1221_atac <- RunTFIDF(human_D1221_atac)
human_D1221_atac <- FindTopFeatures(human_D1221_atac, min.cutoff = 'q50')
human_D1221_atac <- RunSVD(human_D1221_atac)
human_D1221_atac <- RunUMAP(object = human_D1221_atac, reduction = 'lsi', dims = 2:30)
DimPlot(object = human_D1221_atac, label = TRUE,group.by = "cluster_name") + NoLegend()

saveRDS(human_D1221_atac,file="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906342_D122.seurat.rds")


counts_D175 <- read.table("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906343_D175.mtx.gz",skip = 2)
rows_D175 <- read.table("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906343_D175.regions.tsv.gz")
cols_D175<-read.table("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906343_D175.barcodes.tsv.gz")

resize<-StringToGRanges(rows_D175$V1,sep = c(":", "-"))
end(resize)<-end(resize)-1
start(resize)<-start(resize)+1

D175_H<-sparseMatrix(i=counts_D175[,2],j=counts_D175[,1],x=counts_D175[,3])
colnames(D175_H)<-cols_D175$V1
# I have to shrink ranges
row.names(D175_H)<-paste0("chr",GRangesToString(resize))

human_D175_atac_assay <- CreateChromatinAssay(
  counts = D175_H,
  sep = c(":", "-"),
  genome = "hg38",
  fragments = NULL,
)


human_D1751_atac <- CreateSeuratObject(
  counts = human_D175_atac_assay,
  assay = 'bins',
  project = 'ATAC',
  meta.data = all_data
)

saveRDS(human_D1751_atac,file="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906342_D175.seurat.rds")


human_D1751_atac <- RunTFIDF(human_D1751_atac)
human_D1751_atac <- FindTopFeatures(human_D1751_atac, min.cutoff = 'q50')
human_D1751_atac <- RunSVD(human_D1751_atac)
human_D1751_atac <- RunUMAP(object = human_D1751_atac, reduction = 'lsi', dims = 2:30)
DimPlot(object = human_D1751_atac, label = TRUE,group.by = "cluster_name") + NoLegend()

saveRDS(human_D1751_atac,file="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906342_D175.seurat.rds")


counts_D231 <- read.table("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906344_D231.mtx.gz",skip = 2)
rows_D231 <- read.table("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906344_D231.regions.tsv.gz")
cols_D231<-read.table("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906344_D231.barcodes.tsv.gz")

resize<-StringToGRanges(rows_D231$V1,sep = c(":", "-"))
end(resize)<-end(resize)-1
start(resize)<-start(resize)+1

D231_H<-sparseMatrix(i=counts_D231[,2],j=counts_D231[,1],x=counts_D231[,3])
colnames(D231_H)<-cols_D231$V1
# I have to shrink ranges
row.names(D231_H)<-paste0("chr",GRangesToString(resize))

human_D231_atac_assay <- CreateChromatinAssay(
  counts = D231_H,
  sep = c(":", "-"),
  genome = "hg38",
  fragments = NULL,
)


human_D2311_atac <- CreateSeuratObject(
  counts = human_D231_atac_assay,
  assay = 'bins',
  project = 'ATAC',
  meta.data = all_data
)

saveRDS(human_D2311_atac,file="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906342_D231.seurat.rds")


human_D2311_atac <- RunTFIDF(human_D2311_atac)
human_D2311_atac <- FindTopFeatures(human_D2311_atac, min.cutoff = 'q50')
human_D2311_atac <- RunSVD(human_D2311_atac)
human_D2311_atac <- RunUMAP(object = human_D2311_atac, reduction = 'lsi', dims = 2:30)
DimPlot(object = human_D2311_atac, label = TRUE,group.by = "cluster_name") + NoLegend()

saveRDS(human_D2311_atac,file="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/GSM4906342_D231.seurat.rds")

human_D2311_atac$dataset <- "D231"
human_D1221_atac$dataset <- "D122"
human_D1751_atac$dataset <- "D175"




combined <- merge(
  x = human_D2311_atac,
  y = list(human_D1221_atac, human_D1751_atac))


# process the combined dataset
combined <- FindTopFeatures(combined, min.cutoff = 10)
combined <- RunTFIDF(combined)
combined <- RunSVD(combined)
combined <- RunUMAP(combined, reduction = "lsi", dims = 2:30)
p1 <- DimPlot(combined, group.by = "dataset")


# find integration anchors
integration.anchors <- FindIntegrationAnchors(
  object.list = list(human_D2311_atac, human_D1221_atac,human_D1751_atac),
  anchor.features = rownames(human_D2311_atac),
  reduction = "rlsi",
  dims = 2:30
)

# integrate LSI embeddings
integrated <- IntegrateEmbeddings(
  anchorset = integration.anchors,
  reductions = combined[["lsi"]],
  new.reduction.name = "integrated_lsi",
  dims.to.integrate = 1:30
)

# create a new UMAP using the integrated embeddings
integrated <- RunUMAP(integrated, reduction = "integrated_lsi", dims = 2:30)
p2 <- DimPlot(integrated, group.by = "dataset")


# extract gene annotations from EnsDb
annotations_human <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86)

# change to UCSC style 
seqlevelsStyle(annotations_human) <- 'UCSC'
genome(annotations_human) <- "hg38"

# add the gene information to the object
Annotation(integrated)<- annotations_human

saveRDS(integrated,file="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/All.seurat.rds")

integrated<-readRDS("/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/All.seurat.rds")

integrated=subset(integrated,cells=colnames(integrated)[!is.na(integrated$cluster_name)])


DefaultAssay(integrated)<-"bins"


#add in hg38, which I regenerated

frags_add_fragments <- CreateFragmentObject(
  path = "/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/fragments_all_human.verify.frags.bed.final.final.srt.bed.hg38.srt.gz",
  cells = colnames(integrated), 
  validate.fragments = TRUE
)
 
Fragments(integrated)<-NULL
Fragments(integrated)<-frags_add_fragments



#add to validation hg19 assay

all_cre_hg19<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/ALL.bg.hg19.bed",header = F)
all_cre_hg19<-paste(all_cre_hg19$V1,all_cre_hg19$V2,all_cre_hg19$V3,sep = "-")
all_cre_hg19_gr<-reduce(StringToGRanges(all_cre_hg19,sep = c("-","-")))

fragment<-"/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/fragments_all_human.verify.frags.bed.final.final.srt.bed.hg19.gz"

fragments_hg19 <- CreateFragmentObject(
  path = fragment,cells = colnames(integrated)
)


cRE_peaks_human<- FeatureMatrix(
  fragments = fragments_hg19,
  features =  all_cre_hg19_gr,
  cells = rownames(integrated[[]])
)

integrated[["hg19_cre"]] <- CreateChromatinAssay(
  counts = cRE_peaks_human,
  sep = c(":", "-"),
  genome = "hg19",
  fragments = fragments_hg19
)

saveRDS(integrated,file="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/adult/All.seurat.rds")

DefaultAssay(integrated)<-"hg19_cre"

integrated <- FindTopFeatures(integrated, min.cutoff = 10)
integrated <- RunTFIDF(integrated)
integrated <- RunSVD(integrated)
integrated <- RunUMAP(integrated, reduction = "lsi", dims = 2:30)
p1 <- DimPlot(integrated, group.by = "cluster_name",label = T,pt.size = 1)


MO<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.m.Pneumocytes.hg19.bed")
HO<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.h.Pneumocytes.hg19.bed")
S<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Shared2celline.Pneumocytes.hg19.bed")

M_granges<-StringToGRanges(paste(MO$V1,MO$V2,MO$V3,sep = "-"))
H_granges<-StringToGRanges(paste(HO$V1,HO$V2,HO$V3,sep="-"))
I_granges<-StringToGRanges(paste(S$V1,S$V2,S$V3,sep="-"))

Mat_granges<- StringToGRanges(row.names(integrated))

MO_Ol<-row.names(integrated)[unique(subjectHits(findOverlaps(M_granges,subject = Mat_granges)))]
HO_Ol<-row.names(integrated)[unique(subjectHits(findOverlaps(H_granges,subject = Mat_granges)))]
I_Ol<-row.names(integrated)[unique(subjectHits(findOverlaps(I_granges,subject = Mat_granges)))]

have_reads_h<-integrated[["hg19_cre"]][[]][integrated[["hg19_cre"]][[]]$count>0,]

matched_m<-row.names(have_reads_h) %in% MO_Ol
matched_h<-row.names(have_reads_h) %in% HO_Ol
matched_i <- row.names(have_reads_h) %in% I_Ol


m_matched_df<- data.frame(mouse=matched_m,human=matched_h,int=matched_i)

library(BSgenome.Hsapiens.UCSC.hg19)
library(chromVAR)
library(motifmatchr)
library(Matrix)
library(SummarizedExperiment)

#getChromInfoFromUCSC("hg38")

have_reads_h<-have_reads_h[-which(seqnames(rowRanges) == "chr17")[1],]


rowRanges<-StringToGRanges(row.names(have_reads_h))

anno_m <- getAnnotations(annotations = m_matched_df, rowRanges = rowRanges)
#fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(integrated, assay = "peaks", slot = "counts")[GRangesToString(rowRanges),], rowRanges = rowRanges))
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(integrated, assay = "hg19_cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
#fragments_m <- addGCBias(fragments_m, genome = BSgenome.Mmusculus.UCSC.mm9)
fragments_m <- addGCBias(fragments_m, genome=BSgenome.Hsapiens.UCSC.hg19)

dev_m_i <- computeDeviations(object = fragments_m, annotations = anno_m)



chromvar.hz <- SummarizedExperiment::assays(dev_m_i)[[2]]
integrated[["Deviation_DA"]] <- CreateAssayObject(data = chromvar.hz)

DefaultAssay(integrated)<-"Deviation_DA"

Idents(integrated)<-integrated$cluster_name
p1c<-RidgePlot(integrated, features = row.names(integrated), ncol = 3)
p1<-FeaturePlot(integrated, features = "mouse",min.cutoff = 0,raster = F)
p2<-FeaturePlot(integrated, features = "human",min.cutoff = 0,raster = F)
p3<-FeaturePlot(integrated, features = "int",min.cutoff = 0,raster = F)
DimPlot(integrated,label=T)


```


#validation in mouse

```{r}
ML<-Read10X_h5("verify_peaks/Mouse/good_data/filtered_peak_bc_matrix.h5")
metadata <- read.csv(file = "verify_peaks/Mouse/good_data/singlecell.csv", header= TRUE, row.names = 1)
fragment.path <- './verify_peaks/Mouse/good_data/fragments.tsv.gz'



Mouse_ca <- CreateChromatinAssay(
  counts = ML,
  sep = c(":", "-"),
  genome = "mm10",
  fragments = fragment.path,
)

Mouse_ver_atac <- CreateSeuratObject(
  counts = Mouse_ca,
  assay = 'peaks',
  project = 'ATAC',
  meta.data = metadata
)

Mouse_ver_atac<-readRDS("verify_peaks/Mouse/prefilt_mouse_verify.rds")

#ct
AT1<-read.table("verify_peaks/Mouse/GSM4795059_AT1_scATAC_barcodes_CT.bed.gz")
AT1$annot<-rep("AT1",times=length(AT1$V2))
AT2<-read.table("verify_peaks/Mouse/GSM4795059_AT2_scATAC_barcodes_CT.bed.gz")
AT2$annot<-rep("AT2",times=length(AT2$V2))
Sox2<-read.table("verify_peaks/Mouse/GSM4795059_Sox2_scATAC_barcodes_CT.bed.gz")
Sox2$annot<-rep("Sox2",times=length(Sox2$V2))


#lineage
Mes<-read.table("verify_peaks/Mouse/GSM4795059_Mes_scATAC_barcodes_Lin.bed.gz")
Mes$lineage<-rep("Mes",times=length(Mes$V2))
Epi<-read.table("verify_peaks/Mouse/GSM4795059_Epi_scATAC_barcodes_Lin.bed.gz")
Epi$lineage<-rep("Epi",times=length(Epi$V2))
Imm<-read.table("verify_peaks/Mouse/GSM4795059_Imm_scATAC_barcodes_Lin.bed.gz")
Imm$lineage<-rep("Imm",times=length(Imm$V2))
Endo<-read.table("verify_peaks/Mouse/GSM4795059_Endo_scATAC_barcodes_Lin.bed.gz")
Endo$lineage<-rep("Endo",times=length(Endo$V2))


ct<-read.table("verify_peaks/Mouse/GSM4795059_7wk-scATAC_barcodes_allcelltypes.bed.gz")

ct<-ct[ct$V2!="A" & ct$V2!="B" & ct$V2!="C",]
row.names(ct)<-ct$V1
lineage<-rbind(Endo,Epi,Mes,Imm)
row.names(lineage)<-lineage$V1

Mouse_ver_atac<-AddMetaData(Mouse_ver_atac,lineage)
Mouse_ver_atac<-AddMetaData(Mouse_ver_atac,ct)

DimPlot(Mouse_ver_atac,label=T,group.by = "V2")+DimPlot(Mouse_ver_atac,label=T,group.by="lineage")



annot_sub<-annot[!duplicated(annot$V1),]
annot[annot$V1=="AAACGAAAGACCCATT-1",]
annot_sub<-annot[!duplicated(annot$V1),]
row.names(annot_sub)<-annot_sub$V1
Mouse_ver_atac<-AddMetaData(Mouse_ver_atac,annot_sub)

Idents(Mouse_ver_atac)<-Mouse_ver_atac$V2
DimPlot(Mouse_ver_atac,label=T)+DimPlot(Mouse_ver_atac,group.by = "seurat_clusters",label=T)
Mouse_ver_atac<-AddMetaData(Mouse_ver_atac,Sox2)
Mouse_ver_atac<-AddMetaData(Mouse_ver_atac,Endo)

DimPlot(Mouse_ver_atac,group.by = "Sox2")
DimPlot(Mouse_ver_atac,group.by = "Endo")


#clusters 1,0,12  B -> AT2
#clusters 7,6  A -> AT1
#clusters 4,14,21  C -> Sox2

#cluster 3 D->Plvap
#clsuter 20 E -> Car4
# cluster 11 B-lymphocytes
# cluster  17             T-lymphocytes
# cluster 19  Macrophages
# cluster 15 Mesothelial
# cluster 2 Pericytes
#cluster 13,5 'AVSM'
#cluster 9 Wnt5a
#cluster 8,16,10 18 Interstitial_Fib

M_subset<-subset(Mouse_ver_atac,cells=lineage$V1)

DimPlot(M_subset,label=T,group.by = "V2")+DimPlot(M_subset,label=T,group.by="lineage")
from<-c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23)
to<-c("AT2","AT2","Pericytes","Plvap","Sox2","AVSM","AT1","AT1","Interstitial_Fib","Wnt5","Interstitial_Fib","B-lymphocytes","AT2","AVSM","Sox2","Mesothelial","Interstitial_Fib","T-lymphocytes","Interstitial_Fib","Macrophage_Monocyte_Neutrophils","Car4","Sox2","Mesothelial")

M_subset$cell_type <- plyr::mapvalues(x = M_subset$seurat_clusters,from = from,to = to)

DimPlot(M_subset,label=T,group.by = "cell_type")+DimPlot(M_subset,label=T,group.by="lineage")

saveRDS(M_subset,"M_subset.rds")

MO<-read.table("/home/torkenczyk/LD/celltype_bedfiles/Uniq2celline.m.Pneumocytes.mm10.bed")
HO<-read.table("/home/torkenczyk/LD/celltype_bedfiles/Uniq2celline.h.Pneumocytes.mm10.bed")
S<-read.table("/home/torkenczyk/LD/celltype_bedfiles/Shared2celline.Pneumocytes.mm10.bed")

M_granges<-StringToGRanges(paste(MO$V1,MO$V2,MO$V3,sep = "-"))
H_granges<-StringToGRanges(paste(HO$V1,HO$V2,HO$V3,sep="-"))
I_granges<-StringToGRanges(paste(S$V1,S$V2,S$V3,sep="-"))

Mat_granges<-StringToGRanges(row.names(M_subset))

MO_Ol<-row.names(M_subset)[unique(subjectHits(findOverlaps(M_granges,subject = Mat_granges)))]
HO_Ol<-row.names(M_subset)[unique(subjectHits(findOverlaps(H_granges,subject = Mat_granges)))]
I_Ol<-row.names(M_subset)[unique(subjectHits(findOverlaps(I_granges,subject = Mat_granges)))]

have_reads_m<-M_subset[["peaks"]][[]][M_subset[["peaks"]][[]]$count>0,]

matched_m<-row.names(have_reads_m) %in% MO_Ol
matched_h<-row.names(have_reads_m) %in% HO_Ol
matched_i <- row.names(have_reads_m) %in% I_Ol


m_matched_df<- data.frame(mouse=matched_m,human=matched_h,int=matched_i)



library(BSgenome.Mmusculus.UCSC.mm10)
library(chromVAR)
library(motifmatchr)
library(Matrix)
library(SummarizedExperiment)



rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m <- getAnnotations(annotations = m_matched_df, rowRanges = rowRanges)
#fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(M_subset, assay = "peaks", slot = "counts")[GRangesToString(rowRanges),], rowRanges = rowRanges))
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(M_subset, assay = "peaks", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
#fragments_m <- addGCBias(fragments_m, genome = BSgenome.Mmusculus.UCSC.mm9)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Mmusculus.UCSC.mm10)
dev_m_i <- computeDeviations(object = fragments_m, annotations = anno_m)
chromvar.hz <- SummarizedExperiment::assays(dev_h_i)[[2]]
M_subset[["Deviation_DA"]] <- CreateAssayObject(data = chromvar.hz)

DefaultAssay(M_subset)<-"Deviation_DA"

Idents(M_subset)<-M_subset$cell_type
p1c<-RidgePlot(M_subset, features = row.names(M_subset), ncol = 3)
p1<-FeaturePlot(M_subset, features = "mouse",min.cutoff = 0,raster = F)
p2<-FeaturePlot(M_subset, features = "human",min.cutoff = 0,raster = F)
p3<-FeaturePlot(M_subset, features = "int",min.cutoff = 0,raster = F)


annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)

# change to UCSC style since the data was mapped to hg19
seqlevelsStyle(annotations) <- 'UCSC'
genome(annotations) <- "mm10"

# add the gene information to the object
Annotation(M_subset) <- annotations



saveRDS(M_subset,"M_subset.rds")


 frags_add_fragments <- CreateFragmentObject(
  path = "./verify_peaks/Mouse/good_data/fragments.tsv.gz",
  cells = colnames(M_subset), 
  validate.fragments = TRUE
)
 
 
 Fragments(M_subset)<-NULL
 Fragments(M_subset)<-frags_add_fragments
 
 cRE_peaks_mouse<- FeatureMatrix(
  fragments = Fragments(M_subset),
  features =  StringToGRanges(row.names(mouse_select_atac)),
  cells = rownames(M_subset[[]])
)

M_subset[["mm10"]] <- CreateChromatinAssay(
  counts = cRE_peaks_mouse,
  sep = c(":", "-"),
  genome = "mm10",
  fragments = Fragments(M_subset)
)



saveRDS(M_subset,"M_subset.rds")

M_subset<-readRDS("M_subset.rds")
 

```





#for figuring out the difficult cells
```{r}
human_all_atac<-readRDS("active_use_objects/All_human_tissues.rds")
#human_all_atac<-readRDS("active_use_objects/Select_human_tissues.rds")

mouse_select_atac<-readRDS("active_use_objects/All_mouse_tissues.rds")
#human_all_atac<-readRDS("oject_files/Human_plotting.rds")
Idents(human_all_atac)<-human_all_atac$handannot
human_all_atac$celltype[which(is.na(human_all_atac$celltype))]<-"unknown"


humanhand<-human_all_atac[["handannot"]]
row.names(humanhand)<-str_split_fixed(row.names(humanhand),pattern = "_",n = 2)[,2]
meta_all<-rbind(humanhand,mouse_select_atac[["handannot"]])

#testing human signal between remove subgroup and original


  # region can be a string, name of a gene, or GRanges object
FindRegion <- function(
  object,
  region,
  sep = c("-", "-"),
  assay = NULL,
  extend.upstream = 0,
  extend.downstream = 0
) {
  if (!is(object = region, class2 = "GRanges")) {
    # if separators are present in the string and we can convert the
    # start to a number, assume we're using genomic coordinates
    if (all(sapply(X = sep, FUN = grepl, x = region))) {
      region <- StringToGRanges(regions = region, sep = sep)
    } else {
      region <- LookupGeneCoords(object = object, assay = assay, gene = region)
      if (is.null(x = region)) {
        stop("Gene not found")
      }
    }
  }
  region <- suppressWarnings(expr = Extend(
    x = region,
    upstream = extend.upstream,
    downstream = extend.downstream
  )
  )
  return(region)
}




plot_rem_orig_comp<-function(gene,upstr=1000,downstr=1000,select_group=NULL,select_group2=NULL,plot_by1="handannot",plot_by2="celltype",highlight_human_reg=NULL){
  
  stopifnot(!is.null(select_group))
  
  coclustered_groups<-Idents(human_all_atac)
  human_groups<-human_all_atac$celltype
  
  
  g_cc<-WhichCells(human_all_atac,idents = select_group)
  g_r<-WhichCells(human_all_atac,idents = "remove")
  Idents(human_all_atac)<-human_groups
  g_o<-WhichCells(human_all_atac,idents = select_group2)
  g_original<-intersect(g_r,g_o)
  
  Idents(human_all_atac)<-coclustered_groups
  
  
  
  plot_subset_object<-subset(human_all_atac,cells = c(g_cc,g_original))
  #plot_subset_object<-subset(human_all_atac,idents = c(select_group))
  plot_subset_object$combined<-paste0(plot_subset_object[[plot_by2]][,1],"_",plot_subset_object[[plot_by1]][,1])
  levs<-levels(as.factor(plot_subset_object$combined))
  
  first<-plot_subset_object$combined[c(which(plot_subset_object[[plot_by2]][,1]==select_group),which(plot_subset_object[[plot_by1]][,1]==select_group),which(plot_subset_object[[plot_by1]][,1]=="remove"))]
  
  reord_levs<-unique(first)
  
  plot_subset_object$combined<-factor(plot_subset_object$combined,levels = reord_levs)
  
  cell_cnt<-as.data.frame(table(plot_subset_object$combined))
  names(cell_cnt)<-c("category","count")
  cell_cnt$category<-factor(cell_cnt$category,levels = rev(reord_levs))
  cell_cnt$percent<-cell_cnt$count/sum(cell_cnt$count)
  
  cell_cnt<-cell_cnt[which(cell_cnt$percent>0.01),]
  
  
  cell_cnt_p<-ggplot(cell_cnt,aes(y=category,x=count))+geom_bar(stat = "identity")+theme_classic()+ylab("")+xlab("number of cells")+theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
  
  
  
  all_plots=list()
  for (gene_human in gene)
  {
  gene_human<-toupper(gene_human)
  reg_h<-FindRegion(object = human_all_atac,region = gene_human,extend.downstream = downstr,extend.upstream = upstr,assay = "cre")

  print(paste0("plotting human", gene_human," human: ",reg_h))

 human<-CoveragePlot(
    object = plot_subset_object, 
    group.by="combined",region = gene_human,assay ="cre",
    extend.upstream = upstr,
    extend.downstream = downstr,annotation=F,peaks=F,region.highlight = highlight_human_reg,idents = cell_cnt$category
  )
  
  
  human2 <- TilePlot(
  object = plot_subset_object,assay ="cre",group.by="combined",idents = cell_cnt$category,
  region = reg_h,extend.upstream = upstr,
  extend.downstream = downstr
  )
  
  
  gene_plot <- AnnotationPlot(
  object = plot_subset_object,
  region = reg_h
)
  
  peak_plot <- PeakPlot(
  object = plot_subset_object,
  region = reg_h
)
  
  
p<-CombineTracks(
  plotlist = list(human, peak_plot, gene_plot),
#  expression.plot =cell_cnt_p,
  heights = c(10, 1, 2),
  widths = c(9)
  )

 p2<-CombineTracks(
  plotlist = list(human2, peak_plot, gene_plot),
  expression.plot =cell_cnt_p,
  heights = c(10, 1, 2),
  widths = c(9, 3)
  ) 
  
    png(filename = paste0("./plots/",gene_human,"_remove_comparison.png"),width = 30,height=25,units = "cm",res=300)
    print(p)
    dev.off()
    
   png(filename = paste0("./plots/",gene_human,"_remove_comparison2.png"),width = 30,height=25,units = "cm",res=300)
    print(p2)
    dev.off()
    
    png(filename = paste0("./plots/",gene_human,"_remove_comparison_comb.png"),width = 50,height=25,units = "cm",res=300)
    print(p|p2)
    dev.off()
    
   all_plots[[gene_human]]<-p | p2
  
  }
    return(all_plots)
  
}


#cardiomyocytes


#Cardiomyocyte
carlist<-plot_rem_orig_comp(gene = c("MYH6","MYH7","SGCA"),select_group ="Cardiomyocytes",select_group2 ="Cardiomyocytes" )
#hepatocytes
heplist<-plot_rem_orig_comp(gene = c("AFP","CRP"),select_group="Hepatocytes",select_group2 ="Hepatocytes")
#Myofibroblast
Mfib<-plot_rem_orig_comp(gene = c("MYH11","CARMN"),select_group="Myofibroblasts",select_group2 ="Myofibroblasts")
#Schwann cells
Schwann<-plot_rem_orig_comp(gene = c("PLP1","SOX10","S100B", "EGR2", "MBP", "MPZ"),select_group="Schwann cells",select_group2 = "Schwann cells")
#Fibroblast
fib<-plot_rem_orig_comp(gene = c("SERPINH1", "NID1"),select_group="Fibroblasts",select_group2 ="Fibroblasts")
#Bcells
Bcells<-plot_rem_orig_comp(gene = c("STK17B", "ITGA4", "IL12A"),select_group="B-lymphocytes",select_group2 = "B lymphocytes")
#Pneumocytes
PN<-plot_rem_orig_comp(gene = c("IRX2","SFTPB", "WNT3A", "ESRP1","SACS"),select_group="Pneumocytes",select_group2 = "Type II pneumocytes")


#Goblet cells
GB<-plot_rem_orig_comp(gene = c("MUC2"),select_group="Goblet cells",select_group2 = "Goblet cells")
#endothelial
END<-plot_rem_orig_comp(gene = c("SHANK3","ENG","ESRP1","CPA6"),select_group="Endothelial cells",select_group2 = "Endothelial cells")
#enterocytes
ENT<-plot_rem_orig_comp(gene = c("CDX2","GPA33","CORO2A","ATP6V0D1"),select_group="Enterocytes",select_group2 = "Enterocytes")
#macrophage
MAC<-plot_rem_orig_comp(gene = c("IKZF1","SLC11A1"),select_group="Macrophages",select_group2="Macrophages")


plot_combined_cross_species(gene="IRX2")



#what us dufferebt about these

integrated_H_M<-readRDS("Final_integration_all_bins_CCA.rds")
integrated_H_M<-AddMetaData(integrated_H_M,metadata = meta_all)


#doin DE on the LSI emberddings
a<-t(Embeddings(integrated_H_M,reduction = "integrated_dr" ))
integrated_H_M[['LSI']]<-
  CreateAssayObject(
  counts=a
)

Idents(integrated_H_M)<-integrated_H_M$handannot
DefaultAssay(integrated_H_M)<-'LSI'
all<-FindAllMarkers(integrated_H_M,test.use = 'LR',
)

all[which(all$cluster=="remove" & all$avg_log2FC>0),]

#LSI 2 is cardiomyosites
FeaturePlot(integrated_H_M, features = "integrateddr-61",min.cutoff = 0,raster = F)

VlnPlot(integrated_H_M, features = "integrateddr-58")
VlnPlot(integrated_H_M, features = "integrateddr-61")
VlnPlot(integrated_H_M, features = "integrateddr-44")

n <- 10
peaks_select<-Load_tissue[Load_tissue$LSI_2 > quantile(Load_tissue$LSI_2,prob=1-n/100),]
ggplot(data=Load_tissue,aes(x=Load_tissue$LSI_2))+geom_histogram()+geom_vline(xintercept = quantile(Load_tissue$LSI_2,prob=1-n/100))+theme_classic()+ylab(label="Counts")+xlab(label="LSI-2 loadings score")
top_10_lsi2<-StringToGRanges(row.names(peaks_select))



a<-t(Embeddings(human_all_atac,reduction = "lsi" ))

human_all_atac[['LSI']]<-
  CreateAssayObject(
  counts=a
)
DefaultAssay(human_all_atac)<-'LSI'
hall<-FindAllMarkers(human_all_atac,test.use = 'LR')

hall[which(hall$cluster=="remove" & hall$avg_log2FC>0),]

VlnPlot(human_all_atac, features = "LSI-45")
VlnPlot(human_all_atac, features = "LSI-24")
VlnPlot(human_all_atac, features = "LSI-38")

FeaturePlot(human_all_atac, features = "LSI-45",min.cutoff = 0,max.cutoff = 5,raster = F)
FeaturePlot(human_all_atac, features = "LSI-24",min.cutoff = 0,max.cutoff = 5,raster = F)
FeaturePlot(human_all_atac, features = "LSI-38",min.cutoff = 0,max.cutoff = 5,raster = F)

g_r<-WhichCells(human_all_atac,idents = "remove")

hr<-table(human_all_atac[[]][human_all_atac[[]]$handannot=="remove",]$celltype)
mr<-table(mouse_select_atac[[]][mouse_select_atac[[]]$handannot=="remove",]$cell_label)

hr<-as.data.frame(hr)
ph<-ggplot(hr,aes(y=Freq,x=Var1))+geom_bar(stat = "identity")+theme_classic()+ylab(label="Frequency")+xlab(label="")+ggtitle("Remove cells human")+coord_flip()
mr<-as.data.frame(mr)
pm<-ggplot(mr,aes(y=Freq,x=Var1))+geom_bar(stat = "identity")+theme_classic()+ylab(label="Frequency")+xlab(label="")+ggtitle("Remove cells mouse")+coord_flip()


ph+pm


#lets look at DA between remove and non remove cells

cats<-unique(Idents(human_all_atac))



remove_m_list<-list()
for (i in levels(as.factor(mouse_select_atac$cell_label)))
{
  print(i)
  Idents(mouse_select_atac)<-mouse_select_atac$cell_label
  g_c<-WhichCells(mouse_select_atac,idents = i)
  
  plot_subset_object<-subset(mouse_select_atac,cells = g_c)
  
  
  Idents(plot_subset_object)<-plot_subset_object$handannot
  
  print(table(Idents(plot_subset_object)))
  if(sum(Idents(plot_subset_object)=="remove")>10 & sum(Idents(plot_subset_object)=="remove")/length(Idents(plot_subset_object))>0.1 & sum(Idents(plot_subset_object)=="remove")/length(Idents(plot_subset_object))<0.9)
  {
 remove_m_list[[i]] <- FindMarkers(
  object = plot_subset_object,ident.1 = "remove",only.pos = T,assay = "cre",
  test.use = 'LR',
  min.pct = 0,
  latent.vars = 'nCount_cre',
  )
  }
}



da_peaks_human <- FindAllMarkers(
  object = human_all_atac,
  test.use = 'LR',
  min.pct = 0,
  latent.vars = 'nCount_creprun'
)

  
  
remove_h_list<-list()
for (i in levels(as.factor(human_all_atac$celltype)))
{
  print(i)
  Idents(human_all_atac)<-human_all_atac$celltype
  g_c<-WhichCells(human_all_atac,idents = i)
  
  plot_subset_object<-subset(human_all_atac,cells = g_c)
  
  
  Idents(plot_subset_object)<-plot_subset_object$handannot
  
  print(table(Idents(plot_subset_object)))
  if(sum(Idents(plot_subset_object)=="remove")>10 & sum(Idents(plot_subset_object)=="remove")/length(Idents(plot_subset_object))>0.1 & sum(Idents(plot_subset_object)=="remove")/length(Idents(plot_subset_object))<0.9)
  {
 remove_h_list[[i]] <- FindMarkers(
  object = plot_subset_object,ident.1 = "remove",only.pos = T,assay = "cre",
  test.use = 'LR',
  min.pct = 0,
  latent.vars = 'nCount_cre',
  )
  }
}


remove_m_list$`B cells`


library(reshape2)
a<-as.data.frame(table(data.frame(human_all_atac$handannot,human_all_atac$ID1)))
b<-acast(a, human_all_atac.handannot~human_all_atac.ID1, value.var="Freq")
Heatmap(b)

VlnPlot(human_all_atac,features = "Num_fragments",group.by = "Cell.Type")
FeaturePlot(human_all_atac,features = "Num_fragments")

DimPlot(human_all_atac,group.by = "Abbreviation",label=T)





human_all_atac <- FindTopFeatures(human_all_atac, min.cutoff = 1000)
human_all_atac <- RunSVD(human_all_atac,n = 100)
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 2:30)
p1000dc<-DepthCor(human_all_atac)
p1000<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")

p1000high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")


#128169 variable features (using this)
human_all_atac <- FindTopFeatures(human_all_atac, min.cutoff = 1500)
human_all_atac <- RunSVD(human_all_atac,n = 100)
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 2:30)
p1500dc<-DepthCor(human_all_atac)
p1500<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")
p1500high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")

#test number of LSI

p1500high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")



human_all_atac <- FindTopFeatures(human_all_atac, min.cutoff = 2000)
human_all_atac <- RunSVD(human_all_atac,n = 100)
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 2:30)
p2000dc<-DepthCor(human_all_atac)
p2000<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")
p2000high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")



human_all_atac <- FindTopFeatures(human_all_atac, min.cutoff = 2500)
human_all_atac <- RunSVD(human_all_atac,n = 100)
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 2:30)
p2500dc<-DepthCor(human_all_atac)
p2500<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")
p2500high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")

human_all_atac <- FindTopFeatures(human_all_atac, min.cutoff = 3000)
human_all_atac <- RunSVD(human_all_atac,n = 100)
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 2:30)
p3000dc<-DepthCor(human_all_atac)
p3000<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")
p3000high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")

human_all_atac <- FindTopFeatures(human_all_atac, min.cutoff = 4000)
human_all_atac <- RunSVD(human_all_atac,n = 100)
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 2:30)
p4000dc<-DepthCor(human_all_atac)
p4000<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")
p4000high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")


human_all_atac <- FindTopFeatures(human_all_atac, min.cutoff = 5000)
human_all_atac <- RunSVD(human_all_atac,n = 100)
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 2:30)
p5000dc<-DepthCor(human_all_atac)
p5000<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")
p5000high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")



wrap_plots(Pallhigh,nrow = 2,ncol = 3)
Pallhigh<-list(p1500high,p2000high,p2500high,p3000high,p4000high,p5000high)

Palldch<-list(p1500dc,p2000dc,p2500dc,p3000dc,p4000dc,p5000dc)
wrap_plots(Palldch,nrow = 2,ncol = 3)



#TSS enrichment and depth coverage

VlnPlot(human_all_atac,features = "Num_fragments",group.by = 'Abbreviation',split.by = "remove",log = T)+geom_boxplot()
VlnPlot(human_all_atac,features = "nCount_peaks" ,group.by = 'Abbreviation',split.by = "remove",log = T)+geom_boxplot()

VlnPlot(human_all_atac,features = "nFeature_peaks" ,group.by = 'Abbreviation',split.by = "remove",log = T)+geom_boxplot()

VlnPlot(human_all_atac,features = "TSSe" ,group.by = 'Abbreviation',split.by = "remove",log = F)+geom_boxplot()
VlnPlot(human_all_atac,features = "Fraction_Mito" ,group.by = 'Abbreviation',split.by = "remove",log = F)+geom_boxplot()

VlnPlot(human_all_atac,features = "Doublet_score" ,group.by = 'Abbreviation',split.by = "remove",log = F)+geom_boxplot()

# compute nucleosome signal score per cell
human_all_atac <- NucleosomeSignal(object = human_all_atac)

# compute TSS enrichment score per cell
human_all_atac <- TSSEnrichment(object = human_all_atac, fast = FALSE)





human_all_atac[[]]

VlnPlot(human_all_atac,group.by = 'Abbreviation')

human_all_atac$remove<-human_all_atac$handannot=="remove"

human_all_atac$frac_reads_in_cre<-colSums(GetAssayData(human_all_atac, assay = "cre", slot = "counts"))/human_all_atac$Num_fragments
VlnPlot(human_all_atac,features = "frac_reads_in_cre" ,group.by = 'Abbreviation',split.by = "remove",log = F)+geom_boxplot()




TSSecorr<-function (object, assay = NULL, reduction = "lsi", n = 10, ...) 
{
    if(is.null(assay)){assay<-DefaultAssay(object = object)}
    
    dr <- object[[reduction]]
    embed <- Embeddings(object = dr)
    counts <- object[["TSSe"]]
    naloc<-which(!is.na(human_all_atac[["TSSe"]]))
    embed <- embed[rownames(x = counts), ]
    if(is.null(n)){n<-ncol(x = embed)}
    embed <- embed[, seq_len(length.out = n)]
    depth.cor <- as.data.frame(cor(x = embed[naloc,], y = counts[naloc,], ...))
    depth.cor$counts <- depth.cor[, 1]
    depth.cor$Component <- seq_len(length.out = nrow(x = depth.cor))
    p <- ggplot(depth.cor, aes(Component, counts)) + geom_point() + 
        scale_x_continuous(n.breaks = n, limits = c(1, n)) + 
        ylab("Correlation") + ylim(c(-1, 1)) + theme_light() + 
        ggtitle("Correlation between TTSe and reduced dimension components", 
            subtitle = paste0("Assay: ", assay, "\t", "Reduction: ", 
                reduction))
    return(p)
}
TSSecorr(human_all_atac)
#aggregate tiles 

#play with LSI components
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 2:30)
p230<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")+ggtitle("comp 2:30")
p230high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")+ggtitle("comp 2:30")

#play with LSI components
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 4:30)
p430<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")+ggtitle("comp 4:30")
p430high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")+ggtitle("comp 4:30")

#play with LSI components
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 8:30)
p830<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")+ggtitle("comp 8:30")
p830high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")+ggtitle("comp 8:30")

#play with LSI components
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 8:100)
p8100<-DimPlot(human_all_atac,group.by = "Abbreviation",label=T,raster = F)+ theme(legend.position = "none")+ggtitle("comp 8:100")
p8100high<-DimPlot(human_all_atac,group.by = "handannot",label=T,cells.highlight = WhichCells(human_all_atac,idents = "remove"),raster = F,sizes.highlight = 0.1)+ theme(legend.position = "none")+ggtitle("comp 8:100")

#aggregate tiles 
AggregateTiles(human_all_atac)

```


#looking at Pneumocyte peaks
```{r}
saveRDS(human_all_atac,file = "active_use_objects/Select_human_tissues.rds")
human_all_atac<-readRDS("active_use_objects/Select_human_tissues.rds")
#human_all_atac<-readRDS("active_use_objects/Select_human_tissues.rds")

mouse_select_atac<-readRDS("active_use_objects/Select_mouse_tissues.rds")
#human_all_atac<-readRDS("oject_files/Human_plotting.rds")
Idents(human_all_atac)<-human_all_atac$handannot
human_all_atac$celltype[which(is.na(human_all_atac$celltype))]<-"unknown"

load("active_use_objects/for_rahul/Shared.bw.species.DA.RData")

PNo<-shared_DA$Pneumocytes
PNo$query_region<-PNo$feature_hg38_universal


PN<-ClosestFeature(shared_DA$Pneumocytes$feature_hg38_universal,object = human_all_atac)
PN

PNFIN<-merge(PN,PNo,by="query_region")

PNFIN[order(PNFIN$rankavg_categorization),]


#PN
p1<-plot_combined_cross_species(gene = "IRX2",highlight_human_reg = StringToGRanges("chr5-2750357-2750857"))



#chr5:2745845-2751662
#chr5:2735845-2761662



human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="IRX2",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="IRX2",21]))
#IRX2 YESS
#a =StringToGRanges(c("chr5-2750357-2750857","chr5-2751014-2751514","chr5-2751533-2752033"))
p2<-plot_combined_cross_species(gene = "IRX2",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,upstr = 10000,downstr = 10000,validate = T)

human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="EHD2",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="EHD2",21]))
#EHD2 
#a =StringToGRanges(c("chr19-47729387-47729887","chr19-47730031-47730531"))
p2<-plot_combined_cross_species(gene = "EHD2",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate=T,upstr = 10000,downstr = 10000)



human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="SCNN1A",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="SCNN1A",21]))
#SCNN1A 
a =StringToGRanges(c("chr12-6372684-6373184","chr12-6377618-6378118"))
p2<-plot_combined_cross_species(gene = "SCNN1A",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

#SCNN1B
human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="SCNN1B",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="SCNN1B",21]))
#a =StringToGRanges(c("chr16-23302035-23302535","chr16-23317054-23317554","chr16-23362490-23362990"))
p2<-plot_combined_cross_species(gene = "SCNN1B",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

#WNT7A Maybe
human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="WNT7A",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="WNT7A",21]))
#a =StringToGRanges(c("chr3-13850166-13850666","chr3-13879742-13880242","chr3-13880500-13881000"))
p2<-plot_combined_cross_species(gene = "WNT7A",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

#NKX2-1 YESS
human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="NKX2-1",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="NKX2-1",21]))
#a =StringToGRanges(c("chr14-36518843-36519343","chr14-36519624-36520124"))
p2<-plot_combined_cross_species(gene = "NKX2-1",highlight_human_reg=human_h,highlight_mouse_reg=mouse_h,upstr = 10000,downstr = 10000,validate = T)

#CLDN18 Yes
human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="CLDN18",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="CLDN18",21]))
#a =StringToGRanges(c("chr3-138009346-138009846","chr3-138009858-138010358","chr3-138038691-138039191","chr3-138039369-138039869","chr3-138011661-138012161","chr3-138012455-138012955"))
p2<-plot_combined_cross_species(gene = "CLDN18",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

#NDST1 maybe
human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="NDST1",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="NDST1",21]))
#a =StringToGRanges(c("chr5-150503333-150503833","chr5-150503838-150504338"))
p2<-plot_combined_cross_species(gene = "NDST1",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

#TACSTD2  PRETTY good
human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="TACSTD2",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="TACSTD2",21]))
#a =StringToGRanges(c("chr1-58576174-58576674","chr1-58577154-58577654","chr1-58573692-58574192","chr1-58572623-58573123","chr1-58573692-58574192"))
p2<-plot_combined_cross_species(gene = "TACSTD2",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

#SHH
human_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="SHH",1]))
mouse_h=StringToGRanges(unique(PNFIN[PNFIN$gene_name=="SHH",21]))
#a =StringToGRanges(c("chr7-155803857-155804357"))
p2<-plot_combined_cross_species(gene = "SHH",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)


#human only


load("active_use_objects/for_rahul/Mouse_only.bw.species.DA.RData")

PNh<-human_DA$Pneumocytes
PNh$query_region<-PNh$feature_hg38_universal


PN<-ClosestFeature(human_DA$Pneumocytes$feature_hg38_universal,object = human_all_atac)
PN

PNFIN2<-merge(PN,PNh,by="query_region")

PNFIN2[order(PNFIN2$rank.human_categorization,decreasing = F),]

CNDP2 

#ADGRV1 
human_h=StringToGRanges(unique(PNFIN2[PNFIN2$gene_name=="ADGRV1",1]))
mouse_h=StringToGRanges(unique(PNFIN2[PNFIN2$gene_name=="ADGRV1",21]))
p2<-plot_combined_cross_species(gene = "ADGRV1",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

#CCNJL
human_h=StringToGRanges(unique(PNFIN2[PNFIN2$gene_name=="CCNJL",1]))
mouse_h=StringToGRanges(unique(PNFIN2[PNFIN2$gene_name=="CCNJL",21]))
p2<-plot_combined_cross_species(gene = "CCNJL",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)


#mouse only

PMO<-mouse_DA$Pneumocytes
PMO$query_region<-PMO$feature_hg38_universal


PN<-ClosestFeature(mouse_DA$Pneumocytes$feature_hg38_universal,object = human_all_atac)
PN

PNMIN<-merge(PN,PMO,by="query_region")

PNMIN[order(PNMIN$rank.mouse_categorization),]


human_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="AKAP5",1]))
mouse_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="AKAP5",21]))
#SCNN1A 
p2<-plot_combined_cross_species(gene = "SCNN1A",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

human_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="EHD2",1]))
mouse_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="EHD2",21]))
#EHD2
p2<-plot_combined_cross_species(gene = "EHD2",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

human_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="POC1A",1]))
mouse_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="POC1A",21]))
#EHD2
p2<-plot_combined_cross_species(gene = "POC1A",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

human_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="ABCA4",1]))
mouse_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="ABCA4",21]))
#ABCA4
p2<-plot_combined_cross_species(gene = "ABCA4",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

human_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="ARHGEF2",1]))
mouse_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="ARHGEF2",21]))
#ARHGEF2
p2<-plot_combined_cross_species(gene = "ARHGEF2",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

human_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="ARHGAP31",1]))
mouse_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name=="ARHGAP31",21]))
#ARHGEF2
p2<-plot_combined_cross_species(gene = "ARHGAP31",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

genes<-head(unique(PNMIN[order(PNMIN$rank.mouse_categorization),3]),n=50)[-grep(head(unique(PNMIN[order(PNMIN$rank.mouse_categorization),3]),n=50),pattern = "\\.",perl = T)]
genes<-genes[-grep(genes,pattern = "orf")]

for (gene in genes[36:38])
{
print(gene)
human_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name==gene,1]))
mouse_h=StringToGRanges(unique(PNMIN[PNMIN$gene_name==gene,21]))
#all
p2<-plot_combined_cross_species(gene = gene,highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)  
}

load("active_use_objects/for_rahul/Human_only.bw.species.DA.RData")

PHO<-human_DA$Pneumocytes
PHO$query_region<-PHO$feature_hg38_universal


PN<-ClosestFeature(human_DA$Pneumocytes$feature_hg38_universal,object = human_all_atac)
PN

PHMIN<-merge(PN,PHO,by="query_region")

cat<-PHMIN[order(PHMIN$rank.human_categorization),]
genes2<-head(unique(cat$gene_name),n=50)[-grep(head(unique(cat$gene_name),n=50),pattern = "\\.",perl = T)]
#genes2<-genes2[-grep(genes2,pattern = "orf")]

gene="CCNJL"
print(gene)
human_h=StringToGRanges(unique(PHMIN[PHMIN$gene_name==gene,1]))
mouse_h=StringToGRanges(unique(PHMIN[PHMIN$gene_name==gene,21]))
p2<-plot_combined_cross_species(gene = gene,highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)

for (gene in genes2[2:3])
{
print(gene)
human_h=StringToGRanges(unique(PHMIN[PHMIN$gene_name==gene,1]))
mouse_h=StringToGRanges(unique(PHMIN[PHMIN$gene_name==gene,21]))
#all
p2<-plot_combined_cross_species(gene = gene,highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)  
}

#plot_combined_cross_species(gene = "ADGRV1",gene_mouse = "Gpr98",highlight_human_reg=human_h,highlight_mouse_reg = mouse_h,validate = T,upstr = 10000,downstr = 10000)  

Gpr98

table(PNFIN$type)
table(PHMIN$type)


```

Relative accessibility analysis mouse only
```{r}
#RELATIVE accessibility analysis

load("active_use_objects/for_rahul/Human_only.bw.species.DA.RData")

redo_h<-mouse_DA$Pneumocytes$feature_hg38_universal
redo_m<-mouse_DA$Pneumocytes$mm9_lifted_mm10peak_mouse

good_peaks<-gsub(pattern = "-1$",replacement = "",gsub(pattern = "\\.",replacement = "-",intersect(intersect(hg38_use,hg38_use2),hg38_use3),perl = T),perl = T)
redo_h<-mouse_DA$Pneumocytes$feature_hg38_universal[match(good_peaks,mouse_DA$Pneumocytes$feature_hg38_universal)]
redo_m<-mouse_DA$Pneumocytes$mm9_lifted_mm10peak_mouse[match(good_peaks,mouse_DA$Pneumocytes$feature_hg38_universal)]



#C<-GetAssayData(human_all_atac,slot = "counts",assay = "cre")[unique(shared_DA$Pneumocytes$feature_hg38_universal),]
C<-GetAssayData(human_all_atac,slot = "counts",assay = "cre")[redo_h,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(human_all_atac$handannot)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(human_all_atac$nFeature_cre),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`human_all_atac$nFeature_cre`))/log10(median_nfeature_category$`human_all_atac$nFeature_cre`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

library(ComplexHeatmap)
test_h<-as.matrix(Cagg2)

rownames_of_interest<-c(unique(PNMIN[PNMIN$gene_name=="TXNDC2",1]),unique(PNMIN[PNMIN$gene_name=="AKAP5",1]),unique(PNMIN[PNMIN$gene_name=="SCNN1A",1]),unique(PNMIN[PNMIN$gene_name=="SPOCK2",1]),unique(PNMIN[PNMIN$gene_name=="HES1",1]))
matched<-match(rownames_of_interest,gsub(row.names(test_h),pattern = "\\.",replacement = "-",perl=T))
ha_moh = rowAnnotation(foo = anno_mark(at = c(matched), labels = c(rep("TXNDC2",times=2),rep("AKAP5",times=2),rep("SCNN1A",times=1),rep("SPOCK2",times=7),rep("HES1",times=2))))


H_1<-Heatmap(test_h,show_column_names = T,show_row_names = F,cluster_rows = T)
pdf("Human_orig_PN_MO.pdf")
H_1
dev.off()

hg38_use<-row.names(na.omit(test_h))


#same for mouse relative accessibility hg38
#C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "cre")[unique(shared_DA$Pneumocytes$feature_hg38_universal),]

C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "cre")[redo_h,]


C<-as.matrix((C > 0) + 0)
groups<-as.factor(mouse_select_atac$handannot)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})


#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(mouse_select_atac$nFeature_cre),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`mouse_select_atac$nFeature_cre`))/log10(median_nfeature_category$`mouse_select_atac$nFeature_cre`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))
test_m<-t(as.matrix(Cagg2)) 

hg38_use2<-row.names(na.omit(test_m))

#mouse
H_2<-Heatmap(test_m,show_column_names = T,show_row_names = F,show_heatmap_legend = F)#,right_annotation = ha_moh)
pdf("Mouse_orig_PN_MO_hg38.pdf")
H_2
dev.off()

hg38_use2<-row.names(na.omit(test_m))


#mouse mm10

#C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "mm10")[unique(shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse),]
C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "mm10")[redo_m,]
C<-as.matrix((C > 0) + 0)
groups<-as.factor(mouse_select_atac$handannot)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(mouse_select_atac$nFeature_mm10),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`mouse_select_atac$nFeature_mm10`))/log10(median_nfeature_category$`mouse_select_atac$nFeature_mm10`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))
test_m2<-t(as.matrix(Cagg2)) 

#mouse
H_3<-Heatmap(test_m2,show_column_names = T,show_row_names = F,show_heatmap_legend = F)
pdf("Mouse_orig_PN_SH_mm10.pdf")
H_3
dev.off()



#now validation sets human first

cRE_peaks_human2<- FeatureMatrix(
  fragments = Fragments(integrated),
  #features =  StringToGRanges(unique(shared_DA$Pneumocytes$feature_hg38_universal),sep = c("-","-")),
    features =  StringToGRanges(redo_h,sep = c("-","-")),
  cells = rownames(integrated[[]])
)

 
C<-as.matrix(cRE_peaks_human2)
C<-as.matrix((C > 0) + 0)
groups<-as.factor(integrated$cluster_name)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})


#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(integrated$nFeature_cre),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`integrated$nFeature_cre`))/log10(median_nfeature_category$`integrated$nFeature_cre`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))
test_hv<-t(as.matrix(Cagg2)) 


hg38_use3<-row.names(na.omit(test_hv))

#human val
H_4<-Heatmap(test_hv,show_column_names = T,show_row_names = F,show_heatmap_legend = F)#,right_annotation = ha_moh)
pdf("Human_val_PN_SH_hg38.pdf")
H_4
dev.off()

#mouse validation mm10

cRE_peaks_mouse<- FeatureMatrix(
  fragments = Fragments(M_subset),
 # features =  StringToGRanges(unique(shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse),sep = c("-","-")),
 features =  StringToGRanges(redo_m,sep = c("-","-")),
  cells = rownames(M_subset[[]])
)

 
C<-as.matrix(cRE_peaks_mouse)
C<-as.matrix((C > 0) + 0)
groups<-as.factor(M_subset$cell_type)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(M_subset$nFeature_mm10),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`M_subset$nFeature_mm10`))/log10(median_nfeature_category$`M_subset$nFeature_mm10`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))

test_mv<-t(as.matrix(Cagg2)) 

#human val
H_5<-Heatmap(test_mv,show_column_names = T,show_row_names = F,show_heatmap_legend = F)#,right_annotation = ha_moh)

pdf("Human_Mouse_orig_PN_MO_hg38.pdf")
H_1+H_2
dev.off()

pdf("Human_Human_orig_val_PN_MO_hg38.pdf")
H_1+H_4
dev.off()

pdf("Mouse_Mouse_orig_val_PN_MO_mm10.pdf")
H_3+H_5
dev.off()
```

#shared 
```{r}
#now shared

load("active_use_objects/for_rahul/Shared.bw.species.DA.RData")

pass<-intersect(intersect(hg38_use,hg38_use2),hg38_use3)

redo_h<-shared_DA$Pneumocytes$feature_hg38_universal[match(pass,shared_DA$Pneumocytes$feature_hg38_universal)]
redo_m<-shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse[match(pass,shared_DA$Pneumocytes$feature_hg38_universal)]



C<-GetAssayData(human_all_atac,slot = "counts",assay = "cre")[unique(shared_DA$Pneumocytes$feature_hg38_universal),]
#C<-GetAssayData(human_all_atac,slot = "counts",assay = "cre")[redo_h,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(human_all_atac$handannot)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(human_all_atac$nFeature_cre),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`human_all_atac$nFeature_cre`))/log10(median_nfeature_category$`human_all_atac$nFeature_cre`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

library(ComplexHeatmap)
test_h<-as.matrix(Cagg2)

rownames_of_interest<-c(unique(PNFIN[PNFIN$gene_name=="NKX2-1",1]),unique(PNFIN[PNFIN$gene_name=="IRX2",1]),unique(PNFIN[PNFIN$gene_name=="TACSTD2",1]),unique(PNFIN[PNFIN$gene_name=="CLDN18",1]),unique(PNFIN[PNFIN$gene_name=="SHH",1]))
matched<-match(rownames_of_interest,gsub(row.names(test_h),pattern = "\\.",replacement = "-",perl=T))
ha_moh = rowAnnotation(foo = anno_mark(at = c(matched), labels = c(rep("NKX2-1",times=2),rep("IRX2",times=3),rep("TACSTD2",times=4),rep("CLDN18",times=6),rep("SHH",times=1))))


H_1<-Heatmap(test_h,show_column_names = T,show_row_names = F,cluster_rows = T)
pdf("Human_orig_PN_SH.pdf")
H_1
dev.off()

hg38_use<-row.names(test_h)


#same for mouse relative accessibility hg38
C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "cre")[unique(shared_DA$Pneumocytes$feature_hg38_universal),]

#C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "cre")[redo_h,]


C<-as.matrix((C > 0) + 0)
groups<-as.factor(mouse_select_atac$handannot)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})


#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(mouse_select_atac$nFeature_cre),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`mouse_select_atac$nFeature_cre`))/log10(median_nfeature_category$`mouse_select_atac$nFeature_cre`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))
test_m<-t(as.matrix(Cagg2)) 

#mouse
H_2<-Heatmap(test_m,show_column_names = T,show_row_names = F,show_heatmap_legend = F)#,right_annotation = ha_moh)
pdf("Mouse_orig_PN_SH_hg38.pdf")
H_2
dev.off()

hg38_use2<-row.names(na.omit(test_m))


#mouse mm10

C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "mm10")[unique(shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse),]
#C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "mm10")[redo_m,]
C<-as.matrix((C > 0) + 0)
groups<-as.factor(mouse_select_atac$handannot)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(mouse_select_atac$nFeature_mm10),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`mouse_select_atac$nFeature_mm10`))/log10(median_nfeature_category$`mouse_select_atac$nFeature_mm10`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))
test_m2<-t(as.matrix(Cagg2)) 

#mouse
H_3<-Heatmap(test_m2,show_column_names = T,show_row_names = F,show_heatmap_legend = F)
pdf("Mouse_orig_PN_SH_mm10.pdf")
H_3
dev.off()


#redo_h<-unique(shared_DA$Pneumocytes$feature_hg38_universal)
#now validation sets human first

cRE_peaks_human2<- FeatureMatrix(
  fragments = Fragments(integrated),
  #features =  StringToGRanges(unique(shared_DA$Pneumocytes$feature_hg38_universal),sep = c("-","-")),
    features =  StringToGRanges(redo_h,sep = c("-","-")),
  cells = rownames(integrated[[]])
)

 
C<-as.matrix(cRE_peaks_human2)
C<-as.matrix((C > 0) + 0)
groups<-as.factor(integrated$cluster_name)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})


#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(integrated$nFeature_cre),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`integrated$nFeature_cre`))/log10(median_nfeature_category$`integrated$nFeature_cre`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))
test_hv<-t(as.matrix(Cagg2)) 


#hg38_use3<-row.names(na.omit(test_hv))

#human val
H_4<-Heatmap(test_hv,show_column_names = T,show_row_names = F,show_heatmap_legend = F)#,right_annotation = ha_moh)
pdf("Human_val_PN_SH_hg38.pdf")
H_4
dev.off()

#mouse validation mm10
redo_m<-unique(shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse)
cRE_peaks_mouse<- FeatureMatrix(
  fragments = Fragments(M_subset),
 # features =  StringToGRanges(unique(shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse),sep = c("-","-")),
 features =  StringToGRanges(redo_m,sep = c("-","-")),
  cells = rownames(M_subset[[]])
)

 
C<-as.matrix(cRE_peaks_mouse)
C<-as.matrix((C > 0) + 0)
groups<-as.factor(M_subset$cell_type)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(M_subset$nFeature_mm10),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`M_subset$nFeature_mm10`))/log10(median_nfeature_category$`M_subset$nFeature_mm10`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))

test_mv<-t(as.matrix(Cagg2)) 


#mouse val
H_5<-Heatmap(test_mv,show_column_names = T,show_row_names = F,show_heatmap_legend = F,right_annotation = ha_moh)
pdf("Mouse_val_PN_sh_mm10.pdf")
H_5
dev.off()



pdf("Human_Mouse_orig_PN_SH_hg38.pdf")
H_1+H_2
dev.off()

pdf("Human_Human_orig_val_PN_SH_hg38.pdf")
H_1+H_4
dev.off()

pdf("Mouse_Mouse_orig_val_PN_SH_mm10.pdf")
H_3+H_5
dev.off()


pdf("All_SH_comp.pdf")
H_1+H_3+H_4+H_5
dev.off()
```

#this is to select top 200 sites
```{r}
#do the validation top 200 shared 200 human only and 100
master_ls_of_master_ls<-list()
for (m in (c("shared","human","mouse")))
{
if(m=="shared")
{
redo_h<-unique(shared_DA$Pneumocytes$feature_hg38_universal)  
redo_m<-unique(shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse)
}else if (m=="human")
{
redo_h<-unique(human_DA$Pneumocytes$feature_hg38_universal)  
redo_m<-unique(human_DA$Pneumocytes$mm9_lifted_mm10peak_mouse)
}else if (m=="mouse")
{
redo_h<-unique(mouse_DA$Pneumocytes$feature_hg38_universal)  
redo_m<-unique(mouse_DA$Pneumocytes$mm9_lifted_mm10peak_mouse)
}

print(m)
  
cRE_peaks_human_query<- FeatureMatrix(
  fragments = Fragments(integrated),
  #features =  StringToGRanges(unique(shared_DA$Pneumocytes$feature_hg38_universal),sep = c("-","-")),
    features =  StringToGRanges(redo_h,sep = c("-","-")),
  cells = rownames(integrated[[]])
)

  
# from here need to make seurat object and then call DA
chrom_assay <- CreateChromatinAssay(
  counts = cRE_peaks_human_query,
  sep = c(":", "-"),
  genome = 'hg38',
  fragments = Fragments(integrated),
  min.cells = 0,
  min.features = 0
)
groups<-integrated[["cluster_name"]]

human_val_conserved <- CreateSeuratObject(
  counts = chrom_assay,
  assay = "peaks",
  meta.data = groups
)

human_val_conserved <- RunTFIDF(human_val_conserved)
human_val_conserved <- FindTopFeatures(human_val_conserved, min.cutoff = 'q0')
human_val_conserved <- RunSVD(human_val_conserved)

Idents(human_val_conserved)<-human_val_conserved$cluster_name
da_peaks_h_val <- FindMarkers(
  object = human_val_conserved,logfc.threshold = 0,
  ident.1 = c("alveolar_type_1","alveolar_type_2"),
  min.pct = 0,only.pos = F,
  test.use = 'LR',
  latent.vars = 'nCount_peaks'
)


cRE_peaks_mouse<- FeatureMatrix(
  fragments = Fragments(M_subset),
 # features =  StringToGRanges(unique(shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse),sep = c("-","-")),
 features =  StringToGRanges(redo_m,sep = c("-","-")),
  cells = rownames(M_subset[[]])
)

chrom_assay <- CreateChromatinAssay(
  counts = cRE_peaks_mouse,
  sep = c(":", "-"),
  genome = 'mm9',
  fragments = Fragments(M_subset),
  min.cells = 0,
  min.features = 0
)

groups<-M_subset[["cell_type"]]

mouse_val_conserved <- CreateSeuratObject(
  counts = chrom_assay,
  assay = "peaks",
  meta.data = groups
)

Idents(mouse_val_conserved)<-mouse_val_conserved$cell_type
da_peaks_m_val <- FindMarkers(
  object = mouse_val_conserved,logfc.threshold = 0,
  ident.1 = c("AT1","AT2"),
  min.pct = 0,only.pos = F,
  test.use = 'LR',
  latent.vars = 'nCount_peaks'
)

ml=data.frame(ho=shared_DA$Pneumocytes$feature_hg38_universal,mo=shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse,ho_logf=shared_DA$Pneumocytes$logFC.hg38_human,mo_logf=shared_DA$Pneumocytes$logFC.mm9_mouse)

if(m=="shared")
{
ml=data.frame(ho=shared_DA$Pneumocytes$feature_hg38_universal,mo=shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse,ho_logf=shared_DA$Pneumocytes$logFC.hg38_human,mo_logf=shared_DA$Pneumocytes$logFC.mm9_mouse) 

}else if (m=="human")
{
ml=data.frame(ho=human_DA$Pneumocytes$feature_hg38_universal,mo=human_DA$Pneumocytes$mm9_lifted_mm10peak_mouse,ho_logf=human_DA$Pneumocytes$logFC.hg38_human,mo_logf=human_DA$Pneumocytes$logFC.mm9_mouse) 
}else if (m=="mouse")
{
ml=data.frame(ho=mouse_DA$Pneumocytes$feature_hg38_universal,mo=mouse_DA$Pneumocytes$mm9_lifted_mm10peak_mouse,ho_logf=mouse_DA$Pneumocytes$logFC.hg38_human,mo_logf=mouse_DA$Pneumocytes$logFC.mm9_mouse) 
}

mlh=merge(x=ml,y=da_peaks_h_val,by.x="ho",by.y="row.names",all.x=T)
mlhm=merge(x=mlh,y=da_peaks_m_val,by.x="mo",by.y="row.names",suffixes=c("human",".mouse"),all.x=T)

mlhm<-mlhm[with(mlhm, order(avg_log2FC.mouse,decreasing = T)),]
mlhm$rank.mouse_val<-c(1:length(mlhm$mo_logf))
mlhm<-mlhm[with(mlhm, order(avg_log2FChuman,decreasing = T)),]
mlhm$rank.human_val<-c(1:length(mlhm$mo_logf))
mlhm$rank_avg<-(mlhm$rank.mouse_val+mlhm$rank.human_val)/2
mlhm$rank_diff<-mlhm$rank.mouse_val-mlhm$rank.human_val

annot_hm<-ClosestFeature(human_all_atac,regions = mlhm$ho)[,c(2,7)]
mlhm<-merge(mlhm,annot_hm,by.x="ho",by.y="query_region",all.x=T)

mlhm<-mlhm[with(mlhm, order(rank_avg)),]
master_ls_of_master_ls[[m]]<-mlhm
}

select_shared<-master_ls_of_master_ls$shared


#master_ls_of_master_ls<-list()
#master_ls_of_master_ls[["human"]]<-aggregate_groups_1000_ls_human$human_o
#master_ls_of_master_ls[["mouse"]]<-aggregate_groups_1000_ls_mouse$human_o
#master_ls_of_master_ls[["shared"]]<-aggregate_groups_1000_ls_shared$human_o

for (i in names(master_ls_of_master_ls)) {
print(i)
hg38_A549_a="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/GSM3137776_ENCFF631HEX_signal_of_unique_reads_GRCh38.bigWig"
hg38_A549_b="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/GSM3137777_ENCFF103COS_signal_of_unique_reads_GRCh38.bigWig"
hg38_A549_c="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/GSM3137778_ENCFF957GCK_signal_of_unique_reads_GRCh38.bigWig"

region_value<-function(x){median(rtracklayer::import(con = bigwig,which = StringToGRanges(x),as = "NumericList")[[1]])}
vregvalue<-Vectorize(region_value,"x")


int_ist<-master_ls_of_master_ls[[i]]$ho 
#int_ist<-row.names(master_ls_of_master_ls[[i]])
int_ist<-unique(GRangesToString(sort(StringToGRanges(int_ist))))
bigwig=hg38_A549_a
A549_a<-vregvalue(int_ist)
bigwig=hg38_A549_b
A549_b<-vregvalue(int_ist)
bigwig=hg38_A549_c
A549_c<-vregvalue(int_ist)
A549_ac<-as.matrix(data.frame(A549_a=A549_a,A549_b=A549_b,A549_c=A549_c))
print("got here")

#test<-data.frame(master_ls_of_master_ls[[i]])
#test$ho<-gsub(pattern = "\\.",replacement = "-",row.names(test))
#a<-str_split_fixed(string = test$ho,pattern = "-",n = 4)
#test$ho<-paste(a[,1],a[,2],a[,3],sep = "-")


#master_ls_of_master_ls[[i]]<-merge(test,A549_ac,by.x="ho",by.y="row.names",all.x=T)
master_ls_of_master_ls[[i]]<-merge(master_ls_of_master_ls[[i]],A549_ac,by.x="ho",by.y="row.names",all.x=T)
}


master_ls_of_master_ls$shared<-master_ls_of_master_ls$shared[with(master_ls_of_master_ls$shared, order(rank_avg,decreasing = F)),]
master_ls_of_master_ls$human<-master_ls_of_master_ls$human[with(master_ls_of_master_ls$human, order(rank_diff,decreasing = T)),]
master_ls_of_master_ls$mouse<-master_ls_of_master_ls$mouse[with(master_ls_of_master_ls$mouse, order(rank_diff,decreasing = F)),]


save(master_ls_of_master_ls, file = "Ordered_top_pn_sites.RData")


all<-bind_rows(master_ls_of_master_ls, .id = "column_label")

A549_ac<-as.matrix(data.frame(A549_a=master_ls_of_master_ls$shared$A549_a.x,A549_b=master_ls_of_master_ls$shared$A549_b.x,A549_c=master_ls_of_master_ls$shared$A549_c.x))
H1<-Heatmap(test_h[master_ls_of_master_ls$shared$ho,],show_row_names = F,show_heatmap_legend = F,cluster_rows = F)
H2<-Heatmap(test_m2[master_ls_of_master_ls$shared$mo,],show_row_names = F,show_heatmap_legend = F)
H3<-Heatmap(test_mv[master_ls_of_master_ls$shared$mo,],show_row_names = F,show_heatmap_legend = F)
H4<-Heatmap(test_hv[master_ls_of_master_ls$shared$ho,],show_row_names = F,show_heatmap_legend = F)
H5<-Heatmap(A549_ac,show_row_names = F,show_heatmap_legend = T)

aggregate_groups_1000_ls_shared<-list()
aggregate_groups_1000_ls_shared$human_o<-test_h[master_ls_of_master_ls$shared$ho,]
aggregate_groups_1000_ls_shared$mouse_o<-test_m2[master_ls_of_master_ls$shared$mo,]
aggregate_groups_1000_ls_shared$human_v<-test_hv[master_ls_of_master_ls$shared$ho,]
aggregate_groups_1000_ls_shared$mouse_v<-test_mv[master_ls_of_master_ls$shared$mo,]

save(aggregate_groups_1000_ls_shared, file = "Top1k_pn_aggreagate_mat_shared.RData")

test_h<-aggregate_groups_1000_ls_shared$human_o
test_m2<-aggregate_groups_1000_ls_shared$mouse_o
test_mv<-aggregate_groups_1000_ls_shared$mouse_v
test_hv<-aggregate_groups_1000_ls_shared$human_v


H1+H2+H3+H4+H5
#human
row.names(test_h)<-gsub("\\.","-",row.names(test_h))
row.names(test_m2)<-gsub("\\.","-",row.names(test_m2))
row.names(test_mv)<-gsub("\\.","-",row.names(test_mv))
row.names(test_hv)<-gsub("\\.","-",row.names(test_hv))

A549_ac<-as.matrix(data.frame(A549_a=master_ls_of_master_ls$human$A549_a,A549_b=master_ls_of_master_ls$human$A549_b,A549_c=master_ls_of_master_ls$human$A549_c))
H1<-Heatmap(test_h[master_ls_of_master_ls$human$ho,],show_row_names = F,show_heatmap_legend = F,cluster_rows = F)
H2<-Heatmap(test_m2[master_ls_of_master_ls$human$mo,],show_row_names = F,show_heatmap_legend = F)
H3<-Heatmap(test_mv[master_ls_of_master_ls$human$mo,],show_row_names = F,show_heatmap_legend = F)
H4<-Heatmap(test_hv[master_ls_of_master_ls$human$ho,],show_row_names = F,show_heatmap_legend = F)
H5<-Heatmap(A549_ac,show_row_names = F,show_heatmap_legend = T)

H1+H2+H4+H3+H5

aggregate_groups_1000_ls_human<-list()
aggregate_groups_1000_ls_human$human_o<-test_h[master_ls_of_master_ls$human$ho,]
aggregate_groups_1000_ls_human$mouse_o<-test_m2[master_ls_of_master_ls$human$mo,]
aggregate_groups_1000_ls_human$human_v<-test_hv[master_ls_of_master_ls$human$ho,]
aggregate_groups_1000_ls_human$mouse_v<-test_mv[master_ls_of_master_ls$human$mo,]

save(aggregate_groups_1000_ls_human, file = "Top1k_pn_aggreagate_mat_human.RData")

test_h<-aggregate_groups_1000_ls_human$human_o
test_m2<-aggregate_groups_1000_ls_human$mouse_o
test_mv<-aggregate_groups_1000_ls_human$mouse_v
test_hv<-aggregate_groups_1000_ls_human$human_v

H1+H2+H3+H4+H5

#mouse
row.names(test_h)<-gsub("\\.","-",row.names(test_h))
row.names(test_m2)<-gsub("\\.","-",row.names(test_m2))
row.names(test_mv)<-gsub("\\.","-",row.names(test_mv))
row.names(test_hv)<-gsub("\\.","-",row.names(test_hv))

A549_ac<-as.matrix(data.frame(A549_a=master_ls_of_master_ls$mouse$A549_a,A549_b=master_ls_of_master_ls$mouse$A549_b,A549_c=master_ls_of_master_ls$mouse$A549_c))
H1<-Heatmap(test_h[master_ls_of_master_ls$mouse$ho,],show_row_names = F,show_heatmap_legend = F,cluster_rows = F)
H2<-Heatmap(test_m2[master_ls_of_master_ls$mouse$mo,],show_row_names = F,show_heatmap_legend = F)
H3<-Heatmap(test_mv[master_ls_of_master_ls$mouse$mo,],show_row_names = F,show_heatmap_legend = F)
H4<-Heatmap(test_hv[master_ls_of_master_ls$mouse$ho,],show_row_names = F,show_heatmap_legend = F)
H5<-Heatmap(A549_ac,show_row_names = F,show_heatmap_legend = T)

H1+H2+H4+H3+H5

aggregate_groups_1000_ls_mouse<-list()
aggregate_groups_1000_ls_mouse$human_o<-test_h[master_ls_of_master_ls$mouse$ho,]
aggregate_groups_1000_ls_mouse$mouse_o<-test_m2[master_ls_of_master_ls$mouse$mo,]
aggregate_groups_1000_ls_mouse$human_v<-test_hv[master_ls_of_master_ls$mouse$ho,]
aggregate_groups_1000_ls_mouse$mouse_v<-test_mv[master_ls_of_master_ls$mouse$mo,]

save(aggregate_groups_1000_ls_mouse, file = "Top1k_pn_aggreagate_mat_mouse.RData")


test_h<-aggregate_groups_1000_ls_mouse$human_o
test_m2<-aggregate_groups_1000_ls_mouse$mouse_o
test_mv<-aggregate_groups_1000_ls_mouse$mouse_v
test_hv<-aggregate_groups_1000_ls_mouse$human_v




A549_ac<-as.matrix(data.frame(A549_a=A549_a,A549_b=A549_b,A549_c=A549_c))

master_ls_of_master_ls$shared$A549_a<-master_ls_of_master_ls$shared$A549_a.x
master_ls_of_master_ls$shared$A549_b<-master_ls_of_master_ls$shared$A549_b.x
master_ls_of_master_ls$shared$A549_c<-master_ls_of_master_ls$shared$A549_c.x

all<-bind_rows(master_ls_of_master_ls, .id = "column_label")

P1<-ggplot(all,aes(x=column_label,y=log10(A549_a+1)))+geom_violin()+geom_boxplot()+theme_classic()+ylab("log10(median reads pear region A549 rep 1")+xlab("")
P2<-ggplot(all,aes(x=column_label,y=log10(A549_b+1)))+geom_violin()+geom_boxplot()+theme_classic()+ylab("log10(median reads pear region A549 rep 2")+xlab("")
P3<-ggplot(all,aes(x=column_label,y=log10(A549_c+1)))+geom_violin()+geom_boxplot()+theme_classic()+ylab("log10(median reads pear region A549 rep 3")+xlab("")

P1+P2+P3



H1_mat<-rbind(aggregate_groups_1000_ls_shared$human_o[1:200,],aggregate_groups_1000_ls_mouse$human_o[1:100,],aggregate_groups_1000_ls_human$human_o[1:200,])
H2_mat<-rbind(aggregate_groups_1000_ls_shared$mouse_o[1:200,],aggregate_groups_1000_ls_mouse$mouse_o[1:100,],aggregate_groups_1000_ls_human$mouse_o[1:200,])
H3_mat<-rbind(aggregate_groups_1000_ls_shared$human_v[1:200,],aggregate_groups_1000_ls_mouse$human_v[1:100,],aggregate_groups_1000_ls_human$human_v[1:200,])
H4_mat<-rbind(aggregate_groups_1000_ls_shared$mouse_v[1:200,],aggregate_groups_1000_ls_mouse$mouse_v[1:100,],aggregate_groups_1000_ls_human$mouse_v[1:200,])

A549_ac_s<-as.matrix(data.frame(A549_a=master_ls_of_master_ls$shared$A549_a[1:200],A549_b=master_ls_of_master_ls$shared$A549_b[1:200],A549_c=master_ls_of_master_ls$shared$A549_c[1:200]))
A549_ac_m<-as.matrix(data.frame(A549_a=master_ls_of_master_ls$mouse$A549_a[1:100],A549_b=master_ls_of_master_ls$mouse$A549_b[1:100],A549_c=master_ls_of_master_ls$mouse$A549_c[1:100]))
A549_ac_h<-as.matrix(data.frame(A549_a=master_ls_of_master_ls$human$A549_a[1:200],A549_b=master_ls_of_master_ls$human$A549_b[1:200],A549_c=master_ls_of_master_ls$human$A549_c[1:200]))

A549_ac<-rbind(A549_ac_s,A549_ac_m,A549_ac_h)

H1<-Heatmap(H1_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))
H2<-Heatmap(H2_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))
H3<-Heatmap(H3_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))
H4<-Heatmap(H4_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))


master_ls_of_master_ls$human$A549avg<-(master_ls_of_master_ls$human$A549_a+master_ls_of_master_ls$human$A549_b+master_ls_of_master_ls$human$A549_c)/3

master_ls_of_master_ls$share$A549avg<-(master_ls_of_master_ls$share$A549_a+master_ls_of_master_ls$share$A549_b+master_ls_of_master_ls$share$A549_c)/3

master_ls_of_master_ls$mouse$A549avg<-(master_ls_of_master_ls$mouse$A549_a+master_ls_of_master_ls$mouse$A549_b+master_ls_of_master_ls$mouse$A549_c)/3


A549_ac<-as.data.frame(A549_ac)

A549_ac$annot<-rep(c("Shared","Mouse","Human"),c(200,100,200))
A549_ac_long<-melt(A549_ac, id.vars=c("annot"))
p<-ggplot(A549_ac_long,aes(x=annot,y=value,fill=variable))+geom_violin()+geom_boxplot( alpha=0.2)+theme_classic()+geom_hline(aes(yintercept=250),linetype="dashed",color="red")+geom_hline(aes(yintercept=150),linetype="dashed",color="blue")+geom_hline(aes(yintercept=50),linetype="dashed",color="green")

table(A549_ac[A549_ac$A549_a>250 & A549_ac$A549_b>250 & A549_ac$A549_c>250,4])
table(A549_ac[A549_ac$A549_a>150 & A549_ac$A549_b>150 & A549_ac$A549_c>150,4])
table(A549_ac[A549_ac$A549_a>50 & A549_ac$A549_b>50 & A549_ac$A549_c>50,4])




library(circlize)
col_fun = colorRamp2(c(0, 200,4000 ), c("#9970ab", "#f7f7f7", "#1b7837"))
H5<-Heatmap(A549_ac,col = col_fun,show_row_names = F,show_heatmap_legend = T,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))
H1+H2+H4+H3+H5



gene_count=data.frame(freq=table(master_ls_of_master_ls$shared$gene_name),cat=rep("1000_sh",time=length(table(master_ls_of_master_ls$shared$gene_name))))
gene_count=rbind(gene_count,data.frame(freq=table(master_ls_of_master_ls$mouse$gene_name),cat=rep("1000_m",time=length(table(master_ls_of_master_ls$mouse$gene_name)))))
gene_count=rbind(gene_count,data.frame(freq=table(master_ls_of_master_ls$human$gene_name),cat=rep("1000_h",time=length(table(master_ls_of_master_ls$human$gene_name)))))
gene_count=rbind(gene_count,data.frame(freq=table(master_ls_of_master_ls$shared$gene_name[1:200]),cat=rep("200_sh",time=160)))
gene_count=rbind(gene_count,data.frame(freq=table(master_ls_of_master_ls$mouse$gene_name[1:100]),cat=rep("100_m",time=75)))
gene_count=rbind(gene_count,data.frame(freq=table(master_ls_of_master_ls$human$gene_name[1:200]),cat=rep("200_h",time=175)))

ggplot(gene_count,aes(y=freq.Freq,x=cat))+geom_violin()+theme_classic()


gene_count[["1000_h"]]=as.data.frame(table(master_ls_of_master_ls$human$gene_name))$Freq


gene_count[["200_sh"]]=as.data.frame(table(master_ls_of_master_ls$shared$gene_name))$Freq
gene_count[["100_m"]]=as.data.frame(table(master_ls_of_master_ls$mouse$gene_name))$Freq
gene_count[["200_h"]]=as.data.frame(table(master_ls_of_master_ls$human$gene_name))$Freq



master_ls_of_master_ls$human$A549avg<-(master_ls_of_master_ls$human$A549_a+master_ls_of_master_ls$human$A549_b+master_ls_of_master_ls$human$A549_c)/3

master_ls_of_master_ls$shared$A549avg<-(master_ls_of_master_ls$shared$A549_a+master_ls_of_master_ls$shared$A549_b+master_ls_of_master_ls$share$A549_c)/3

master_ls_of_master_ls$mouse$A549avg<-(master_ls_of_master_ls$mouse$A549_a+master_ls_of_master_ls$mouse$A549_b+master_ls_of_master_ls$mouse$A549_c)/3


#THIS Is final selection
#calculate distance

#with TSS approach
tss.positions_hg38 <- GetTSSPositions(ranges = Annotation(human_all_atac))
DefaultAssay(mouse_select_atac)<-"mm10"
#this is mm10 do not forget 
tss.positions_mouse <- GetTSSPositions(ranges = Annotation(mouse_select_atac))

shared_sites<-StringToGRanges(master_ls_of_master_ls$shared$ho)
human_sites<-StringToGRanges(master_ls_of_master_ls$human$ho)
mouse_sites<-StringToGRanges(master_ls_of_master_ls$mouse$mo)
mouse_sites_hg38<-StringToGRanges(master_ls_of_master_ls$mouse$ho)
 
shared_dist<-distanceToNearest(shared_sites,tss.positions_hg38)
shared_dist<-shared_dist@elementMetadata$distance
human_dist<-distanceToNearest(human_sites,tss.positions_hg38)  
human_dist<-human_dist@elementMetadata$distance
mouse_dist<-distanceToNearest(mouse_sites,tss.positions_mouse)  
mouse_dist<-mouse_dist@elementMetadata$distance
mouse_dist_h<-distanceToNearest(mouse_sites,tss.positions_hg38)  
mouse_dist_h<-mouse_dist_h@elementMetadata$distance



master_ls_of_master_ls$shared$distancetoTSS_h<-shared_dist
master_ls_of_master_ls$human$distancetoTSS_h<-human_dist
master_ls_of_master_ls$mouse$distancetoTSS_h<-mouse_dist_h
master_ls_of_master_ls$mouse$distancetoTSS_m<-mouse_dist

final_set_of_sites<-list()

#select 10 mouse sites that are accessible and 10 that are not as control

N_Control1<-master_ls_of_master_ls$mouse[master_ls_of_master_ls$mouse$A549avg<50,]
N_Control1<-N_Control1[1:10,]
N_Control2<-master_ls_of_master_ls$mouse[master_ls_of_master_ls$mouse$A549avg>50,]
N_Control2<-N_Control2[1:10,]
N_Control<-rbind(N_Control1,N_Control2)

table(N_Control$gene_name)
final_set_of_sites[["mouse"]]<-N_Control

#select 90 human sites 81 accessible 9 not
#multiple regions same site so going to pick 10 for not accessible 85 accessible

N_H1<-master_ls_of_master_ls$human[master_ls_of_master_ls$human$A549avg<50,]
N_H1<-N_H1[1:10,]
N_H2<-master_ls_of_master_ls$human[master_ls_of_master_ls$human$A549avg>50,]
N_H2<-N_H2[1:85,]
N_H<-rbind(N_H1,N_H2)

N_H[duplicated(N_H$ho),]


table(N_H$gene_name)[table(N_H$gene_name)>2]
#is the only one that says it has four regions but here it is 4 mouse to 1 human so it should be fine
final_set_of_sites[["human"]]<-N_H


#select 90 shared sites 82 accessible 9 not
#multiple regions same site so going to pick 9 for not accessible 82 accessible
#added in 5kb cutoff

N_S1A<-master_ls_of_master_ls$shared[master_ls_of_master_ls$shared$A549avg<50 & master_ls_of_master_ls$shared$distancetoTSS_h>5000,]
N_S1A<-N_S1A[1:4,]
N_S1B<-master_ls_of_master_ls$shared[master_ls_of_master_ls$shared$A549avg<50 & master_ls_of_master_ls$shared$distancetoTSS_h<5000,]
N_S1B<-N_S1B[1:5,]

N_S1<-rbind(N_S1A,N_S1B)

unique(sort(N_S1$ho))
table(N_S1$gene_name)


N_S2A<-master_ls_of_master_ls$shared[master_ls_of_master_ls$shared$A549avg>50 & master_ls_of_master_ls$shared$distancetoTSS_h>5000,]
N_S2A<-N_S2A[1:68,]
unique(sort(N_S2A$ho))
table(N_S2A$gene_name)
#mal2 has 3
#remove region that was least accessible 922
N_S2A[N_S2A$gene_name=="MAL2",]
N_S2A[!row.names(N_S2A)=="922",]
N_S2A<-N_S2A[!row.names(N_S2A)=="922",]
table(N_S2A$gene_name)[table(N_S2A$gene_name)>2]

N_S2B<-master_ls_of_master_ls$shared[master_ls_of_master_ls$shared$A549avg>50 & master_ls_of_master_ls$shared$distancetoTSS_h<5000,]
N_S2B<-N_S2B[1:16,]
unique(sort(N_S2B$ho))
table(N_S2B$gene_name)
N_S2<-rbind(N_S2A,N_S2B)


N_S<-rbind(N_S1,N_S2)

length(unique(sort(N_S$ho)))
table(N_S$gene_name)[table(N_S$gene_name)>2]
#mal2 has 3
#remove region that was least accessible 922
N_S[N_S$gene_name=="C1orf116",]
N_S[!row.names(N_S)=="37",]
N_S<-N_S[!row.names(N_S)=="37",]
length(unique(sort(N_S$ho)))
table(N_S$gene_name)[table(N_S$gene_name)>2]

final_set_of_sites[["shared_second_filter"]]<-N_S


save(final_set_of_sites,file = "./final_set_of_sites/Final_set_of_sites.RData")

save(master_ls_of_master_ls,file = "./final_set_of_sites/Final_set_all_sites_used_for_selection.RData")


m_dist<-data.frame(dist=final_set_of_sites$mouse$distancetoTSS_h,annot=rep("mouse",times=20))
h_dist<-data.frame(dist=final_set_of_sites$human$distancetoTSS_h,annot=rep("human",times=95))
s_dist<-data.frame(dist=final_set_of_sites$shared$distancetoTSS_h,annot=rep("shared",times=91))
s2_dist<-data.frame(dist=final_set_of_sites$shared_second_filter$distancetoTSS_h,annot=rep("shared2",times=91))

distances<-rbind(m_dist,h_dist,s_dist,s2_dist)



ggplot(data=distances,aes(x=annot,y=dist+1,fill=annot))+geom_violin()+geom_jitter()+theme_classic()+geom_hline(yintercept=5000,color="red",linetype = "dashed")+geom_hline(yintercept=2000,color="blue",linetype = "dashed")+scale_y_continuous(trans = log10_trans(),breaks = trans_breaks("log10", function(x) 10^x),labels = trans_format("log10", math_format(10^.x)))+ylab("log10(Distance from TSS+1")

#write out bed

shbed<-data.frame(chr=str_split_fixed(final_set_of_sites$shared$ho,"-",n=3)[,1],start=str_split_fixed(final_set_of_sites$shared$ho,"-",n=3)[,2],end=str_split_fixed(final_set_of_sites$shared$ho,"-",n=3)[,3])
write.table(shbed,file = paste0("./final_set_of_sites/Shared.select90.hg38.bed"),quote = F,sep = "\t",row.names = F,col.names = F)

shbed2<-data.frame(chr=str_split_fixed(final_set_of_sites$shared_second_filter$ho,"-",n=3)[,1],start=str_split_fixed(final_set_of_sites$shared_second_filter$ho,"-",n=3)[,2],end=str_split_fixed(final_set_of_sites$shared_second_filter$ho,"-",n=3)[,3])
write.table(shbed2,file = paste0("./final_set_of_sites/Shared_dist_corr.select90.hg38.bed"),quote = F,sep = "\t",row.names = F,col.names = F)

humanbed<-data.frame(chr=str_split_fixed(final_set_of_sites$human$ho,"-",n=3)[,1],start=str_split_fixed(final_set_of_sites$human$ho,"-",n=3)[,2],end=str_split_fixed(final_set_of_sites$human$ho,"-",n=3)[,3])
write.table(humanbed,file = paste0("./final_set_of_sites/Human.select90.hg38.bed"),quote = F,sep = "\t",row.names = F,col.names = F)

mousebed<-data.frame(chr=str_split_fixed(final_set_of_sites$mouse$ho,"-",n=3)[,1],start=str_split_fixed(final_set_of_sites$mouse$ho,"-",n=3)[,2],end=str_split_fixed(final_set_of_sites$mouse$ho,"-",n=3)[,3])
write.table(mousebed,file = paste0("./final_set_of_sites/Mouse.select90.hg38.bed"),quote = F,sep = "\t",row.names = F,col.names = F)

#make the heatmap with these


load("Top1k_pn_aggreagate_mat_mouse.RData")
load("Top1k_pn_aggreagate_mat_human.RData")
load("Top1k_pn_aggreagate_mat_shared.RData")

#shared
test_h_sh<-aggregate_groups_1000_ls_shared$human_o[final_set_of_sites$shared_second_filter$ho,]
test_m2_sh<-aggregate_groups_1000_ls_shared$mouse_o[final_set_of_sites$shared_second_filter$mo,]
test_mv_sh<-aggregate_groups_1000_ls_shared$mouse_v[final_set_of_sites$shared_second_filter$mo,]
test_hv_sh<-aggregate_groups_1000_ls_shared$human_v[final_set_of_sites$shared_second_filter$ho,]


A549_ac_sh<-data.frame(peak=master_ls_of_master_ls$shared$ho,A549_a=master_ls_of_master_ls$shared$A549_a,A549_b=master_ls_of_master_ls$shared$A549_b,A549_c=master_ls_of_master_ls$shared$A549_c)

A549_ac_sh<-A549_ac_sh[match(final_set_of_sites$shared_second_filter$ho,A549_ac_sh$peak),]
A549_ac_sh$peak<-NULL
A549_ac_sh<-as.matrix(A549_ac_sh)

H1<-Heatmap(test_h_sh,show_row_names = F,show_heatmap_legend = F,cluster_rows = F)
H2<-Heatmap(test_m2_sh,show_row_names = F,show_heatmap_legend = F)
H3<-Heatmap(test_mv_sh,show_row_names = F,show_heatmap_legend = F)
H4<-Heatmap(test_hv_sh,show_row_names = F,show_heatmap_legend = F)
H5<-Heatmap(A549_ac_sh,show_row_names = F,show_heatmap_legend = T)

H1+H2+H3+H4+H5

#human

test_h_h<-aggregate_groups_1000_ls_human$human_o[final_set_of_sites$human$ho,]
test_m2_h<-aggregate_groups_1000_ls_human$mouse_o[final_set_of_sites$human$mo,]
test_mv_h<-aggregate_groups_1000_ls_human$mouse_v[final_set_of_sites$human$mo,]
test_hv_h<-aggregate_groups_1000_ls_human$human_v[final_set_of_sites$human$ho,]


A549_ac_h<-data.frame(peak=master_ls_of_master_ls$human$ho,A549_a=master_ls_of_master_ls$human$A549_a,A549_b=master_ls_of_master_ls$human$A549_b,A549_c=master_ls_of_master_ls$human$A549_c)
A549_ac_h<-A549_ac_h[match(final_set_of_sites$human$ho,A549_ac_h$peak),]
A549_ac_h$peak<-NULL
A549_ac_h<-as.matrix(A549_ac_h)

H1<-Heatmap(test_h_h,show_row_names = F,show_heatmap_legend = F,cluster_rows = F)
H2<-Heatmap(test_m2_h,show_row_names = F,show_heatmap_legend = F)
H3<-Heatmap(test_mv_h,show_row_names = F,show_heatmap_legend = F)
H4<-Heatmap(test_hv_h,show_row_names = F,show_heatmap_legend = F)
H5<-Heatmap(A549_ac_h,show_row_names = F,show_heatmap_legend = T)
H1+H2+H3+H4+H5
#mouse

test_h_m<-aggregate_groups_1000_ls_mouse$human_o[final_set_of_sites$mouse$ho,]
test_m2_m<-aggregate_groups_1000_ls_mouse$mouse_o[final_set_of_sites$mouse$mo,]
test_mv_m<-aggregate_groups_1000_ls_mouse$mouse_v[final_set_of_sites$mouse$mo,]
test_hv_m<-aggregate_groups_1000_ls_mouse$human_v[final_set_of_sites$mouse$ho,]

#thought: we need to use human here since those are ones we are selecting for
A549_ac_m<-data.frame(peak=master_ls_of_master_ls$mouse$ho,A549_a=master_ls_of_master_ls$mouse$A549_a,A549_b=master_ls_of_master_ls$mouse$A549_b,A549_c=master_ls_of_master_ls$mouse$A549_c)
A549_ac_m<-A549_ac_m[match(final_set_of_sites$mouse$ho,A549_ac_m$peak),]
A549_ac_m$peak<-NULL
A549_ac_m<-as.matrix(A549_ac_m)

H1<-Heatmap(test_h_m,show_row_names = F,show_heatmap_legend = F,cluster_rows = F)
H2<-Heatmap(test_m2_m,show_row_names = F,show_heatmap_legend = F)
H3<-Heatmap(test_mv_m,show_row_names = F,show_heatmap_legend = F)
H4<-Heatmap(test_hv_m,show_row_names = F,show_heatmap_legend = F)
H5<-Heatmap(A549_ac_m,show_row_names = F,show_heatmap_legend = T)
H1+H2+H3+H4+H5

H1_mat<-rbind(test_h_sh,test_h_m,test_h_h)
H2_mat<-rbind(test_m2_sh,test_m2_m,test_m2_h)
H3_mat<-rbind(test_hv_sh,test_hv_m,test_hv_h)
H4_mat<-rbind(test_mv_sh,test_mv_m,test_mv_h)

A549_ac<-rbind(A549_ac_sh,A549_ac_m,A549_ac_h)

H1<-Heatmap(H1_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 90 sites","Mouse: 20 sites","Human 90 sites"), c(91,20,95)))
H2<-Heatmap(H2_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(91,20,95)))
H3<-Heatmap(H3_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(91,20,95)))
H4<-Heatmap(H4_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(91,20,95)))
col_fun = colorRamp2(c(0, 200,4000 ), c("#9970ab", "#f7f7f7", "#1b7837"))
H5<-Heatmap(A549_ac,col = col_fun,show_row_names = F,show_heatmap_legend = T,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(91,20,95)))
p<-H1+H2+H4+H3+H5

save(p,file="select_sites.rData")




#after designing guides
score.tbl = read.delim("./final_set_of_sites/Human.output.scored")
summary(score.tbl)

#after designing guides
score.tbl2 = read.delim("./final_set_of_sites/Mouse.output.scored")
summary(score.tbl2)

#write out gene annot

Annotation(human_all_atac)

ENSBL<-granges(Annotation(human_all_atac))

ENSBL<-Annotation(human_all_atac)

ENSBL1<-data.frame(chr=ENSBL@seqnames,start=start(ENSBL@ranges),end=end(ENSBL@ranges),gene_name=ENSBL@elementMetadata$gene_name)
ENSBL2<-data.frame(chr=ENSBL@seqnames,start=start(ENSBL@ranges),end=end(ENSBL@ranges),gene_name=ENSBL@elementMetadata$tx_id)

ENSBL1<-ENSBL1[!duplicated(ENSBL1),]
ENSBL2<-ENSBL2[!duplicated(ENSBL2),]

write.table(ENSBL1,file = paste0("./final_set_of_sites/ENSBL1.hg38.bed"),quote = F,sep = "\t",row.names = F,col.names = F)
write.table(ENSBL2,file = paste0("./final_set_of_sites/ENSBL2.hg38.bed"),quote = F,sep = "\t",row.names = F,col.names = F)



#after designing guides
score.tbl = read.delim("./final_set_of_sites/Human.fasta.sites.scored")
summary(score.tbl)

#after designing guides
score.tbl2 = read.delim("./final_set_of_sites/Mouse.fasta.sites.scored")
summary(score.tbl2)

#after designing guides
score.tbl3 = read.delim("./final_set_of_sites/Shared.fasta.sites.scored")
summary(score.tbl3)

Mouse<-score.tbl2[score.tbl2$Doench2014OnTarget>0.5,]


shared_score=data.frame(D_score=score.tbl3$Doench2014OnTarget,type=rep("shared",times=length(score.tbl3$Doench2014OnTarget)))
mouse_score=data.frame(D_score=score.tbl2$Doench2014OnTarget,type=rep("mouse",times=length(score.tbl2$Doench2014OnTarget)))
human_score=data.frame(D_score=score.tbl$Doench2014OnTarget,type=rep("human",times=length(score.tbl$Doench2014OnTarget)))

score_all<-rbind(Mouse_score,Human_score,Shared_score)

ggplot(score_all,aes(x=type,y=D_score))+geom_violin()+theme_bw()


#top 1000 guides

guides<-readRDS("/home/torkenczyk/H_M_chromatin_atlas/human_data/final_set_of_sites/1000guides_scored.RData")


hg38_A549_a="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/GSM3137776_ENCFF631HEX_signal_of_unique_reads_GRCh38.bigWig"
hg38_A549_b="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/GSM3137777_ENCFF103COS_signal_of_unique_reads_GRCh38.bigWig"
hg38_A549_c="/home/torkenczyk/H_M_chromatin_atlas/validation_sets/A459/GSM3137778_ENCFF957GCK_signal_of_unique_reads_GRCh38.bigWig"


library(foreach)
library(doParallel)
cl <- makeCluster(8)
registerDoParallel(cl)


for (species in levels(as.factor(guides$species))) {
guides_species<-guides[guides$species==species,] 
foreach(peak=levels(as.factor(guides_species$oldContig))) %dopar% {
guides_subset<-guides_species
print(species)
print(peak)
guides_subset$peak<-gsub(x=guides_subset$oldContig,pattern = ":",replacement = "-")
peak2<-gsub(x=peak,pattern = ":",replacement = "-")
select<-species
if(select=="Shared"){select="shared"}
if(select=="Human"){select="human"}
if(select=="Mouse"){select="mouse"}
g_dist<-data.frame(peak=master_ls_of_master_ls[[select]]$ho,dist=master_ls_of_master_ls[[select]]$distancetoTSS_h,gene=master_ls_of_master_ls[[select]]$gene_name)

guides_subset2<-merge(guides_subset,g_dist,by="peak",all.x = T)

#easy to add in filtering 
guides_subset<-guides_subset2[guides_subset2$peak==peak2,]
score_peaks<-StringToGRanges(paste(guides_subset$contig,guides_subset$start,guides_subset$stop,sep = "-"),sep = c("-","-"))
values(score_peaks) <- DataFrame(score = guides_subset$Doench2014OnTarget)

name<-guides_subset[guides_subset$peak==peak2,]


p1a<-CoveragePlot(
  object = mouse_select_atac,group.by = "handannot",
  region = peak2,
  annotation = F,
  peaks = F,extend.upstream = 500,extend.downstream = 500,region.highlight =score_peaks
)

p1b<-CoveragePlot(
  object = human_all_atac,group.by = "handannot",
  region = peak2,
  annotation = T,
  peaks = T,ranges =score_peaks,ranges.group.by="score",bigwig = list(hg38_A549_a,hg38_A549_b,hg38_A549_c),extend.upstream = 500,extend.downstream = 500,ranges.title = "scored guides",region.highlight =score_peaks
)

 plots<-wrap_plots(list(p1a,p1b), ncol = 1, heights = c(8,14))
    
png(filename = paste0("/home/torkenczyk/H_M_chromatin_atlas/human_data/guide_plots/",species,"_",unique(name$gene),"_",unique(name$dist),"_combined.yaxe_m_h.png"),width = 20,height=22,units = "cm",res=300)
print(plots)
dev.off()


}
}





PeakPlot(human_all_atac, region = "IRX2" ,peaks = Shared_score_peaks, group.by = score)



#This is an alternative 

master_ls_of_master_ls$shared<-master_ls_of_master_ls$shared[with(master_ls_of_master_ls$shared, order(A549avg,decreasing = T)),]
master_ls_of_master_ls$human<-master_ls_of_master_ls$human[with(master_ls_of_master_ls$human, order(A549avg,decreasing = T)),]
master_ls_of_master_ls$mouse<-master_ls_of_master_ls$mouse[with(master_ls_of_master_ls$mouse, order(A549avg,decreasing = F)),]




#This is an alternative
#what if we select for accessibility based on A549 first, discuss with rahul
master_ls_of_master_ls_sub<-list()
#took top 50% of human, mouse and shared after ordering on A549 and then ordered based on DA 
master_ls_of_master_ls_sub$shared<-master_ls_of_master_ls$shared[1:500,]
master_ls_of_master_ls_sub$human<-master_ls_of_master_ls$human[1:500,]
master_ls_of_master_ls_sub$mouse<-master_ls_of_master_ls$mouse[1:500,]
master_ls_of_master_ls_sub$shared<-master_ls_of_master_ls_sub$shared[with(master_ls_of_master_ls_sub$shared, order(rank_avg,decreasing = F)),]
master_ls_of_master_ls_sub$human<-master_ls_of_master_ls_sub$human[with(master_ls_of_master_ls_sub$human, order(rank_diff,decreasing = T)),]
master_ls_of_master_ls_sub$mouse<-master_ls_of_master_ls_sub$mouse[with(master_ls_of_master_ls_sub$mouse, order(rank_diff,decreasing = F)),]

#from here

H1_mat<-rbind(aggregate_groups_1000_ls_shared$human_o[master_ls_of_master_ls_sub$shared$ho[1:200],],aggregate_groups_1000_ls_mouse$human_o[master_ls_of_master_ls_sub$mouse$ho[1:100],],aggregate_groups_1000_ls_human$human_o[master_ls_of_master_ls_sub$human$ho[1:200],])

H2_mat<-rbind(aggregate_groups_1000_ls_shared$mouse_o[master_ls_of_master_ls_sub$shared$mo[1:200],],aggregate_groups_1000_ls_mouse$mouse_o[master_ls_of_master_ls_sub$mouse$mo[1:100],],aggregate_groups_1000_ls_human$mouse_o[master_ls_of_master_ls_sub$human$mo[1:200],])
H3_mat<-rbind(aggregate_groups_1000_ls_shared$human_v[master_ls_of_master_ls_sub$shared$ho[1:200],],aggregate_groups_1000_ls_mouse$human_v[master_ls_of_master_ls_sub$mouse$ho[1:100],],aggregate_groups_1000_ls_human$human_v[master_ls_of_master_ls_sub$human$ho[1:200],])
H4_mat<-rbind(aggregate_groups_1000_ls_shared$mouse_v[master_ls_of_master_ls_sub$shared$mo[1:200],],aggregate_groups_1000_ls_mouse$mouse_v[master_ls_of_master_ls_sub$mouse$mo[1:100],],aggregate_groups_1000_ls_human$mouse_v[master_ls_of_master_ls_sub$human$mo[1:200],])


H1<-Heatmap(H1_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))
H2<-Heatmap(H2_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))
H3<-Heatmap(H3_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))
H4<-Heatmap(H4_mat,show_row_names = F,show_heatmap_legend = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))

H1+H2+H3+H4


A549_ac_s<-as.matrix(data.frame(A549_a=master_ls_of_master_ls_sub$shared$A549_a[1:200],A549_b=master_ls_of_master_ls_sub$shared$A549_b[1:200],A549_c=master_ls_of_master_ls_sub$shared$A549_c[1:200]))
A549_ac_m<-as.matrix(data.frame(A549_a=master_ls_of_master_ls_sub$mouse$A549_a[1:100],A549_b=master_ls_of_master_ls_sub$mouse$A549_b[1:100],A549_c=master_ls_of_master_ls_sub$mouse$A549_c[1:100]))
A549_ac_h<-as.matrix(data.frame(A549_a=master_ls_of_master_ls_sub$human$A549_a[1:200],A549_b=master_ls_of_master_ls_sub$human$A549_b[1:200],A549_c=master_ls_of_master_ls_sub$human$A549_c[1:200]))

A549_ac<-rbind(A549_ac_s,A549_ac_m,A549_ac_h)


A549_ac<-as.data.frame(A549_ac)

A549_ac$annot<-rep(c("Shared","Mouse","Human"),c(200,100,200))
A549_ac_long<-melt(A549_ac, id.vars=c("annot"))
p<-ggplot(A549_ac_long,aes(x=annot,y=value,fill=variable))+geom_violin()+geom_boxplot( alpha=0.2)+theme_classic()+geom_hline(aes(yintercept=250),linetype="dashed",color="red")+geom_hline(aes(yintercept=150),linetype="dashed",color="blue")+geom_hline(aes(yintercept=50),linetype="dashed",color="green")


table(A549_ac[A549_ac$A549_a>250 & A549_ac$A549_b>250 & A549_ac$A549_c>250,4])
table(A549_ac[A549_ac$A549_a>150 & A549_ac$A549_b>150 & A549_ac$A549_c>150,4])
table(A549_ac[A549_ac$A549_a>50 & A549_ac$A549_b>50 & A549_ac$A549_c>50,4])




library(circlize)
col_fun = colorRamp2(c(0, 200,4000 ), c("#9970ab", "#f7f7f7", "#1b7837"))
H5<-Heatmap(A549_ac,col = col_fun,show_row_names = F,cluster_rows = F,row_split = rep(c("Shared: 200 sites","Mouse: 100 sites","Human 200 sites"), c(200,100,200)))
H1+H2+H4+H3+H5


```

Finally human only
```{r}
#RELATIVE accessibility analysis
library(dplyr)
library(plyr)
load("active_use_objects/for_rahul/Human_only.bw.species.DA.RData")

redo_h<-human_DA$Pneumocytes$feature_hg38_universal
redo_m<-human_DA$Pneumocytes$mm9_lifted_mm10peak_mouse

good_peaks<-gsub(pattern = "\\.",replacement = "-",hg38_use3,perl = T)
redo_h<-na.omit(human_DA$Pneumocytes$feature_hg38_universal[match(good_peaks,human_DA$Pneumocytes$feature_hg38_universal)])
redo_m<-na.omit(human_DA$Pneumocytes$mm9_lifted_mm10peak_mouse[match(good_peaks,human_DA$Pneumocytes$feature_hg38_universal)])



#C<-GetAssayData(human_all_atac,slot = "counts",assay = "cre")[unique(shared_DA$Pneumocytes$feature_hg38_universal),]
C<-GetAssayData(human_all_atac,slot = "counts",assay = "cre")[redo_h,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(human_all_atac$handannot)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(human_all_atac$nFeature_cre),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`human_all_atac$nFeature_cre`))/log10(median_nfeature_category$`human_all_atac$nFeature_cre`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

library(ComplexHeatmap)
test_h<-as.matrix(Cagg2)

rownames_of_interest<-c(unique(PHMIN[PHMIN$gene_name=="FAM105A",1]),unique(PHMIN[PHMIN$gene_name=="CCNJL",1]),unique(PHMIN[PHMIN$gene_name=="WNT3A",1]),unique(PHMIN[PHMIN$gene_name=="DUOX1",1]),unique(PHMIN[PHMIN$gene_name=="CIT",1]))
matched<-match(rownames_of_interest,gsub(row.names(test_h),pattern = "\\.",replacement = "-",perl=T))
ha_moh = rowAnnotation(foo = anno_mark(at = c(matched), labels = c(rep("FAM105A",times=1),rep("CCNJL",times=1),rep("WNT3A",times=1),rep("DUOX1",times=1),rep("CIT",times=2))))


H_1<-Heatmap(test_h,show_column_names = T,show_row_names = F)#,cluster_rows = T)
pdf("Human_orig_PN_HO.pdf")
H_1
dev.off()

hg38_use<-row.names(na.omit(test_h))


#same for mouse relative accessibility hg38
#C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "cre")[unique(shared_DA$Pneumocytes$feature_hg38_universal),]

C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "cre")[redo_h,]


C<-as.matrix((C > 0) + 0)
groups<-as.factor(mouse_select_atac$handannot)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})


#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(mouse_select_atac$nFeature_cre),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`mouse_select_atac$nFeature_cre`))/log10(median_nfeature_category$`mouse_select_atac$nFeature_cre`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))
test_m<-t(as.matrix(Cagg2)) 

hg38_use2<-row.names(na.omit(test_m))

#mouse
H_2<-Heatmap(test_m,show_column_names = T,show_row_names = F,show_heatmap_legend = F)#,right_annotation = ha_moh)
pdf("Mouse_orig_PN_HO_hg38.pdf")
H_2
dev.off()

hg38_use2<-row.names(na.omit(test_m))


#mouse mm10

#C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "mm10")[unique(shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse),]
C<-GetAssayData(mouse_select_atac,slot = "counts",assay = "mm10")[redo_m,]
C<-as.matrix((C > 0) + 0)
groups<-as.factor(mouse_select_atac$handannot)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(mouse_select_atac$nFeature_mm10),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`mouse_select_atac$nFeature_mm10`))/log10(median_nfeature_category$`mouse_select_atac$nFeature_mm10`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))
test_m2<-t(as.matrix(Cagg2)) 

#mouse
H_3<-Heatmap(test_m2,show_column_names = T,show_row_names = F,show_heatmap_legend = F)
pdf("Mouse_orig_PN_HO_mm10.pdf")
H_3
dev.off()



#now validation sets human first

cRE_peaks_human2<- FeatureMatrix(
  fragments = Fragments(integrated),
  #features =  StringToGRanges(unique(shared_DA$Pneumocytes$feature_hg38_universal),sep = c("-","-")),
    features =  StringToGRanges(redo_h,sep = c("-","-")),
  cells = rownames(integrated[[]])
)

 
C<-as.matrix(cRE_peaks_human2)
C<-as.matrix((C > 0) + 0)
groups<-as.factor(integrated$cluster_name)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})


#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(integrated$nFeature_cre),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`integrated$nFeature_cre`))/log10(median_nfeature_category$`integrated$nFeature_cre`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))
test_hv<-t(as.matrix(Cagg2)) 


hg38_use3<-row.names(na.omit(test_hv))

#human val
H_4<-Heatmap(test_hv,show_column_names = T,show_row_names = F,show_heatmap_legend = F)#,right_annotation = ha_moh)
pdf("Human_val_PN_HO_hg38.pdf")
H_4
dev.off()

#mouse validation mm10

cRE_peaks_mouse<- FeatureMatrix(
  fragments = Fragments(M_subset),
 # features =  StringToGRanges(unique(shared_DA$Pneumocytes$mm9_lifted_mm10peak_mouse),sep = c("-","-")),
 features =  StringToGRanges(redo_m,sep = c("-","-")),
  cells = rownames(M_subset[[]])
)

 
C<-as.matrix(cRE_peaks_mouse)
C<-as.matrix((C > 0) + 0)
groups<-as.factor(M_subset$cell_type)

Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#change to numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(M_subset$nFeature_mm10),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`M_subset$nFeature_mm10`))/log10(median_nfeature_category$`M_subset$nFeature_mm10`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames

Cagg2<-scale(t(Cagg2))

test_mv<-t(as.matrix(Cagg2)) 

#human val
H_5<-Heatmap(test_mv,show_column_names = T,show_row_names = F,show_heatmap_legend = F,right_annotation = ha_moh)

pdf("Human_Mouse_orig_PN_HO_hg38.pdf")
H_1+H_2
dev.off()

pdf("Human_Human_orig_val_PN_HO_hg38.pdf")
H_1+H_4
dev.off()

pdf("Mouse_Mouse_orig_val_PN_HO_mm10.pdf")
H_3+H_5
dev.off()

H_1+H_3+H_4+H_5

```
Filter for Pneumocytes this is so we can look at peaks in the genome browser
```{r}

PNcells<-row.names(human_all_atac[[]])[human_all_atac$handannot=="Pneumocytes"]

#only restrict to lung
for (i in 14:17) { 
print(GetFragmentData(object = Fragments(human_all_atac)[[i]], slot = "path"))
  
all_cells<-GetFragmentData(object = Fragments(human_all_atac)[[i]], slot = "cells")
select_cells<-na.exclude(all_cells[match(PNcells,names(all_cells))])
names(select_cells)<-NULL
FilterCells(
  fragments = GetFragmentData(object = Fragments(human_all_atac)[[i]], slot = "path"),
  cells = select_cells,
  outfile = paste0("Pneumocytes.output.",i,".frags.gz")
)
}


```

miscallanious stromal cells from colon similar to PN?! Probably just low quality
```{r}

a<-subset(human_all_atac,subset = tissue == "colon_transverse_SM")
#a<-human_all_atac

umap_orig<-data.frame(OUMAP1=a$UMAP1,OUMAP2=a$UMAP2)

a[["oUMAP"]] <- CreateDimReducObject(embeddings = as.matrix(umap_orig), key = "OUMAP_", assay = DefaultAssay(a))


p1<-DimPlot(a,group.by = "ID1",label=T)+theme(legend.position = "none")
p2<-DimPlot(a,group.by = "celltype",label = T)+theme(legend.position = "none")
p3<-DimPlot(a,group.by = "handannot",label = T)+theme(legend.position = "none")


DimPlot(object = a, label = TRUE,raster = F,group.by = "celltype",cells.highlight = names(a$celltype[a$celltype=="Miscellaneous stromal cells (unannotated)"])) + NoLegend()+ ggplot2::ggtitle("human")



p1|p2|p3

```




```{r}
#do comparison plot of where things lie
table(PNFIN$type)
table(PHMIN$type)

test<-StringToGRanges(mouse_DA$`B-lymphocytes`$feature_hg38_universal)

library("TxDb.Hsapiens.UCSC.hg38.knownGene")
library("org.Hs.eg.db")

load(file="active_use_objects/for_rahul/Shared.bw.species.DA.RData")
load(file="active_use_objects/for_rahul/Mouse_only.bw.species.DA.RData")
load(file="active_use_objects/for_rahul/Human_only.bw.species.DA.RData")


annotateRegions <- function(
  querygranges,
  txdb,
  annoDb,
  ...
){
  # Check depedencies
  if(! "ChIPseeker" %in% installed.packages()){
    stop('Please, install ChIPseeker: \n source("https://bioconductor.org/biocLite.R") \nbiocLite("ChIPseeker")')
  } else {
    require(ChIPseeker)
  }
  
  regions <- querygranges
  #regionAnno <- as.data.frame(annotatePeak(regions, TxDb=txdb, annoDb=annoDb, ...))
  regionAnno <- annotatePeak(regions, TxDb=txdb, annoDb=annoDb,tssRegion=c(-500, 500))
  #regionAnno[grep("Exon", regionAnno$annotation), "annotation"] <- "Exon"
 # regionAnno[grep("Intron", regionAnno$annotation), "annotation"] <- "Intron"
  #rownames(regionAnno) <- regionAnno$regionNames
  #regionAnno <- regionAnno[rownames(object.region.data), !(colnames(regionAnno) %in% c("regionNames", "strand"))]
  return(regionAnno)
}

results_stats<-data.frame(Feature=character(),Frequency=double(),celltype=character(),annot=character())
for (i in names(shared_DA)){
print(i)
test<-StringToGRanges(shared_DA[[i]]$feature_hg38_universal)
out_test<-annotateRegions(sort(test),txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,annoDb = "org.Hs.eg.db")    
out_test<-as.data.frame(out_test@annoStat)
out_test$celltype=i
out_test$annot<-"shared"
results_stats<-rbind(results_stats,out_test)

test<-StringToGRanges(mouse_DA[[i]]$feature_hg38_universal)
out_test<-annotateRegions(sort(test),txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,annoDb = "org.Hs.eg.db")    
out_test<-as.data.frame(out_test@annoStat)
out_test$celltype=i
out_test$annot<-"mouse"
results_stats<-rbind(results_stats,out_test)

test<-StringToGRanges(human_DA[[i]]$feature_hg38_universal)
out_test<-annotateRegions(sort(test),txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,annoDb = "org.Hs.eg.db")    
out_test<-as.data.frame(out_test@annoStat)
out_test$celltype=i
out_test$annot<-"human"
results_stats<-rbind(results_stats,out_test)

}

results_stats$combined_annot<-paste(results_stats$celltype,results_stats$annot,sep="_")

ggplot(data = results_stats,aes(x=Feature,fill=Frequency,y=combined_annot))+geom_tile()


#with TSS approach
tss.positions_hg38 <- GetTSSPositions(ranges = Annotation(human_all_atac))
tss.positions_mouse <- GetTSSPositions(ranges = Annotation(mouse_select_atac))

genehancer<-read.table("/home/torkenczyk/H_M_chromatin_atlas/genehancer/hg38_genehancer.txt",header = F)
genehancerloc<-StringToGRanges(paste(genehancer$V1,genehancer$V2,genehancer$V3,sep = "-"),sep = c("-","-"))

genehancer_list<-list()
distances_list<-list()
for (i in names(shared_DA)){
print(i)
shared_sites<-StringToGRanges(shared_DA[[i]]$feature_hg38_universal)
human_sites<-StringToGRanges(human_DA[[i]]$feature_hg38_universal)
mouse_sites<-StringToGRanges(mouse_DA[[i]]$mm9_lifted_mm10peak_mouse)
mouse_sites_hg38<-StringToGRanges(mouse_DA[[i]]$feature_hg38_universal)
 
 
shared_dist<-distanceToNearest(shared_sites,tss.positions_hg38)
shared_dist<-shared_dist@elementMetadata$distance
human_dist<-distanceToNearest(human_sites,tss.positions_hg38)  
human_dist<-human_dist@elementMetadata$distance
mouse_dist<-distanceToNearest(mouse_sites,tss.positions_mouse)  
mouse_dist<-mouse_dist@elementMetadata$distance

distances_list[[i]]<-data.frame(shared=shared_dist,human=human_dist,mouse=mouse_dist)

#genehancer shared
shared_genehancerloc<-subjectHits(findOverlaps(shared_sites,genehancerloc))
shared_query<-queryHits(findOverlaps(shared_sites,genehancerloc))
genehancer_select_sh<-genehancer[shared_genehancerloc,]
genehancer_select_sh$original_region<-shared_DA[[i]]$feature_hg38_universal[shared_query]
shared_genehancerloc<-subjectHits(findOverlaps(shared_sites,genehancerloc))
shared_query<-queryHits(findOverlaps(shared_sites,genehancerloc))
genehancer_select_sh<-genehancer[shared_genehancerloc,]
genehancer_select_sh$original_region<-shared_DA[[i]]$feature_hg38_universal[shared_query]
#genehancer human
human_genehancerloc<-subjectHits(findOverlaps(human_sites,genehancerloc))
human_query<-queryHits(findOverlaps(human_sites,genehancerloc))
genehancer_select_hu<-genehancer[human_genehancerloc,]
genehancer_select_hu$original_region<-human_DA[[i]]$feature_hg38_universal[human_query]
human_genehancerloc<-subjectHits(findOverlaps(human_sites,genehancerloc))
human_query<-queryHits(findOverlaps(human_sites,genehancerloc))
genehancer_select_hu<-genehancer[human_genehancerloc,]
genehancer_select_hu$original_region<-human_DA[[i]]$feature_hg38_universal[human_query]
#genehancer mouse
mouse_genehancerloc<-subjectHits(findOverlaps(mouse_sites_hg38,genehancerloc))
mouse_query<-queryHits(findOverlaps(mouse_sites_hg38,genehancerloc))
genehancer_select_mo<-genehancer[mouse_genehancerloc,]
genehancer_select_mo$original_region<-mouse_DA[[i]]$feature_hg38_universal[mouse_query]
mouse_genehancerloc<-subjectHits(findOverlaps(mouse_sites_hg38,genehancerloc))
mouse_query<-queryHits(findOverlaps(mouse_sites_hg38,genehancerloc))
genehancer_select_mo<-genehancer[mouse_genehancerloc,]
genehancer_select_mo$original_region<-mouse_DA[[i]]$feature_hg38_universal[mouse_query]

genehancer_list[[i]]<-data.frame(genehancerscore=c(genehancer_select_sh$V6,genehancer_select_hu$V6,mouse=genehancer_select_mo$V6),annot=rep(x = c("shared","human","mouse"),times=c(length(genehancer_select_sh$V6),length(genehancer_select_hu$V6),length(genehancer_select_mo$V6))))



}

all_distances<-bind_rows(distances_list, .id = "cell_type")
all_distances<-melt(all_distances,id.vars = "cell_type")


p<-ggplot(all_distances,aes(x=cell_type,y=value,fill=variable))+geom_boxplot()+theme_classic()


all_genehancer<-bind_rows(genehancer_list, .id = "cell_type")


p<-ggplot(all_distances,aes(x=cell_type,y=value,fill=variable))+geom_boxplot()+theme_classic()
p2<-ggplot(all_genehancer,aes(x=cell_type,y=genehancerscore,fill=annot))+geom_boxplot()+theme_classic()

save(distances_list,file = "Distances_from_TSS.RData")

#CHROM HMM
#lets look at pimary B track chromHMM, I count all of the annotations that it overlaps

Prim_B<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E032_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_B$V4
Prim_B<-StringToGRanges(paste(Prim_B$V1,Prim_B$V2,Prim_B$V3,sep = "_"),sep = c("_","_"))
Prim_B$annot <- DataFrame(annot = pn)

Shared_B<-StringToGRanges(shared_DA$`B-lymphocytes`$feature_hg38_universal)
Human_B<-StringToGRanges(human_DA$`B-lymphocytes`$feature_hg38_universal)
Mouse_B<-StringToGRanges(mouse_DA$`B-lymphocytes`$feature_hg38_universal)


sharedB<-Prim_B[queryHits(findOverlaps(Prim_B,Shared_B))]
humanB<-Prim_B[queryHits(findOverlaps(Prim_B,Human_B))]
mouseB<-Prim_B[queryHits(findOverlaps(Prim_B,Mouse_B))]

table(sharedB$annot)
table(mouseB$annot)
table(humanB$annot)


Prim_T<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E034_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_T$V4
Prim_T<-StringToGRanges(paste(Prim_T$V1,Prim_T$V2,Prim_T$V3,sep = "_"),sep = c("_","_"))
Prim_T$annot <- DataFrame(annot = pn)

Shared_T<-StringToGRanges(shared_DA$`T-lymphocytes`$feature_hg38_universal)
Human_T<-StringToGRanges(human_DA$`T-lymphocytes`$feature_hg38_universal)
Mouse_T<-StringToGRanges(mouse_DA$`T-lymphocytes`$feature_hg38_universal)

sharedT<-Prim_T[queryHits(findOverlaps(Prim_T,Shared_T))]
humanT<-Prim_T[queryHits(findOverlaps(Prim_T,Human_T))]
mouseT<-Prim_T[queryHits(findOverlaps(Prim_T,Mouse_T))]

table(sharedT$annot)
table(mouseT$annot)
table(humanT$annot)

Prim_SM<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E076_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_SM$V4
Prim_SM<-StringToGRanges(paste(Prim_SM$V1,Prim_SM$V2,Prim_SM$V3,sep = "_"),sep = c("_","_"))
Prim_SM$annot <- DataFrame(annot = pn)

Shared_SM<-StringToGRanges(shared_DA$`Smooth muscle cells`$feature_hg38_universal)
Human_SM<-StringToGRanges(human_DA$`Smooth muscle cells`$feature_hg38_universal)
Mouse_SM<-StringToGRanges(mouse_DA$`Smooth muscle cells`$feature_hg38_universal)

sharedSM<-Prim_SM[queryHits(findOverlaps(Prim_SM,Shared_SM))]
humanSM<-Prim_SM[queryHits(findOverlaps(Prim_SM,Human_SM))]
mouseSM<-Prim_SM[queryHits(findOverlaps(Prim_SM,Mouse_SM))]

table(sharedSM$annot)
table(mouseSM$annot)
table(humanSM$annot)


Prim_PN<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E114_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_PN$V4
Prim_PN<-StringToGRanges(paste(Prim_PN$V1,Prim_PN$V2,Prim_PN$V3,sep = "_"),sep = c("_","_"))
Prim_PN$annot <- DataFrame(annot = pn)

Shared_PN<-StringToGRanges(shared_DA$Pneumocytes$feature_hg38_universal)
Human_PN<-StringToGRanges(human_DA$Pneumocytes$feature_hg38_universal)
Mouse_PN<-StringToGRanges(mouse_DA$Pneumocytes$feature_hg38_universal)

sharedPN<-Prim_PN[queryHits(findOverlaps(Prim_PN,Shared_PN))]
humanPN<-Prim_PN[queryHits(findOverlaps(Prim_PN,Human_PN))]
mousePN<-Prim_PN[queryHits(findOverlaps(Prim_PN,Mouse_PN))]

table(sharedPN$annot)
table(mousePN$annot)
table(humanPN$annot)

#For endothelial cells and cardiomyocites I use heart

Prim_CR<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E095_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_CR$V4
Prim_CR<-StringToGRanges(paste(Prim_CR$V1,Prim_CR$V2,Prim_CR$V3,sep = "_"),sep = c("_","_"))
Prim_CR$annot <- DataFrame(annot = pn)

Shared_CR<-StringToGRanges(shared_DA$Cardiomyocytes$feature_hg38_universal)
Human_CR<-StringToGRanges(human_DA$Cardiomyocytes$feature_hg38_universal)
Mouse_CR<-StringToGRanges(mouse_DA$Cardiomyocytes$feature_hg38_universal)

sharedCR<-Prim_CR[queryHits(findOverlaps(Prim_CR,Shared_CR))]
humanCR<-Prim_CR[queryHits(findOverlaps(Prim_CR,Human_CR))]
mouseCR<-Prim_CR[queryHits(findOverlaps(Prim_CR,Mouse_CR))]

table(sharedCR$annot)
table(mouseCR$annot)
table(humanCR$annot)


Shared_END<-StringToGRanges(shared_DA$`Endothelial cells`$feature_hg38_universal)
Human_END<-StringToGRanges(human_DA$`Endothelial cells`$feature_hg38_universal)
Mouse_END<-StringToGRanges(mouse_DA$`Endothelial cells`$feature_hg38_universal)

sharedEND<-Prim_CR[queryHits(findOverlaps(Prim_CR,Shared_END))]
humanEND<-Prim_CR[queryHits(findOverlaps(Prim_CR,Human_END))]
mouseEND<-Prim_CR[queryHits(findOverlaps(Prim_CR,Mouse_END))]

table(sharedEND$annot)
table(mouseEND$annot)
table(humanEND$annot)



#fibroblast comp 


Prim_FB<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E128_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_FB$V4
Prim_FB<-StringToGRanges(paste(Prim_FB$V1,Prim_FB$V2,Prim_FB$V3,sep = "_"),sep = c("_","_"))
Prim_FB$annot <- DataFrame(annot = pn)


Shared_FB<-StringToGRanges(shared_DA$Fibroblasts$feature_hg38_universal)
Human_FB<-StringToGRanges(human_DA$Fibroblasts$feature_hg38_universal)
Mouse_FB<-StringToGRanges(mouse_DA$Fibroblasts$feature_hg38_universal)

sharedFB<-Prim_FB[queryHits(findOverlaps(Prim_FB,Shared_FB))]
humanFB<-Prim_FB[queryHits(findOverlaps(Prim_FB,Human_FB))]
mouseFB<-Prim_FB[queryHits(findOverlaps(Prim_FB,Mouse_FB))]

table(sharedFB$annot)
table(mouseFB$annot)
table(humanFB$annot)

Shared_MF<-StringToGRanges(shared_DA$Myofibroblasts$feature_hg38_universal)
Human_MF<-StringToGRanges(human_DA$Myofibroblasts$feature_hg38_universal)
Mouse_MF<-StringToGRanges(mouse_DA$Myofibroblasts$feature_hg38_universal)

sharedMF<-Prim_FB[queryHits(findOverlaps(Prim_FB,Shared_MF))]
humanMF<-Prim_FB[queryHits(findOverlaps(Prim_FB,Human_MF))]
mouseMF<-Prim_FB[queryHits(findOverlaps(Prim_FB,Mouse_MF))]

table(sharedMF$annot)
table(mouseMF$annot)
table(humanMF$annot)

#colonic mucosa for enterocytes and goblet cells

Prim_ENT<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E075_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_ENT$V4
Prim_ENT<-StringToGRanges(paste(Prim_ENT$V1,Prim_ENT$V2,Prim_ENT$V3,sep = "_"),sep = c("_","_"))
Prim_ENT$annot <- DataFrame(annot = pn)


Shared_ENT<-StringToGRanges(shared_DA$Enterocytes$feature_hg38_universal)
Human_ENT<-StringToGRanges(human_DA$Enterocytes$feature_hg38_universal)
Mouse_ENT<-StringToGRanges(mouse_DA$Enterocytes$feature_hg38_universal)

sharedENT<-Prim_ENT[queryHits(findOverlaps(Prim_ENT,Shared_ENT))]
humanENT<-Prim_ENT[queryHits(findOverlaps(Prim_ENT,Human_ENT))]
mouseENT<-Prim_ENT[queryHits(findOverlaps(Prim_ENT,Mouse_ENT))]

table(sharedENT$annot)
table(mouseENT$annot)
table(humanENT$annot)

Shared_GOB<-StringToGRanges(shared_DA$`Goblet cells`$feature_hg38_universal)
Human_GOB<-StringToGRanges(human_DA$`Goblet cells`$feature_hg38_universal)
Mouse_GOB<-StringToGRanges(mouse_DA$`Goblet cells`$feature_hg38_universal)

sharedGOB<-Prim_ENT[queryHits(findOverlaps(Prim_ENT,Shared_GOB))]
humanGOB<-Prim_ENT[queryHits(findOverlaps(Prim_ENT,Human_GOB))]
mouseGOB<-Prim_ENT[queryHits(findOverlaps(Prim_ENT,Mouse_GOB))]

table(sharedGOB$annot)
table(mouseGOB$annot)
table(humanGOB$annot)

#liver and hepatocytes

Prim_HEP<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E066_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_HEP$V4
Prim_HEP<-StringToGRanges(paste(Prim_HEP$V1,Prim_HEP$V2,Prim_HEP$V3,sep = "_"),sep = c("_","_"))
Prim_HEP$annot <- DataFrame(annot = pn)


Shared_HEP<-StringToGRanges(shared_DA$Hepatocytes$feature_hg38_universal)
Human_HEP<-StringToGRanges(human_DA$Hepatocytes$feature_hg38_universal)
Mouse_HEP<-StringToGRanges(mouse_DA$Hepatocytes$feature_hg38_universal)

sharedHEP<-Prim_HEP[queryHits(findOverlaps(Prim_HEP,Shared_HEP))]
humanHEP<-Prim_HEP[queryHits(findOverlaps(Prim_HEP,Human_HEP))]
mouseHEP<-Prim_HEP[queryHits(findOverlaps(Prim_HEP,Mouse_HEP))]

table(sharedHEP$annot)
table(mouseHEP$annot)
table(humanHEP$annot)

#monocytes and macrophages

Prim_MAC<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E124_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_MAC$V4
Prim_MAC<-StringToGRanges(paste(Prim_MAC$V1,Prim_MAC$V2,Prim_MAC$V3,sep = "_"),sep = c("_","_"))
Prim_MAC$annot <- DataFrame(annot = pn)


Shared_MAC<-StringToGRanges(shared_DA$Macrophages$feature_hg38_universal)
Human_MAC<-StringToGRanges(human_DA$Macrophages$feature_hg38_universal)
Mouse_MAC<-StringToGRanges(mouse_DA$Macrophages$feature_hg38_universal)

sharedMAC<-Prim_MAC[queryHits(findOverlaps(Prim_MAC,Shared_MAC))]
humanMAC<-Prim_MAC[queryHits(findOverlaps(Prim_MAC,Human_MAC))]
mouseMAC<-Prim_MAC[queryHits(findOverlaps(Prim_MAC,Mouse_MAC))]

table(sharedMAC$annot)
table(mouseMAC$annot)
table(humanMAC$annot)


#astrocytes and schewann cells

Prim_SCH<-read.table("/home/torkenczyk/H_M_chromatin_atlas/chromHMM/E125_25_imputed12marks_hg38lift_mnemonics.bed.gz")
pn<-Prim_SCH$V4
Prim_SCH<-StringToGRanges(paste(Prim_SCH$V1,Prim_SCH$V2,Prim_SCH$V3,sep = "_"),sep = c("_","_"))
Prim_SCH$annot <- DataFrame(annot = pn)


Shared_SCH<-StringToGRanges(shared_DA$`Schwann cells`$feature_hg38_universal)
Human_SCH<-StringToGRanges(human_DA$`Schwann cells`$feature_hg38_universal)
Mouse_SCH<-StringToGRanges(mouse_DA$`Schwann cells`$feature_hg38_universal)

sharedSCH<-Prim_SCH[queryHits(findOverlaps(Prim_SCH,Shared_SCH))]
humanSCH<-Prim_SCH[queryHits(findOverlaps(Prim_SCH,Human_SCH))]
mouseSCH<-Prim_SCH[queryHits(findOverlaps(Prim_SCH,Mouse_SCH))]

table(sharedSCH$annot)
table(mouseSCH$annot)
table(humanSCH$annot)


#I did the following block with shared mouse and human

BS=data.frame(table(sharedB$annot),annot=rep("B-lymphocytes",times=length(table(sharedB$annot))))
MAC=data.frame(table(sharedMAC$annot),annot=rep("Macrophages",times=length(table(sharedMAC$annot))))
T=data.frame(table(sharedT$annot),annot=rep("T-lymphocytes",times=length(table(sharedT$annot))))
ENT=data.frame(table(sharedENT$annot),annot=rep("Enterocytes",times=length(table(sharedENT$annot))))
GOB=data.frame(table(sharedGOB$annot),annot=rep('Goblet cells',times=length(table(sharedGOB$annot))))
HEP=data.frame(table(sharedHEP$annot),annot=rep("Hepatocytes",times=length(table(sharedHEP$annot))))
CARD=data.frame(table(sharedCR$annot),annot=rep("Cardiomyocytes",times=length(table(sharedCR$annot))))
MYF=data.frame(table(sharedMF$annot),annot=rep("Myofibroblasts",times=length(table(sharedMF$annot))))
FIB=data.frame(table(sharedFB$annot),annot=rep("Fibroblasts",times=length(table(sharedFB$annot))))
PN=data.frame(table(sharedPN$annot),annot=rep("Pneumocytes",times=length(table(sharedPN$annot))))
END=data.frame(table(sharedEND$annot),annot=rep("Endothelial cells",times=length(table(sharedEND$annot))))
SM=data.frame(table(sharedSM$annot),annot=rep("Smooth Muscle cells",times=length(table(sharedSM$annot))))
SCH=data.frame(table(sharedSCH$annot),annot=rep("Schwann cells",times=length(table(sharedSCH$annot))))
all_CMHMM <- rbind(BS,T,MAC,END,SM,CARD,MYF,FIB,END,SM,PN,HEP,GOB,ENT,SCH)


BS=data.frame(table(mouseB$annot),annot=rep("B-lymphocytes",times=length(table(mouseB$annot))))
MAC=data.frame(table(mouseMAC$annot),annot=rep("Macrophages",times=length(table(mouseMAC$annot))))
T=data.frame(table(mouseT$annot),annot=rep("T-lymphocytes",times=length(table(mouseT$annot))))
ENT=data.frame(table(mouseENT$annot),annot=rep("Enterocytes",times=length(table(mouseENT$annot))))
GOB=data.frame(table(mouseGOB$annot),annot=rep('Goblet cells',times=length(table(mouseGOB$annot))))
HEP=data.frame(table(mouseHEP$annot),annot=rep("Hepatocytes",times=length(table(mouseHEP$annot))))
CARD=data.frame(table(mouseCR$annot),annot=rep("Cardiomyocytes",times=length(table(mouseCR$annot))))
MYF=data.frame(table(mouseMF$annot),annot=rep("Myofibroblasts",times=length(table(mouseMF$annot))))
FIB=data.frame(table(mouseFB$annot),annot=rep("Fibroblasts",times=length(table(mouseFB$annot))))
PN=data.frame(table(mousePN$annot),annot=rep("Pneumocytes",times=length(table(mousePN$annot))))
END=data.frame(table(mouseEND$annot),annot=rep("Endothelial cells",times=length(table(mouseEND$annot))))
SM=data.frame(table(mouseSM$annot),annot=rep("Smooth Muscle cells",times=length(table(mouseSM$annot))))
SCH=data.frame(table(mouseSCH$annot),annot=rep("Schwann cells",times=length(table(mouseSCH$annot))))
all_CMHMM <- rbind(BS,T,MAC,END,SM,CARD,MYF,FIB,END,SM,PN,HEP,GOB,ENT,SCH)

BS=data.frame(table(humanB$annot),annot=rep("B-lymphocytes",times=length(table(humanB$annot))))
MAC=data.frame(table(humanMAC$annot),annot=rep("Macrophages",times=length(table(humanMAC$annot))))
T=data.frame(table(humanT$annot),annot=rep("T-lymphocytes",times=length(table(humanT$annot))))
ENT=data.frame(table(humanENT$annot),annot=rep("Enterocytes",times=length(table(humanENT$annot))))
GOB=data.frame(table(humanGOB$annot),annot=rep('Goblet cells',times=length(table(humanGOB$annot))))
HEP=data.frame(table(humanHEP$annot),annot=rep("Hepatocytes",times=length(table(humanHEP$annot))))
CARD=data.frame(table(humanCR$annot),annot=rep("Cardiomyocytes",times=length(table(humanCR$annot))))
MYF=data.frame(table(humanMF$annot),annot=rep("Myofibroblasts",times=length(table(humanMF$annot))))
FIB=data.frame(table(humanFB$annot),annot=rep("Fibroblasts",times=length(table(humanFB$annot))))
PN=data.frame(table(humanPN$annot),annot=rep("Pneumocytes",times=length(table(humanPN$annot))))
END=data.frame(table(humanEND$annot),annot=rep("Endothelial cells",times=length(table(humanEND$annot))))
SM=data.frame(table(humanSM$annot),annot=rep("Smooth Muscle cells",times=length(table(humanSM$annot))))
SCH=data.frame(table(humanSCH$annot),annot=rep("Schwann cells",times=length(table(humanSCH$annot))))
all_CMHMM <- rbind(BS,T,MAC,END,SM,CARD,MYF,FIB,END,SM,PN,HEP,GOB,ENT,SCH)




names(all_CMHMM)<-c("state","freq","celltype")

chromHMM_sh<-reshape(all_CMHMM, idvar = "state", timevar = "celltype", direction = "wide")
chromHMM_m<-reshape(all_CMHMM, idvar = "state", timevar = "celltype", direction = "wide")
chromHMM_h<-reshape(all_CMHMM, idvar = "state", timevar = "celltype", direction = "wide")



chromHMM_sh[is.na(chromHMM_sh)]<-0
row.names(chromHMM_sh)<-chromHMM_sh$state
chromHMM_sh$state<-NULL

chromHMM_m[is.na(chromHMM_m)]<-0
row.names(chromHMM_m)<-chromHMM_m$state
chromHMM_m$state<-NULL

chromHMM_h[is.na(chromHMM_h)]<-0
row.names(chromHMM_h)<-chromHMM_h$state
chromHMM_h$state<-NULL

CH1<-Heatmap(scale(chromHMM_sh))

CH2<-Heatmap(scale(chromHMM_m))

CH3<-Heatmap(scale(chromHMM_h))

CH1+CH3+CH2

chmmlist<-list()
chmmlist[["mouse"]]<-chromHMM_m
chmmlist[["human"]]<-chromHMM_h
chmmlist[["shared"]]<-chromHMM_sh

saveRDS(chmmlist,"ChromHMM_res.rds")

```
PER tissue distance analyses
```{r}
#analysis of per tissue discance
library(lsa)
library(reshape2)
median_nfeature_category_human<-aggregate(as.data.frame(human_all_atac$nFeature_cre),by=list(human_all_atac$handannot),FUN=median)
median_nfeature_category_mouse<-aggregate(as.data.frame(mouse_select_atac$nFeature_mm9),by=list(mouse_select_atac$handannot),FUN=median)
median_nfeature_category_mouse2<-aggregate(as.data.frame(mouse_select_atac$nFeature_cre),by=list(mouse_select_atac$handannot),FUN=median)


human_list_distances<-list()
mouse_list_distances<-list()
mouse_list_distances_h<-list()
for (i in levels(as.factor(Idents(human_all_atac))))
{
print(i)
g_h<-WhichCells(human_all_atac,idents = i)
DefaultAssay(human_all_atac)<-"cre"
h_s_o<-subset(human_all_atac,cells = g_h)

h_s_o <- RunTFIDF(h_s_o)
h_s_o <- FindTopFeatures(h_s_o, min.cutoff = 'q50')
h_s_o <- RunSVD(h_s_o)
h_s_o <- FindNeighbors(object = h_s_o, reduction = 'lsi', dims = 2:30)
h_s_o <- FindClusters(object = h_s_o, verbose = FALSE, algorithm = 3)

cat_med_h<-median(h_s_o$nFeature_cre)

h_s_o<-BinarizeCounts(h_s_o,assay = "cre")

h_sum<-as.vector(table(Idents(h_s_o)))
h_sum<-t(replicate(h_sum,n = length(row.names(h_s_o))))

h_s_o<-AggregateExpression(h_s_o,assays = "cre",slot = "counts")
h_s_o<-h_s_o$cre/h_sum
#now correct for complexity by multiplying with factor

correction_h<-mean(log10(median_nfeature_category_human$`human_all_atac$nFeature_cre`))/log10(cat_med_h)

human_list_distances[[i]]<-h_s_o*correction_h



#here you could binarize and calc the jaccard dist but let us stick to simple eucledean
#h_s_o2<-as.matrix((h_s_o > 0.01) + 0)
#dist(t(h_s_o))

colnames(h_s_o)<-paste0(i,"_",colnames(h_s_o))


DefaultAssay(mouse_select_atac)<-"mm9"
g_m<-WhichCells(mouse_select_atac,idents = i)
m_s_o<-subset(mouse_select_atac,cells = g_m)
m_s_o <- RunTFIDF(m_s_o)
m_s_o <- FindTopFeatures(m_s_o, min.cutoff = 'q50')
m_s_o <- RunSVD(m_s_o)
m_s_o <- FindNeighbors(object = m_s_o, reduction = 'lsi', dims = 2:30)
m_s_o <- FindClusters(object = m_s_o, verbose = FALSE, algorithm = 3)

cat_med_m<-median(m_s_o$nFeature_mm9)
cat_med_m2<-median(m_s_o$nFeature_cre)

m_s_o2<-m_s_o
m_s_o<-BinarizeCounts(m_s_o,assay = "mm9")

DefaultAssay(m_s_o2)<-"cre"
m_s_o2<-BinarizeCounts(m_s_o2,assay = "cre")

m_sum<-as.vector(table(Idents(m_s_o)))
m_sum<-t(replicate(m_sum,n = length(row.names(m_s_o))))

m_sum2<-as.vector(table(Idents(m_s_o2)))
m_sum2<-t(replicate(m_sum2,n = length(row.names(m_s_o2))))


m_s_o<-AggregateExpression(m_s_o,assays = "mm9",slot = "counts")
m_s_o2<-AggregateExpression(m_s_o2,assays = "cre",slot = "counts")

m_s_o<-m_s_o$mm9/m_sum
m_s_o2<-m_s_o2$cre/m_sum2

correction_m<-mean(log10(median_nfeature_category_mouse$`mouse_select_atac$nFeature_mm9`))/log10(cat_med_m)
correction_m2<-mean(log10(median_nfeature_category_mouse2$`mouse_select_atac$nFeature_cre`))/log10(cat_med_m2)

mouse_list_distances[[i]]<-m_s_o*correction_m
mouse_list_distances_h[[i]]<-m_s_o2*correction_m2

}




#calculate within distances and then compare
expand.grid.unique <- function(x, y, include.equals=FALSE)
{
    x <- unique(x)

    y <- unique(y)

    g <- function(i)
    {
        z <- setdiff(y, x[seq_len(i-include.equals)])

        if(length(z)) cbind(x[i], z, deparse.level=0)
    }

    do.call(rbind, lapply(seq_along(x), g))
}

#THIS IS WHERE HM starts from

#calculate distance between MH with original labels human
human_list_distances_orig<-list()
Idents(human_all_atac)<-human_all_atac$celltype
median_nfeature_category_human<-aggregate(as.data.frame(human_all_atac$nFeature_cre),by=list(human_all_atac$celltype),FUN=median)
for (i in levels(as.factor(human_all_atac$celltype)))
{
print(i)
g_h<-WhichCells(human_all_atac,idents = i)
h_s_o<-subset(human_all_atac,cells = g_h)
cat_med_h<-median(h_s_o$nFeature_cre)
h_s_o<-BinarizeCounts(h_s_o,assay = "cre")
h_sum<-as.vector(table(Idents(h_s_o)))
h_sum<-replicate(h_sum,n = length(row.names(h_s_o)))
h_s_o<-AggregateExpression(h_s_o,assays = "cre",slot = "counts")
h_s_o<-h_s_o$cre/h_sum
#now correct for complexity by multiplying with factor
correction_h<-mean(log10(median_nfeature_category_human$`human_all_atac$nFeature_cre`))/log10(cat_med_h)
human_list_distances_orig[[i]]<-h_s_o*correction_h
}

#calculate distance between MH with original labels in mouse
mouse_list_distances_orig<-list()
Idents(mouse_select_atac)<-mouse_select_atac$cell_label
median_nfeature_category_mouse2<-aggregate(as.data.frame(mouse_select_atac$nFeature_cre),by=list(mouse_select_atac$cell_label),FUN=median)
for (i in levels(as.factor(mouse_select_atac$cell_label)))
{
print(i)
g_m<-WhichCells(mouse_select_atac,idents = i)
m_s_o<-subset(mouse_select_atac,cells = g_m)
cat_med_m<-median(m_s_o$nFeature_cre)
m_s_o<-BinarizeCounts(m_s_o,assay = "cre")
m_sum<-as.vector(table(Idents(m_s_o)))
m_sum<-replicate(m_sum,n = length(row.names(m_s_o)))
m_s_o<-AggregateExpression(m_s_o,assays = "cre",slot = "counts")
m_s_o<-m_s_o$cre/m_sum
#now correct for complexity by multiplying with factor
correction_m<-mean(log10(median_nfeature_category_mouse2$`mouse_select_atac$nFeature_cre`))/log10(cat_med_m)
mouse_list_distances_orig[[i]]<-m_s_o*correction_m
}

hm_avg_dist_orig=data.frame(human=character(),mouse=character(),distance=double())
for (i in levels(as.factor(mouse_select_atac$cell_label)))
{
  for (j in levels(as.factor(human_all_atac$celltype)))
{
print(paste0("mouse: ",i," human: ",j))
 
m1<-human_list_distances_orig[[j]]
m2<-mouse_list_distances_orig[[i]]
temp<-data.frame(human=j,mouse=i,distance=cosine(x=m1[,1],y=m2[,1])[1,1])
hm_avg_dist_orig<-rbind(hm_avg_dist_orig,temp)
}
}

data_wide_hm_orig <- dcast(hm_avg_dist_orig, human ~ mouse, value.var="distance")
row.names(data_wide_hm_orig)<-data_wide_hm_orig$human
data_wide_hm_orig$human<-NULL
library(circlize)
col_fun = colorRamp2(c(-3,0,3), c("#08306b", "#bcbddc" ,"#67000d"))

Heatmap(as.matrix(data_wide_hm_orig),cluster_columns = F,cluster_rows = F,col = col_fun)


#here we need to highlight correlating sites
Idents(human_all_atac)<-human_all_atac$celltype
Idents(mouse_select_atac)<-mouse_select_atac$cell_label
#look at what proportion of sites correlate between Human and Mouse Hepatocytes

g_m<-WhichCells(mouse_select_atac,idents = "Hepatocytes")
g_h<-WhichCells(human_all_atac,idents = "Cardiomyocytes")
m_s<-subset(mouse_select_atac,cells = g_m)
h_s<-subset(human_all_atac,cells = g_h)


DefaultAssay(m_s)<-"cre"
DefaultAssay(h_s)<-"cre"
m_s[["cre99"]]<-NULL
m_s[["cre05"]]<-NULL
m_s[["mm10"]]<-NULL
m_s[["Deviation_DA_mouse"]]<-NULL
m_s[["Deviation_DA_human"]]<-NULL
m_s[["Deviation_DA_int"]]<-NULL
m_s[["chromvar"]]<-NULL
m_s[["mm9"]]<-NULL
h_s[["Deviation_DA_mouse"]]<-NULL
h_s[["Deviation_DA_human"]]<-NULL
h_s[["Deviation_DA_int"]]<-NULL
h_s[["chromvar"]]<-NULL

iteration_list_h<-list()
iteration_list_m<-list()
iteration_list_name_mouse<-list()
iteration_list_name_human<-list()
h_s_o<-NULL
m_s_o<-NULL
# Create a new column having the same 'value' stored for all cells
m_s$noIdent <- "noIdent"
Idents(m_s)<-m_s$noIdent  


m_s<-FindTopFeatures(m_s)
h_s<-FindTopFeatures(h_s)
cat_med_h<-median(h_s$nFeature_cre)
cat_med_m<-median(m_s$nFeature_cre)
median_nfeature_category_mouse2<-aggregate(as.data.frame(mouse_select_atac$nFeature_cre),by=list(mouse_select_atac$cell_label),FUN=median)
correction_m<-mean(log10(median_nfeature_category_mouse2$`mouse_select_atac$nFeature_cre`))/log10(cat_med_m)
#for hep


median_nfeature_category_human<-aggregate(as.data.frame(human_all_atac$nFeature_cre),by=list(human_all_atac$Cell.Type),FUN=median)
correction_h<-mean(log10(median_nfeature_category_human$`human_all_atac$nFeature_cre`))/log10(cat_med_h)

ptm <- proc.time()
for (i in c(28:100))
{
random.seed = i


mouse_cells<-NULL
human_cells<-NULL
mouse_cells<-sample(colnames(m_s), size=500, replace=F)
iteration_list_name_mouse[[i]]<-mouse_cells
human_cells<-sample(colnames(h_s), size=500, replace=F)
iteration_list_name_human[[i]]<-human_cells
M<-GetAssayData(m_s,assay="cre",slot="counts")[,mouse_cells]
H<-GetAssayData(h_s,assay="cre",slot="counts")[,human_cells]

MT<-CreateChromatinAssay(
  counts = M,
  sep = c(":", "-"))

HT<-CreateChromatinAssay(
  counts = H,
  sep = c(":", "-"))

Mouse_subset <- CreateSeuratObject(
  counts = MT,
  assay = "cre")
Human_subset <- CreateSeuratObject(
  counts = HT,
  assay = "cre")

Mouse_subset$noIdent <- "noIdent"
Idents(Mouse_subset)<-Mouse_subset$noIdent 
Human_subset$noIdent <- "noIdent"
Idents(Human_subset)<-Human_subset$noIdent 


Mouse_subset<-BinarizeCounts(Mouse_subset,assay = "cre")
m_sum<-as.vector(table(Idents(Mouse_subset)))
m_sum<-replicate(m_sum,n = length(row.names(Mouse_subset)))
Mouse_subset<-AggregateExpression(Mouse_subset,assays = "cre",slot = "counts")
Mouse_subset<-Mouse_subset$cre/m_sum
iteration_list_m[[i]]<-Mouse_subset*correction_m

Human_subset<-BinarizeCounts(Human_subset,assay = "cre")
h_sum<-as.vector(table(Idents(Human_subset)))
h_sum<-replicate(h_sum,n = length(row.names(Human_subset)))
Human_subset<-AggregateExpression(Human_subset,assays = "cre",slot = "counts")
Human_subset<-Human_subset$cre/h_sum
iteration_list_h[[i]]<-Human_subset*correction_h
print(i)
}
proc.time() - ptm

iteration_list_name_human[[1]] %in% iteration_list_name_human[[2]]
iteration_list_name_mouse[[1]] %in% iteration_list_name_mouse[[2]]
iteration_list_m[[1]]-iteration_list_m[[2]]
iteration_list_h[[1]]-iteration_list_h[[2]]

Mouse<-data.frame(iteration_list_m)
Human<-data.frame(iteration_list_h)


m_s<-FindTopFeatures(m_s)

have_reads_m<-row.names(m_s[["cre"]][[]][m_s[["cre"]][[]]$count>0,])
h_s<-FindTopFeatures(h_s)
have_reads_h<-row.names(h_s[["cre"]][[]][h_s[["cre"]][[]]$count>0,])

look_at<-unique(sort(c(have_reads_h,have_reads_m)))

Mouse<-Mouse[look_at,]
Human<-Human[look_at,]
distance_mh_site<-c()
for (j in 1:dim(Mouse)[1])
{
Mvec<-t(Mouse[j,])[,1]
Hvec<-t(Human[j,])[,1]
distance_mh_site<-c(distance_mh_site,cosine(x=Mvec,Hvec))

}

mh_Hep_CARD<-data.frame(cosine=distance_mh_site)

ggplot(mh_Hep_CARD,aes(cosine))+geom_histogram(binwidth=0.01)+theme_classic()+xlab("cosine similarity")+ylab("Number of peaks")

write.table(mh_Hep_CARD,file="Hepatocyte_card_by_site_distance.txt",quote = F,sep = "\t")















m_s_o<-BinarizeCounts(m_s_o,assay = "cre")
m_sum<-as.vector(table(Idents(m_s_o)))
m_sum<-replicate(m_sum,n = length(row.names(m_s_o)))
m_s_o<-AggregateExpression(m_s_o,assays = "cre",slot = "counts")
m_s_o<-m_s_o$cre/m_sum
#print(m_s_o)
#iteration_list_m[[i]]<-m_s_o

cat_med_h<-median(h_s_o$nFeature_cre)
h_s_o<-BinarizeCounts(h_s_o,assay = "cre")
h_sum<-as.vector(table(Idents(h_s_o)))
h_sum<-replicate(h_sum,n = length(row.names(h_s_o)))
h_s_o<-AggregateExpression(h_s_o,assays = "cre",slot = "counts")
h_s_o<-h_s_o$cre/h_sum
iteration_list_h[[i]]<-h_s_o
print(i)
#proc.time() - ptm
}


mouse_cells1<-sample(colnames(m_s), size=500, replace=F)
mouse_cells2<-sample(colnames(m_s), size=500, replace=F)




rowSums(GetAssayData(m_s,assay="cre",slot="counts")[,mouse_cells1])-rowSums(GetAssayData(m_s,assay="cre",slot="counts")[,mouse_cells2])
m_s_o1<-subset(m_s,cells = mouse_cells1)
m_s_o2<-subset(m_s,cells = mouse_cells2)
i=1
iteration_list_m[[i]]<-rowSums(GetAssayData(m_s_o,assay="cre",slot="counts"))
i=2
iteration_list_m[[i]]<-rowSums(GetAssayData(m_s_o,assay="cre",slot="counts"))

sum(iteration_list_m[[1]]-iteration_list_m[[2]])

Hep_m<-merge(m_s_o,h_s_o)

Hep_m<-FindTopFeatures(Hep_m)
rownames_of_interest<-Hep_m[["cre"]][[]]$count>1
res=rowMeans(RunTFIDF(GetAssayData(Hep_m,slot = "counts")[rownames_of_interest,]))
wha<-hist(res,breaks = 200)

#look at what proportion of sites correlate between Human and Mouse Hepatocytes
g_m<-WhichCells(mouse_select_atac,idents = "Hepatocytes")
g_h<-WhichCells(human_all_atac,idents = "Cardiomyocytes")
m_s_o<-subset(mouse_select_atac,cells = g_m)
h_s_o<-subset(human_all_atac,cells = g_h)


DefaultAssay(m_s_o)<-"cre"
DefaultAssay(h_s_o)<-"cre"
m_s_o[["cre99"]]<-NULL
m_s_o[["cre05"]]<-NULL
m_s_o[["mm10"]]<-NULL
m_s_o[["Deviation_DA_mouse"]]<-NULL
m_s_o[["Deviation_DA_human"]]<-NULL
m_s_o[["Deviation_DA_int"]]<-NULL
m_s_o[["chromvar"]]<-NULL
m_s_o[["mm9"]]<-NULL
h_s_o[["Deviation_DA_mouse"]]<-NULL
h_s_o[["Deviation_DA_human"]]<-NULL
h_s_o[["Deviation_DA_int"]]<-NULL
h_s_o[["chromvar"]]<-NULL

Hep_2<-merge(m_s_o,h_s_o)
Hep_2<-FindTopFeatures(Hep_2)


rownames_of_interest<-Hep_2[["cre"]][[]]$count>1
res2=rowMeans(RunTFIDF(GetAssayData(Hep_m,slot = "counts")[rownames_of_interest,]))
wha2<-hist(res,breaks = 200)


#now calculate average distance between the our labels


hm_dist_list<-list()
hm_avg_dist<-data.frame(human=character(),mouse=character(),distance=double())
for (i in levels(as.factor(Idents(human_all_atac))))
{
  counter=1
  for (l in levels(as.factor(Idents(human_all_atac))))
{
    print(paste("comparison:",i,l))
m1<-human_list_distances[[i]]
m2<-mouse_list_distances_h[[l]]

combo_sub_hm<-expand.grid(colnames(m1),colnames(m2))
distance_mh<-c()
for (j in c(1:dim(combo_sub_hm)[1])) {
x=data.frame(cat1=m1[,combo_sub_hm[j,1]])
y=data.frame(cat2=m2[,combo_sub_hm[j,2]])
distance_mh<-c(distance_mh,cosine(x=x$cat1,y$cat2))
}
df_c_s<-data.frame(combo_sub_hm)
df_c_s$distance<-distance_mh
names(df_c_s)<-c("human","mouse","distance")
df_c_s$human<-paste0(i,"_",df_c_s$human)
df_c_s$mouse<-paste0(l,"_",df_c_s$mouse)
if(counter==1){
hm_dist_list[[i]]<-df_c_s
}else{hm_dist_list[[i]]<-rbind(hm_dist_list[[i]],df_c_s)}
counter=counter+1
hm_avg_dist<-rbind(hm_avg_dist,data.frame(human=i,mouse=l,distance=mean(df_c_s$distance)))
}
}
lapply(hm_dist_list, function(x){mean(x$distance)})

hm_show<-ldply(hm_dist_list, data.frame)
hm_show$.id=NULL
hm_show2<-rbind(hm_show,data.frame(human=hm_show$mouse,mouse=hm_show$human,distance=hm_show$distance))
data_wide_hm <- dcast(hm_show, human ~ mouse, value.var="distance")
row.names(data_wide_hm)<-data_wide_hm$human
data_wide_hm$human<-NULL
library(circlize)
col_fun2 = colorRamp2(c(-3,0,3), c("#08306b", "white" ,"#67000d"))

Heatmap(scale(as.matrix(data_wide_hm)),cluster_columns = F,cluster_rows = F,col = col_fun)

data_wide_hm <- dcast(hm_avg_dist, human ~ mouse, value.var="distance")
row.names(data_wide_hm)<-data_wide_hm$human
data_wide_hm$human<-NULL
library(circlize)
col_fun = colorRamp2(c(0.4,0.525,0.65), c("#08306b", "#bcbddc" ,"#67000d"))

Heatmap(as.matrix(data_wide_hm),cluster_columns = F,cluster_rows = F,col = col_fun)


save(hm_dist_list, file = "Cosine_similarity_our_annot.RData")
save(hm_avg_dist, file = "Cosine_similarity_avg_our_annot.RData")


#from here the distance of distances 

cats<-levels(as.factor(Idents(human_all_atac)))

combo_count<-expand.grid.unique(cats,cats)

human_average_distances=data.frame(ct1=character(),ct2=character(),avg_dist=double())
mouse_average_distances=data.frame(ct1=character(),ct2=character(),avg_dist=double())

for (i in c(1:78)) {
cat1<-combo_count[i,1]
cat2<-combo_count[i,2]
print(paste(cat1,cat2))
h1<-human_list_distances[[cat1]]
h2<-human_list_distances[[cat2]]
colnames(h1)<-paste0(cat1,"_",colnames(h1))
colnames(h2)<-paste0(cat2,"_",colnames(h2))

Hs<-merge(h1,h2,by="row.names")
row.names(Hs)<-Hs$Row.names
Hs$Row.names<-NULL
Hs<-cosine(as.matrix(Hs))
H_s<-Heatmap(Hs,column_title = "Human")

combo_sub2_h<-expand.grid.unique(colnames(h1),colnames(h2))
distance_h<-c()
for (j in c(1:dim(combo_sub2_h)[1])) {
x=data.frame(cat1=h1[,combo_sub2_h[j,1]])
y=data.frame(cat2=h2[,combo_sub2_h[j,2]])
distance_h<-c(distance_h,cosine(x=x$cat1,y$cat2))
}
tdisth<-data.frame(ct1=cat1,ct2=cat2,avg_dist=mean(distance_h))
human_average_distances<-rbind(human_average_distances,tdisth)
print("Now mouse")
m1<-mouse_list_distances[[cat1]]
m2<-mouse_list_distances[[cat2]]
colnames(m1)<-paste0(cat1,"_",colnames(m1))
colnames(m2)<-paste0(cat2,"_",colnames(m2))

Ms<-merge(m1,m2,by="row.names")
row.names(Ms)<-Ms$Row.names
Ms$Row.names<-NULL
Ms<-cosine(as.matrix(Ms))
M_s<-Heatmap(Ms,column_title = "Mouse")




combo_sub2_m<-expand.grid.unique(colnames(m1),colnames(m2))
distance_m<-c()
for (j in c(1:dim(combo_sub2_m)[1])) {
x=data.frame(cat1=m1[,combo_sub2_m[j,1]])
y=data.frame(cat2=m2[,combo_sub2_m[j,2]])
distance_m<-c(distance_m,cosine(x=x$cat1,y$cat2))
}

tdistm<-data.frame(ct1=cat1,ct2=cat2,avg_dist=mean(distance_m))
mouse_average_distances<-rbind(mouse_average_distances,tdistm)

}


data_wide_h <- dcast(human_average_distances, ct1 ~ ct2, value.var="avg_dist")
row.names(data_wide_h)<-data_wide_h$ct1
data_wide_h$ct1<-NULL
Heatmap(as.matrix(data_wide_h),cluster_columns = T,cluster_rows = T)


data_wide_m <- dcast(mouse_average_distances, ct1 ~ ct2, value.var="avg_dist")
row.names(data_wide_m)<-data_wide_m$ct1
data_wide_m$ct1<-NULL
Heatmap(as.matrix(data_wide_m),cluster_columns = T,cluster_rows = T)

data_wide_h$Myofibroblasts<-c(NA)
data_wide_m$Myofibroblasts<-c(NA)

extra_row<-data_wide_h[2,]
row.names(extra_row)<-"Cardiomyocytes"
extra_row[,2]<-NA

data_wide_h<-rbind(data_wide_h,extra_row)

data_wide_m<-rbind(data_wide_m,extra_row)





H_s|M_s

hd_h+hd_m


wrap_plots(list(H_s,M_s),ncol=2)

mouse_average_distances
human_average_distances

summary_barplot<-data.frame(ct=character(),corr=double())
for (i in levels(as.factor(Idents(human_all_atac))))
{
a<-mouse_average_distances[which(mouse_average_distances$ct1==i | mouse_average_distances$ct2==i),3]
b<-human_average_distances[which(human_average_distances$ct1==i | human_average_distances$ct2==i),3]
print(paste0(i,"_",cor(a,b)))
temp<-data.frame(ct=i,corr=cor(x = a,y = b,method = "spearman"))
summary_barplot<-rbind(summary_barplot,temp)
}


summary_barplot<-summary_barplot[match(row.names(data_wide_h),summary_barplot$ct),]
summary_barplot<-summary_barplot[order(as.numeric(rowSums(is.na(data_wide_h))),decreasing = T),]
plot_h<-as.matrix(data_wide_h)[order(as.numeric(rowSums(is.na(data_wide_h))),decreasing = T),order(as.numeric(colSums(is.na(data_wide_h))),decreasing = T)]
plot_m<-as.matrix(data_wide_m)[order(as.numeric(rowSums(is.na(data_wide_m))),decreasing = T),order(as.numeric(colSums(is.na(data_wide_m))),decreasing = T)]
row.names(plot_h)

library(circlize)

pvalue_col_fun = colorRamp2(c(0, 0.2, 1), c("green", "white", "red"))
ha = rowAnnotation(Sp_corr = anno_simple(summary_barplot$corr, col = pvalue_col_fun),annotation_name_side = "top")

ha = rowAnnotation(Sp_corr = anno_points(summary_barplot$corr),annotation_name_side = "top")


hd_h<-Heatmap(plot_h,cluster_columns = F,cluster_rows = F,name ="Average cosine similarity human",column_title  = "Human",right_annotation = ha)


hd_m<-Heatmap(plot_m,cluster_columns = F,cluster_rows = F,name = "Average cosine similarity mouse",column_title = "Mouse")

hd_m+hd_h


#What is the cosine similarity directly between mouse and human




```


GWAS only immune ldsc
```{r}
setwd("/home/torkenczyk/LD/partition_heritability_ONlY_immune_sumstats/")
res_files=list.files(path = "/home/torkenczyk/LD/partition_heritability_ONlY_immune_sumstats/",pattern=".merged.cell_type_results.txt")
data_list=lapply(paste0("/home/torkenczyk/LD/partition_heritability_ONlY_immune_sumstats/",res_files), function(x){read.csv(file=x,header=T, sep="\t")})

gwas_list=c("biliary_cirrhosis","Celiac", "Crohns_Disease","Lupus","Multiple_sclerosis", "rheumatoid_arthritis", "Type1_diabete","ulcerative_colitis")
data_list_gwas=Map(cbind, data_list, gwas = gwas_list)
library(ggplot2)

data.df=do.call(rbind,data_list_gwas)


data.df$gwas=factor(data.df$gwas, levels=c("biliary_cirrhosis","Celiac", "Crohns_Disease","Multiple_sclerosis", "rheumatoid_arthritis", "Type1_diabete","ulcerative_colitis","Lupus"))
bigplot=ggplot(data.df, aes(x=gwas,y=-log10(Coefficient_P_value), color=Name)) +
        labs(y="-log10(Coefficient P-value)")+
        geom_point(size=3) + coord_flip()+ scale_color_brewer(palette="Set3")+ theme_bw()


bigplot2=ggplot(data.df, aes(x=gwas,y=Name,color=-log10(Coefficient_P_value))) +
  xlab("")+ ylab("")+ geom_point(size=3) +theme_classic()+scale_color_gradient2(high = '#3182bd',low = "#de2d26")


bigplot3=ggplot(data.df, aes(x=gwas,y=Name,fill=-log10(Coefficient_P_value))) +
  xlab("")+ ylab("")+ geom_tile() +theme_classic()+scale_color_gradient2(high = '#3182bd',low = "#de2d26")




ggsave("resuts_sc_gwas_no_control.pdf", bigplot2)
ggsave("resuts_sc_gwas_no_control.png", bigplot2,dpi = 300,width = 20,height = 10,units = "in")



#comparison for the same just BH
library(stringr)
human_all_atac<-readRDS("active_use_objects/Select_human_tissues.rds")
mouse_select_atac<-readRDS("active_use_objects/Select_mouse_tissues.rds")

PASS_filt_files<-list.files("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/")
PASS_filt_files2<-list.files("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/blood")
PASS_filt_files3<-list.files("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/heart/")
PASS_filt_files4<-list.files("/home/torkenczyk/LD/unformatted_sumstats/UKBB_matched/filtered/respiratory/")
PASS_filt_files5<-list.files("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/metabolic_dis/")
PASS_filt_files6<-list.files("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/metabolic_norm/")

counter=0
hypergeom_test_all<-data.frame(group=character(),celltype=character(),hgtest=double(),BH=double,pt=character())
human_matched_list<-list()
mouse_matched_list<-list()


files1<-paste0("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/",PASS_filt_files)
files2<-paste0("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/blood/",PASS_filt_files2)
files3<-paste0("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/heart/",PASS_filt_files3)
files4<-paste0("/home/torkenczyk/LD/unformatted_sumstats/UKBB_matched/filtered/respiratory/",PASS_filt_files4)
files5<-paste0("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/metabolic_dis/",PASS_filt_files5)
files6<-paste0("/home/torkenczyk/LD/LD_reg_sumstats/all_PASS_sumstats/matched/metabolic_norm/",PASS_filt_files6)


files<-c(files1,files2,files3,files4,files5,files6)
files<-files[-1]
files<-files[-1]
files<-files[-13]
files<-files[-12]
names_files<-str_split_fixed(files, "_", 2)[,2]
names_files<-str_split_fixed(names_files, "\\.", 3)[,1]
names_files<-str_split_fixed(names_files, "MATCHED_", 3)[,2]


for (gwas in files){
print(gwas)
counter=counter+1
final<-read.table(file=gwas)
gwas<-paste0("MATCHED",str_split_fixed(gwas, "MATCHED", 2)[,2])
#final<-read.table(file=paste0("/home/torkenczyk/LD/unformatted_sumstats/original/MATCHED_celiac_original.sumstats.gz"))
#final<-read.table(file=paste0("/home/torkenczyk/LD/unformatted_sumstats/original/PASS_Ulcerative_Colitis.matched.sumstats.gz"))
if(gwas=="MATCHED_Type_1_Diabetes.sumstats.gz")
{
final$p<-pchisq(q = final$V7,df= 1 , lower.tail = FALSE)
} else if(gwas=="MATCHED_ALLERGY_ECZEMA_DIAGNOSED.sumstats.gz_txt.gz" | gwas=="MATCHED_ASTHMA_DIAGNOSED.sumstats.gz_txt.gz" | gwas== "MATCHED_AUTIMMUNE_ALL.sumstats.gz_txt.gz"){
final$p<-final$V4
}  else if(gwas %in% PASS_filt_files2 | gwas %in% PASS_filt_files3 | gwas %in% PASS_filt_files4 | gwas %in% PASS_filt_files5) {final$p<-final$V4 }else {
final$p<-pchisq(q = final$V9,df= 1 , lower.tail = FALSE)  
}
final<-na.omit(final[final$p<1e-3,])
#I ended up filtering these so P<1e-7 probably filter for MHA as well
#chr6:28510120-33480577

final_str<-unique(StringToGRanges(paste(final$V1,final$V2,final$V3,sep = "-"),sep = c("-","-")))
HLA<-StringToGRanges("chr6-28510120-33480577")
HLA_overlaps<-unique(queryHits(findOverlaps(subject = HLA,query = final_str)))
if(length(HLA_overlaps)>0){
final_str<-final_str[-unique(queryHits(findOverlaps(subject = HLA,query = final_str)))]
}
all_peaks<-StringToGRanges(row.names(human_all_atac))

#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
print(i)
  #shared
querypos<-unique(StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal)))

mpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(all_peaks)))
xpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(querypos)))
m<-length(unique(queryHits(mpre)))
x<-length(unique(queryHits(xpre)))

print(paste0("Background: ",m))
print(paste0("enrichment in shared: ",x))
shared_sites_with_snps<-sort(querypos)[(queryHits(findOverlaps(subject = final_str,query = sort(querypos))))]
snps_in_sh_sites<-final_str[(subjectHits(findOverlaps(subject = final_str,query = sort(querypos))))]
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
#mouse
querypos<-unique(StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal)))
xpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(querypos)))
x<-length(unique(queryHits(xpre)))
print(paste0("enrichment in mouse: ",x))
snps_in_mo_sites<-final_str[(subjectHits(findOverlaps(subject = final_str,query = sort(querypos))))]
mouse_sites_with_snps<-sort(querypos)[(queryHits(findOverlaps(subject = final_str,query = sort(querypos))))]
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-unique(StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal)))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
xpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(querypos)))
x<-length(unique(queryHits(xpre)))
print(paste0("enrichment in human: ",x))
snps_in_hu_sites<-final_str[(subjectHits(findOverlaps(subject = final_str,query = sort(querypos))))]
human_sites_with_snps<-sort(querypos)[(queryHits(findOverlaps(subject = final_str,query = sort(querypos))))]
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

#test all combined

querypos<-sort(StringToGRanges(c(shared_DA[[i]]$feature_hg38_universal,human_DA[[i]]$feature_hg38_universal,mouse_DA[[i]]$feature_hg38_universal)))

mpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(all_peaks)))
xpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(querypos)))
m<-length(unique(queryHits(mpre)))
x<-length(unique(queryHits(xpre)))

print(paste0("Background: ",m))
print(paste0("enrichment in everything merged: ",x))
sh<-data.frame(group="merged",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

#hypergeom_P<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle(" Ulcerative colitis (10-9) PREFILT GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-names_files[counter]
hypergeom_test_all<-rbind(hypergeom_test_all,hypergeom_test)

#now the chromvar
have_reads_h<-human_all_atac[["cre"]][[]][human_all_atac[["cre"]][[]]$count>0,]
have_reads_m<-mouse_select_atac[["cre"]][[]][mouse_select_atac[["cre"]][[]]$count>0,]

OL_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(OL_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(OL_str)

human_matched_list[[paste0(names_files[counter])]]=himatched_h
mouse_matched_list[[paste0(names_files[counter])]]=himatched_m
}

#this is still chromvar
human_matched_df<-as.data.frame(human_matched_list)
mouse_matched_df<-as.data.frame(mouse_matched_list)
#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h <- getAnnotations(annotations = human_matched_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
chromvar.h_all<-chromvar.h
human_all_atac[["Deviation_immune"]] <- CreateAssayObject(data = chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_immune"

chromvar_AF_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Atrial Fibrillation deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m<- getAnnotations(annotations = mouse_matched_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
chromvar.m_all<-chromvar.m
mouse_select_atac[["Deviation_AF"]] <- CreateAssayObject(data = chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_AF"



#reordering hypergeom test
hypergeom_test_all$annot<-paste0(hypergeom_test_all$celltype,"_",hypergeom_test_all$group)
hypergeom_test_all$annot<-factor(hypergeom_test_all$annot,levels = c("T-lymphocytes_human","T-lymphocytes_mouse","T-lymphocytes_shared","B-lymphocytes_human","B-lymphocytes_mouse","B-lymphocytes_shared","Macrophages_human","Macrophages_mouse","Macrophages_shared","Endothelial cells_human","Endothelial cells_mouse","Endothelial cells_shared","Smooth muscle cells_human","Smooth muscle cells_mouse","Smooth muscle cells_shared","Enterocytes_human","Enterocytes_mouse","Enterocytes_shared","Goblet cells_human","Goblet cells_mouse","Goblet cells_shared","Hepatocytes_human","Hepatocytes_mouse","Hepatocytes_shared","Fibroblasts_human","Fibroblasts_mouse","Fibroblasts_shared","Myofibroblasts_human","Myofibroblasts_mouse","Myofibroblasts_shared","Cardiomyocytes_human","Cardiomyocytes_mouse","Cardiomyocytes_shared","Pneumocytes_human","Pneumocytes_mouse","Pneumocytes_shared","Schwann cells_human","Schwann cells_mouse","Schwann cells_shared"))

hypergeom_test_all$pt2=factor(hypergeom_test_all$pt, levels=c("AUTIMMUNE_ALL","ALLERGY_ECZEMA_DIAGNOSED","ASTHMA_DIAGNOSED","Primary_biliary_cirrhosis","celiac", "Crohns_Disease","Multiple_sclerosis", "Rheumatoid_Arthritis", "Type_1_Diabetes","Ulcerative_Colitis","Lupus"))

#reordering ldsc
ldsc_test_all<-data.df
ldsc_test_all$annot<-factor(ldsc_test_all$Name,levels = c("T-lymphocytes_unique_h","T-lymphocytes_unique_m","T-lymphocytes_shared","B-lymphocytes_unique_h","B-lymphocytes_unique_m","B-lymphocytes_shared","Macrophages_unique_h","Macrophages_unique_m","Macrophages_share","Endothelial_cells_unique_h","Endothelial_cells_unique_m","Endothelial_cells_shared","Smooth_muscle_cells_unique_h","Smooth_muscle_cells_unique_m","Smooth_muscle_cells_share","Enterocytes_unique_h","Enterocytes_unique_m","Enterocytes_shared","Goblet_cells_unique_h","Goblet_cells_unique_m","Goblet_cells_shared","Hepatocytes_unique_h","Hepatocytes_unique_m","Hepatocytes_shared","Fibroblasts_unique_h","Fibroblasts_unique_m","Fibroblasts_shared","Myofibroblasts_unique_h","Myofibroblasts_unique_m","Myofibroblasts_share","Cardiomyocytes_unique_h","Cardiomyocytes_unique_m","Cardiomyocytes_shared","Pneumocytes_unique_h","Pneumocytes_unique_m","Pneumocytes_shared","Schwann_cells_unique_h","Schwann_cells_unique_m","Schwann_cells_shared"))
ldsc_test_all$BH<-NA
for (i in levels(as.factor(ldsc_test_all$gwas))){
ldsc_test_all[which(ldsc_test_all$gwas==i),7]<-p.adjust(p=ldsc_test_all[which(ldsc_test_all$gwas==i),4],method = "BH")
}

ldsc_test_all$BH_all<-p.adjust(p=ldsc_test_all$Coefficient_P_value,method = "BH")
hypergeom_test_all$BH_all<-p.adjust(p=hypergeom_test_all$hgtest,method = "BH")

BH_plot<-ggplot(hypergeom_test_all,aes(x=annot,y=pt2,fill=-log10(BH)))+geom_tile()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+ylab("")+xlab("")+coord_flip()+ggtitle("Hypergeom test bh within")+theme(legend.position="top")

BH_plot2<-ggplot(hypergeom_test_all,aes(x=annot,y=pt,fill=-log10(BH)))+geom_tile()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+ylab("")+xlab("")+coord_flip()+ggtitle("Hypergeom test bh over all")+theme(legend.position="top")

LDSC_plot<-ggplot(ldsc_test_all,aes(y=annot,x=gwas,fill=-log10(BH)))+geom_tile()+ylab("")+xlab("")+ggtitle("LDSC test")+ theme(legend.position="top",axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

BH_plot+LDSC_plot
hypergeom_test_all$log10=-log10(hypergeom_test_all$BH)
hgmatrix<-dcast(hypergeom_test_all, pt~annot, value.var="log10")
row.names(hgmatrix)<-hgmatrix$pt
hgmatrix$pt<-NULL

hgmatrix<-as.matrix(hgmatrix)
hgmatrix[is.infinite(hgmatrix)]<-15
Heatmap(hgmatrix)


Heatmap(na.omit(t(scale(t(hgmatrix)))),cluster_columns = F)


#now lets see the chromvar
#do it chromvar stile
#mouse
groups<-list(mouse_select_atac$handannot)
mchr<-t(aggregate(as.data.frame(t(chromvar.m_all)),by=groups,FUN=mean,na.rm = TRUE))
 head(mchr)
colnames(mchr)<-mchr[1,]
mchr<-mchr[-1,]
m_f<-as.data.frame(apply(mchr,1,as.numeric))
row.names(m_f)<-colnames(mchr)

groups<-list(human_all_atac$handannot)
hchr<-t(aggregate(as.data.frame(t(chromvar.h_all)),by=groups,FUN=mean,na.rm = TRUE))
 head(mchr)

colnames(hchr)<-hchr[1,]
hchr<-hchr[-1,]
h_f<-as.data.frame(apply(hchr,1,as.numeric))
row.names(h_f)<-colnames(hchr)

Heatmap(m_f)+Heatmap(h_f)

```

#looking into the heart 50s recover
```{r}
#i=card
#gwas 50s heart rec

ClosestFeature(human_sites_with_snps,object = human_all_atac)
ClosestFeature(snps_in_hu_sites,object = human_all_atac)
snps_in_hu_sites
plot_combined_cross_species(gene = "ALG10B",highlight_human_reg=human_sites_with_snps[10],validate = T,upstr = 1000,downstr = 1000)  
plot_combined_cross_species(gene = "ESRRG",highlight_human_reg=human_sites_with_snps[1],validate = T,upstr = 1000,downstr = 1000)  


genehancerloc<-StringToGRanges(paste(genehancer$V1,genehancer$V2,genehancer$V3,sep = "-"),sep = c("-","-"))
human_hr_genehancerloc<-subjectHits(findOverlaps(human_sites_with_snps,genehancerloc))
genehancer_hr_hu<-genehancer[human_hr_genehancerloc,]

shared_hr_genehancerloc<-subjectHits(findOverlaps(shared_sites_with_snps,genehancerloc))

genehancer_hr_sh<-genehancer[shared_hr_genehancerloc,]


ClosestFeature(shared_sites_with_snps,object = human_all_atac)
ClosestFeature(mouse_sites_with_snps,object = human_all_atac)


```


Automated GWAS for UKBB
```{r}
library(stringr)
human_all_atac<-readRDS("active_use_objects/Select_human_tissues.rds")
mouse_select_atac<-readRDS("active_use_objects/Select_mouse_tissues.rds")


UKBB_files<-list.files("/home/torkenczyk/LD/unformatted_sumstats/UKBB_matched/filtered/")

names_files<-str_split_fixed(UKBB_files, "_", 3)[,2]
names_files<-str_split_fixed(names_files, "\\.", 3)[,1]
counter=0

hypergeom_test_all<-data.frame(group=character(),celltype=character(),hgtest=double(),BH=double,pt=character())

for (gwas in UKBB_files){
print(gwas)
counter=counter+1
final<-read.table(file=paste0("/home/torkenczyk/LD/unformatted_sumstats/UKBB_matched/filtered/",gwas))

final<-read.table(file=paste0("/home/torkenczyk/LD/unformatted_sumstats/original/MATCHED_celiac_original.sumstats.gz"))
final<-read.table(file=paste0("/home/torkenczyk/LD/unformatted_sumstats/original/PASS_Ulcerative_Colitis.matched.sumstats.gz"))
final$p<-pchisq(q = final$V9,df= 1 , lower.tail = FALSE)
final<-final[final$p<1e-3,]
#I ended up filtering these so P<1e-7 probably filter for MHA as well
#chr6:28510120-33480577

final_str<-StringToGRanges(paste(final$V1,final$V2,final$V3,sep = "-"),sep = c("-","-"))
HLA<-StringToGRanges("chr6-28510120-33480577")
HLA_overlaps<-unique(queryHits(findOverlaps(subject = HLA,query = final_str)))
if(length(HLA_overlaps)>0){
final_str<-final_str[-unique(queryHits(findOverlaps(subject = HLA,query = final_str)))]
}
all_peaks<-StringToGRanges(row.names(human_all_atac))

#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
print(i)
querypos<-StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal))

mpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(all_peaks)))
xpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(querypos)))
m<-length(unique(queryHits(mpre)))
x<-length(unique(queryHits(xpre)))

print(paste0("Background: ",m))
print(paste0("enrichment in shared: ",x))
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
querypos<-StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal))
xpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(querypos)))
x<-length(unique(queryHits(xpre)))
print(paste0("enrichment in mouse: ",x))
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
xpre<-suppressWarnings(findOverlaps(subject = final_str,query = sort(querypos)))
x<-length(unique(queryHits(xpre)))
print(paste0("enrichment in human: ",x))
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

hypergeom_P<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle(" Ulcerative colitis (10-9) PREFILT GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-names_files[counter]
hypergeom_test_all<-rbind(hypergeom_test_all,hypergeom_test)
}


hypergeom_test_all$annot<-paste0(hypergeom_test_all$celltype,"_",hypergeom_test_all$group)

ggplot(hypergeom_test_all,aes(x=annot,y=pt,fill=-log10(BH)))+geom_tile()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+ylab("")+xlab("")  
hypergeom_test_all$logp=-log10(hypergeom_test_all$BH)
second<-dcast(hypergeom_test_all, pt~annot, value.var="BH")
row.names(second)<-second$pt
second$pt<-NULL
m<-as.matrix(t(scale(t(second))))
Heatmap(m,cluster_columns = F)

#do it chromvar stile

have_reads_h<-human_all_atac[["cre"]][[]][human_all_atac[["cre"]][[]]$count>0,]
have_reads_m<-mouse_select_atac[["cre"]][[]][mouse_select_atac[["cre"]][[]]$count>0,]

AF_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(AF_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(AF_str)

human_matched_h_df <- data.frame(AF=himatched_h)
human_matched_m_df <- data.frame(AF=himatched_m)


#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
chromvar.h_all<-chromvar.h
human_all_atac[["Deviation_AF"]] <- CreateAssayObject(data = chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_AF"

chromvar_AF_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Atrial Fibrillation deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
chromvar.m_all<-chromvar.m
mouse_select_atac[["Deviation_AF"]] <- CreateAssayObject(data = chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_AF"

chromvar_AF_m<-VlnPlot(mouse_select_atac, features = row.names(mouse_select_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Atrial Fibrillation deviation over all sites in mouse")+theme(legend.position = "none")+xlab(label = "")


pAF<-hypergeom_P_AF|chromvar_AF_h | chromvar_AF_m
}

```







GWAS analysis
```{r}
human_all_atac<-readRDS("active_use_objects/Select_human_tissues.rds")
mouse_select_atac<-readRDS("active_use_objects/Select_mouse_tissues.rds")

library(rsnps)
CR_example_sumstats_CARD<-read.delim("/home/torkenczyk/LD/LD_reg_sumstats/Afib.txt")
CR_example_sumstats_CARD$p<-pchisq(q = CR_example_sumstats_CARD$CHISQ,df= 1 , lower.tail = FALSE)
CR_example_sumstats_BMI<-read.delim("/home/torkenczyk/LD/LD_reg_sumstats/body_BMIz.sumstats.gz")

SNP_coordinates<-read.delim(header = F,file="/home/torkenczyk/LD/snp_pos/snp141.txt.gz")

BMI_PASS<-CR_example_sumstats_BMI[which(CR_example_sumstats_BMI$P<1e-7),]
CARD_PASS<-CR_example_sumstats_CARD[which(CR_example_sumstats_CARD$Pvalue<1e-7),]

AF_h38<-SNP_coordinates[match(CARD_PASS$rs_dbSNP147,SNP_coordinates$V5),]
AF_h38$SNP<-AF_h38$V5
CR_example_sumstats_CARD$SNP<-CR_example_sumstats_CARD$rs_dbSNP147
AF_h38<-merge(AF_h38,CR_example_sumstats_CARD,by="SNP")

final<-data.frame(V1=AF_h38$V2,V2=AF_h38$V3,V3=AF_h38$V4,V4=rep("AF",times=length(AF_h38$V2)),V5=AF_h38$Pvalue)

final<-na.omit(final)
write.table(final,file="/home/torkenczyk/LD/snp_pos/AF_Final.hg38.pod.txt")

#up until here first attempt at matching, better with scripting language

#run from here

human_all_atac<-readRDS("active_use_objects/Select_human_tissues.rds")
mouse_select_atac<-readRDS("active_use_objects/Select_mouse_tissues.rds")

final<-read.table(file="/home/torkenczyk/LD/snp_pos/AF_Final.hg38.pod.txt")

final_str<-StringToGRanges(paste(final$V1,final$V2,final$V3,sep = "-"),sep = c("-","-"))
all_peaks<-StringToGRanges(row.names(human_all_atac))

#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
  print(i)
querypos<-StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
querypos<-StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

hypergeom_P_AF<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle("Atrial Fibrillation GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-"Atrial Fibrillation"
hypergeom_test_all<-hypergeom_test


#do it chromvar stile

have_reads_h<-human_all_atac[["cre"]][[]][human_all_atac[["cre"]][[]]$count>0,]
have_reads_m<-mouse_select_atac[["cre"]][[]][mouse_select_atac[["cre"]][[]]$count>0,]

AF_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(AF_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(AF_str)

human_matched_h_df <- data.frame(AF=himatched_h)
human_matched_m_df <- data.frame(AF=himatched_m)


#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
chromvar.h_all<-chromvar.h
human_all_atac[["Deviation_AF"]] <- CreateAssayObject(data = chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_AF"

chromvar_AF_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Atrial Fibrillation deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
chromvar.m_all<-chromvar.m
mouse_select_atac[["Deviation_AF"]] <- CreateAssayObject(data = chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_AF"

chromvar_AF_m<-VlnPlot(mouse_select_atac, features = row.names(mouse_select_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Atrial Fibrillation deviation over all sites in mouse")+theme(legend.position = "none")+xlab(label = "")


pAF<-hypergeom_P_AF|chromvar_AF_h | chromvar_AF_m
#try with UC

CR_example_sumstats_UC<-read.delim("/home/torkenczyk/LD/LD_reg_sumstats/UC_hg38.txt",header=F)
CR_example_sumstats_UC$p<-pchisq(q = CR_example_sumstats_UC$V9,df= 1 , lower.tail = FALSE)
UC_PASS<-CR_example_sumstats_UC[which(CR_example_sumstats_UC$p<1e-3),]

final_str<-StringToGRanges(paste0(UC_PASS$V1,":",UC_PASS$V2,"-",UC_PASS$V3),sep = c(":","-"))


#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
  print(i)
querypos<-StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
querypos<-StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

hypergeom_P_UC<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle("Ulcerative colitis GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-"Ulcerative colitis"
hypergeom_test_all<-rbind(hypergeom_test_all,hypergeom_test)

UC_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(UC_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(UC_str)

human_matched_h_df <- data.frame(UC=himatched_h)
human_matched_m_df <- data.frame(UC=himatched_m)


#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
chromvar.h_all<-rbind(chromvar.h_all,chromvar.h)
human_all_atac[["Deviation_UC"]] <- CreateAssayObject(data = chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_UC"

chromvar_UC_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Ulcerative colitis deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
mouse_select_atac[["Deviation_UC"]] <- CreateAssayObject(data = chromvar.m)
chromvar.m_all<-rbind(chromvar.m_all,chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_UC"

chromvar_UC_m<-VlnPlot(mouse_select_atac, features = row.names(mouse_select_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Ulcerative colitis deviation over all sites in mouse")+theme(legend.position = "none")+xlab(label = "")

pUC<-hypergeom_P_UC|chromvar_UC_h |chromvar_UC_m


#try with RA

CR_example_sumstats_RA<-read.delim("/home/torkenczyk/LD/LD_reg_sumstats/RA_hg38.txt",header=F)
CR_example_sumstats_RA$p<-pchisq(q = CR_example_sumstats_RA$V9,df= 1 , lower.tail = FALSE)
RA_PASS<-CR_example_sumstats_RA[which(CR_example_sumstats_RA$p<1e-3),]

final_str<-StringToGRanges(paste0(RA_PASS$V1,":",RA_PASS$V2,"-",RA_PASS$V3),sep = c(":","-"))


#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
  print(i)
querypos<-StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
querypos<-StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

hypergeom_P_RA<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle("Rheumatoid Arthritis GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-"Rheumatoid Arthritis"
hypergeom_test_all<-rbind(hypergeom_test_all,hypergeom_test)

RA_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(RA_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(RA_str)

human_matched_h_df <- data.frame(RA=himatched_h)
human_matched_m_df <- data.frame(RA=himatched_m)


#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
human_all_atac[["Deviation_RA"]] <- CreateAssayObject(data = chromvar.h)
chromvar.h_all<-rbind(chromvar.h_all,chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_RA"

chromvar_RA_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Rheumatoid Arthritis deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
mouse_select_atac[["Deviation_RA"]] <- CreateAssayObject(data = chromvar.m)
chromvar.m_all<-rbind(chromvar.m_all,chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_RA"

chromvar_RA_m<-VlnPlot(mouse_select_atac, features = row.names(mouse_select_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Rheumatoid Arthritis deviation over all sites in mouse")+theme(legend.position = "none")+xlab(label = "")

pRA<-hypergeom_P_RA|chromvar_RA_h | chromvar_RA_m

#try with Crohns dis

CR_example_sumstats_CR<-read.delim("/home/torkenczyk/LD/LD_reg_sumstats/CR_hg38.txt",header=F)
CR_example_sumstats_CR$p<-pchisq(q = CR_example_sumstats_CR$V9,df= 1 , lower.tail = FALSE)
CR_PASS<-CR_example_sumstats_CR[which(CR_example_sumstats_CR$p<1e-3),]

final_str<-StringToGRanges(paste0(CR_PASS$V1,":",CR_PASS$V2,"-",CR_PASS$V3),sep = c(":","-"))


#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
  print(i)
querypos<-StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
querypos<-StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

hypergeom_P_CR<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle("Crohns disease GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-"Crohns disease"
hypergeom_test_all<-rbind(hypergeom_test_all,hypergeom_test)


CR_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(CR_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(CR_str)

human_matched_h_df <- data.frame(CR=himatched_h)
human_matched_m_df <- data.frame(CR=himatched_m)


#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
human_all_atac[["Deviation_CR"]] <- CreateAssayObject(data = chromvar.h)
chromvar.h_all<-rbind(chromvar.h_all,chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_CR"

chromvar_CR_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Crohns disease deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
mouse_select_atac[["Deviation_CR"]] <- CreateAssayObject(data = chromvar.m)
chromvar.m_all<-rbind(chromvar.m_all,chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_CR"

chromvar_CR_m<-VlnPlot(mouse_select_atac, features = row.names(mouse_select_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Crohns disease deviation over all sites in mouse")+theme(legend.position = "none")+xlab(label = "")

pCR<-hypergeom_P_CR|chromvar_CR_h | chromvar_CR_m

#try with Coronary dis

CR_example_sumstats_CO<-read.delim("/home/torkenczyk/LD/LD_reg_sumstats/CO_hg38.txt",header=F)
CR_example_sumstats_CO$p<-pchisq(q = CR_example_sumstats_CO$V9,df= 1 , lower.tail = FALSE)
CO_PASS<-CR_example_sumstats_CO[which(CR_example_sumstats_CO$p<1e-3),]

final_str<-StringToGRanges(paste0(CO_PASS$V1,":",CO_PASS$V2,"-",CO_PASS$V3),sep = c(":","-"))

#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
  print(i)
querypos<-StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
querypos<-StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

hypergeom_P_CO<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle("Coronary Heart Disease GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-"Coronary Heart Disease"
hypergeom_test_all<-rbind(hypergeom_test_all,hypergeom_test)


CO_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(CO_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(CO_str)

human_matched_h_df <- data.frame(CO=himatched_h)
human_matched_m_df <- data.frame(CO=himatched_m)


#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
human_all_atac[["Deviation_CO"]] <- CreateAssayObject(data = chromvar.h)
chromvar.h_all<-rbind(chromvar.h_all,chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_CO"

chromvar_CO_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Coronary Heart Disease deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
mouse_select_atac[["Deviation_CO"]] <- CreateAssayObject(data = chromvar.m)
chromvar.m_all<-rbind(chromvar.m_all,chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_CO"

chromvar_CO_m<-VlnPlot(mouse_select_atac, features = row.names(mouse_select_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Coronary Heart Disease deviation over all sites in mouse")+theme(legend.position = "none")+xlab(label = "")

pCO<-hypergeom_P_CO|chromvar_CO_h | chromvar_CO_m

#try with Depressive symptoms

CR_example_sumstats_DS<-read.delim("/home/torkenczyk/LD/LD_reg_sumstats/DS_hg38.txt",header=F)
CR_example_sumstats_DS$p<-pchisq(q = CR_example_sumstats_DS$V9,df= 1 , lower.tail = FALSE)
DS_PASS<-CR_example_sumstats_DS[which(CR_example_sumstats_DS$p<1e-3),]

final_str<-StringToGRanges(paste0(DS_PASS$V1,":",DS_PASS$V2,"-",DS_PASS$V3),sep = c(":","-"))

#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
  print(i)
querypos<-StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
querypos<-StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

hypergeom_P_DS<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle("Depressive symptoms GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-"Depressive symptoms"
hypergeom_test_all<-rbind(hypergeom_test_all,hypergeom_test)


DS_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(DS_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(DS_str)

human_matched_h_df <- data.frame(DS=himatched_h)
human_matched_m_df <- data.frame(DS=himatched_m)


#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
human_all_atac[["Deviation_DS"]] <- CreateAssayObject(data = chromvar.h)
chromvar.h_all<-rbind(chromvar.h_all,chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_DS"

chromvar_DS_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Depressive symptoms deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
mouse_select_atac[["Deviation_DS"]] <- CreateAssayObject(data = chromvar.m)
chromvar.m_all<-rbind(chromvar.m_all,chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_DS"

chromvar_DS_m<-VlnPlot(mouse_select_atac, features = row.names(mouse_select_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Depressive symptoms deviation over all sites in mouse")+theme(legend.position = "none")+xlab(label = "")

pDS<-hypergeom_P_DS|chromvar_DS_h | chromvar_DS_m

#try with Fasting Glucose

CR_example_sumstats_FG<-read.delim("/home/torkenczyk/LD/LD_reg_sumstats/FG_hg38.txt",header=F)
CR_example_sumstats_FG$p<-pchisq(q = CR_example_sumstats_FG$V9,df= 1 , lower.tail = FALSE)
FG_PASS<-CR_example_sumstats_FG[which(CR_example_sumstats_FG$p<1e-3),]

final_str<-StringToGRanges(paste0(FG_PASS$V1,":",FG_PASS$V2,"-",FG_PASS$V3),sep = c(":","-"))

#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
  print(i)
querypos<-StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
querypos<-StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

hypergeom_P_FG<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle("Fasting Glucose GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-"Fasting Glucose"
hypergeom_test_all<-rbind(hypergeom_test_all,hypergeom_test)


FG_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(FG_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(FG_str)

human_matched_h_df <- data.frame(FG=himatched_h)
human_matched_m_df <- data.frame(FG=himatched_m)


#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
human_all_atac[["Deviation_FG"]] <- CreateAssayObject(data = chromvar.h)
chromvar.h_all<-rbind(chromvar.h_all,chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_FG"

chromvar_FG_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Fasting Glucose deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
mouse_select_atac[["Deviation_FG"]] <- CreateAssayObject(data = chromvar.m)
chromvar.m_all<-rbind(chromvar.m_all,chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_FG"

chromvar_FG_m<-VlnPlot(mouse_select_atac, features = row.names(mouse_select_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Fasting Glucose deviation over all sites in mouse")+theme(legend.position = "none")+xlab(label = "")

pFG<-hypergeom_P_FG|chromvar_FG_h | chromvar_FG_m

#try with Ever smoked

CR_example_sumstats_ES<-read.delim("/home/torkenczyk/LD/LD_reg_sumstats/ES_hg38.txt",header=F)
CR_example_sumstats_ES$p<-pchisq(q = CR_example_sumstats_ES$V9,df= 1 , lower.tail = FALSE)
ES_PASS<-CR_example_sumstats_ES[which(CR_example_sumstats_ES$p<1e-3),]

final_str<-StringToGRanges(paste0(ES_PASS$V1,":",ES_PASS$V2,"-",ES_PASS$V3),sep = c(":","-"))

#easy hypergeom
hypergeom_test=data.frame(celltype=character(),group=character(),hgtest=double())
for (i in names(shared_DA))
{
  print(i)
querypos<-StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
sh<-data.frame(group="shared",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
querypos<-StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
ms<-data.frame(group="mouse",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,ms)

querypos<-StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal))
m<-length(unique(queryHits(findOverlaps(subject = final_str,query = all_peaks))))
x<-length(unique(queryHits(findOverlaps(subject = final_str,query = sort(querypos)))))
hs<-data.frame(group="human",celltype=i,hgtest=(1-phyper(x-1,m,753741-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,hs)

}
hypergeom_test$BH<-p.adjust(p=hypergeom_test$hgtest,method = "BH")

hypergeom_P_ES<-ggplot(hypergeom_test,aes(x=celltype,fill=group,y=-log10(BH)))+geom_bar(stat = "identity",position = "dodge")+theme_classic()+coord_flip()+ggtitle("Ever Smoked GWAS enrichment in DA sites")+xlab(label = "")
hypergeom_test$pt<-"Ever Smoked"
hypergeom_test_all<-rbind(hypergeom_test_all,hypergeom_test)


ES_str<-all_peaks[unique(queryHits(findOverlaps(subject = final_str,query = all_peaks)))]
himatched_h<-row.names(have_reads_h) %in% GRangesToString(ES_str)
himatched_m<-row.names(have_reads_m) %in% GRangesToString(ES_str)

human_matched_h_df <- data.frame(ES=himatched_h)
human_matched_m_df <- data.frame(ES=himatched_m)


#in human
rowRanges<-StringToGRanges(row.names(have_reads_h))
anno_h_h <- getAnnotations(annotations = human_matched_h_df, rowRanges = rowRanges)
fragments_h <- SummarizedExperiment(assays = list(counts = GetAssayData(human_all_atac, assay = "cre", slot = "counts")[row.names(have_reads_h),]), rowRanges = rowRanges)
fragments_h <- filterPeaks(fragments_h, non_overlapping = TRUE)
fragments_h <- addGCBias(fragments_h, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_h <- computeDeviations(object = fragments_h, annotations = anno_h_h)
chromvar.h <- SummarizedExperiment::assays(dev_h_h)[[2]]
human_all_atac[["Deviation_ES"]] <- CreateAssayObject(data = chromvar.h)
chromvar.h_all<-rbind(chromvar.h_all,chromvar.h)
DefaultAssay(human_all_atac)<-"Deviation_ES"

chromvar_ES_h<-VlnPlot(human_all_atac, features = row.names(human_all_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Ever Smoked deviation over all sites in human")+theme(legend.position = "none")+xlab(label = "")

#in mouse
rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m_m <- getAnnotations(annotations = human_matched_m_df, rowRanges = rowRanges)
fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(mouse_select_atac, assay = "cre", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg38)
dev_h_m <- computeDeviations(object = fragments_m, annotations = anno_m_m)
chromvar.m <- SummarizedExperiment::assays(dev_h_m)[[2]]
mouse_select_atac[["Deviation_ES"]] <- CreateAssayObject(data = chromvar.m)
chromvar.m_all<-rbind(chromvar.m_all,chromvar.m)
DefaultAssay(mouse_select_atac)<-"Deviation_ES"

chromvar_ES_m<-VlnPlot(mouse_select_atac, features = row.names(mouse_select_atac)[1],pt.size = 0)+geom_boxplot()+ggtitle("Ever Smoked deviation over all sites in mouse")+theme(legend.position = "none")+xlab(label = "")

pES<-hypergeom_P_ES|chromvar_ES_h | chromvar_ES_m

hypergeom_test_all$annot<-paste0(hypergeom_test_all$celltype,"_",hypergeom_test_all$group)

ggplot(hypergeom_test_all,aes(x=annot,y=pt,fill=-log10(BH)))+geom_tile()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+ylab("")+xlab("")  

groups<-list(mouse_select_atac$handannot)

mchr<-t(aggregate(as.data.frame(t(chromvar.m_all)),by=groups,FUN=mean,na.rm = TRUE))
 head(mchr)

colnames(mchr)<-mchr[1,]
mchr<-mchr[-1,]
m_f<-as.data.frame(apply(mchr,1,as.numeric))
row.names(m_f)<-colnames(mchr)


Heatmap(m_f) 
 


groups<-list(human_all_atac$handannot)

hchr<-t(aggregate(as.data.frame(t(chromvar.h_all)),by=groups,FUN=mean,na.rm = TRUE))
 head(mchr)

colnames(hchr)<-hchr[1,]
hchr<-hchr[-1,]
h_f<-as.data.frame(apply(hchr,1,as.numeric))
row.names(h_f)<-colnames(hchr)

Heatmap(m_f)+Heatmap(h_f)
  
```


#write out unique shared and sites
```{r}
load("active_use_objects/for_rahul/Mouse_only.bw.species.DA.RData")
load("active_use_objects/for_rahul/Human_only.bw.species.DA.RData")
load("active_use_objects/for_rahul/Shared.bw.species.DA.RData")

int_ist<-row.names(human_all_atac)
int_bed<-data.frame(chr=str_split_fixed(int_ist,"-",n=3)[,1],start=str_split_fixed(int_ist,"-",n=3)[,2],end=str_split_fixed(int_ist,"-",n=3)[,3])
write.table(int_bed,file = paste0("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/ALL.bg.hg38.bed"),quote = F,sep = "\t",row.names = F,col.names = F)



for (ct in names(shared_DA)){
print(ct)
clusth<-human_DA[[ct]]$feature_hg38_universal
clustm<-mouse_DA[[ct]]$feature_hg38_universal
int_ist<-shared_DA[[ct]]$feature_hg38_universal
int_ist<-GRangesToString(unique(sort(StringToGRanges(int_ist))))
int_bed<-data.frame(chr=str_split_fixed(int_ist,"-",n=3)[,1],start=str_split_fixed(int_ist,"-",n=3)[,2],end=str_split_fixed(int_ist,"-",n=3)[,3])
write.table(int_bed,file = paste0("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Shared2celline.",ct,".bed"),quote = F,sep = "\t",row.names = F,col.names = F)
unint_ist_m<-GRangesToString(unique(sort(StringToGRanges(clustm))))
unint_ist_h<-GRangesToString(unique(sort(StringToGRanges(clusth))))
#for LD remove Y but for others not necessary
#unint_ist_m<-unint_ist_m[which(seqnames(StringToGRanges(unint_ist_m))!="chrY")]
#unint_ist_h<-unint_ist_h[which(seqnames(StringToGRanges(unint_ist_h))!="chrY")]
unintint_bed_m<-data.frame(chr=str_split_fixed(unint_ist_m,"-",n=3)[,1],start=str_split_fixed(unint_ist_m,"-",n=3)[,2],end=str_split_fixed(unint_ist_m,"-",n=3)[,3])
unintint_bed_h<-data.frame(chr=str_split_fixed(unint_ist_h,"-",n=3)[,1],start=str_split_fixed(unint_ist_h,"-",n=3)[,2],end=str_split_fixed(unint_ist_h,"-",n=3)[,3])
write.table(unintint_bed_h,file = paste0("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.h.",ct,".bed"),quote = F,sep = "\t",row.names = F,col.names = F)
write.table(unintint_bed_m,file = paste0("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.m.",ct,".bed"),quote = F,sep = "\t",row.names = F,col.names = F)
}
```



#doing CCAN discovery via cicero

```{r}

library(Signac)
library(Seurat)
library(SeuratWrappers)
library(ggplot2)
library(patchwork)

human_all_atac
mouse_select_atac
library(cicero)

#hg38 human all
human.cds <- as.cell_data_set(x = human_all_atac)
human.cicero <- make_cicero_cds(human.cds, reduced_coordinates = reducedDims(human.cds)$UMAP)
genome <- seqlengths(human_all_atac)
# convert chromosome sizes to a dataframe
genome.df <- data.frame("chr" = names(genome), "length" = genome)

# run cicero
conns_human <- run_cicero(human.cicero, genomic_coords = genome.df, sample_num = 100)
write.table(conns_human,file="Human_connections_cicero.txt",sep = "\t",quote = F,row.names = T,col.names = T)

ccans_human <- generate_ccans(conns_human,coaccess_cutoff_override = 0.15)
ccans_human <- generate_ccans(conns_human)



write.table(ccans_human,file="Human_ccans_cicero.txt",sep = "\t",quote = F,row.names = T,col.names = T)


DefaultAssay(mouse_select_atac)<-"mm9"
#do same for moust but in mm9
mouse_select_atac[["cre"]]<-NULL
mouse_select_atac[["cre05"]]<-NULL
mouse_select_atac[["cre99"]]<-NULL
mouse_select_atac[["Deviation_DA_mouse"]]<-NULL
mouse_select_atac[["Deviation_DA_human"]]<-NULL
mouse_select_atac[["Deviation_DA_int"]]<-NULL
mouse_select_atac[["chromvar"]]<-NULL
mouse_select_atac[["mm10"]]<-NULL

#mm9 mouse
mouse.cds <- as.cell_data_set(x = mouse_select_atac)
mouse.cicero <- make_cicero_cds(mouse.cds, reduced_coordinates = reducedDims(mouse.cds)$UMAP)
genome <- seqlengths(mouse_select_atac)
# convert chromosome sizes to a dataframe
genome.df <- data.frame("chr" = names(genome), "length" = genome)

# run cicero
conns_mouse <- run_cicero(mouse.cicero, genomic_coords = genome.df, sample_num = 100)
write.table(conns_mouse,file="Mouse_connections_cicero.txt",sep = "\t",quote = F,row.names = T,col.names = T)

#ccans_mouse <- generate_ccans(conns_mouse,coaccess_cutoff_override = 0.15)
ccans_mouse <- generate_ccans(conns_mouse)


write.table(ccans_mouse,file="Mouse_ccans_cicero.txt",sep = "\t",quote = F,row.names = T,col.names = T)

load("active_use_objects/for_rahul/Shared.bw.species.DA.RData")
load("active_use_objects/for_rahul/Human_only.bw.species.DA.RData")
load("active_use_objects/for_rahul/Mouse_only.bw.species.DA.RData")


all_human_peaks_in_CCAN<-unique(StringToGRanges(ccans_human$Peak))
all_mouse_peaks_in_CCAN<-unique(StringToGRanges(ccans_mouse$Peak))
all_peaks_human<-unique(StringToGRanges(row.names(human_all_atac)))
all_peaks_mouse<-unique(StringToGRanges(row.names(mouse_select_atac)))

#hypergeom


#easy hypergeom
hypergeom_test=data.frame(celltype=character(),CCAN=character(),group=character(),hgtest=double())
percent_overlap=data.frame(celltype=character(),CCAN=character(),group=character(),frac=double())
for (i in names(shared_DA))
{
print(i)
  print("shared")
#shared DA sites
querypos<-unique(StringToGRanges(sort(shared_DA[[i]]$feature_hg38_universal)))

#human CCAN
mpre<-suppressWarnings(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(all_peaks_human)))
xpre<-suppressWarnings(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(querypos)))
m<-length(unique(queryHits(mpre)))
x<-length(unique(queryHits(xpre)))

print(paste0("Number of peaks in CCAN: ",m))
print(paste0("Number of peaks not in CCAN: ",length(all_peaks_human)-m))
print(paste0("Frac of peaks in CCAN/all peaks: ",m/length(all_peaks_human)))
print(paste0("enrichment in shared: ",x))
print(paste0("enrichment in shared/thousand DA peaks: ",x/1000))

shared_sites_in_CCANS<-sort(querypos)[(queryHits(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(querypos))))]
CCAN_sites_in_sh_sites<-all_human_peaks_in_CCAN[(subjectHits(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(querypos))))]
sh<-data.frame(group="shared",celltype=i,CCAN="human",hgtest=(1-phyper(x-1,m,length(all_peaks_human)-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
sh2<-data.frame(group="shared",celltype=i,CCAN="human",frac=x/1000*length(all_peaks_human)/m)
percent_overlap<-rbind(percent_overlap,sh2)



#mouse CCAN
#shared DA sites
querypos<-unique(StringToGRanges(sort(shared_DA[[i]]$feature_mm9_mouse)))
mpre<-suppressWarnings(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(all_peaks_mouse)))
xpre<-suppressWarnings(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(querypos)))
m<-length(unique(queryHits(mpre)))
x<-length(unique(queryHits(xpre)))

print(paste0("Number of peaks in CCAN: ",m))
print(paste0("Number of peaks not in CCAN: ",length(all_peaks_mouse)-m))
print(paste0("Frac of peaks in CCAN/all peaks: ",m/length(all_peaks_mouse)))
print(paste0("enrichment in shared: ",x))
print(paste0("enrichment in shared/thousand DA peaks: ",x/1000))



shared_sites_in_CCANS<-sort(querypos)[(queryHits(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(querypos))))]
CCAN_sites_in_sh_sites<-all_mouse_peaks_in_CCAN[(subjectHits(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(querypos))))]
sh<-data.frame(group="shared",celltype=i,CCAN="mouse",hgtest=(1-phyper(x-1,m,length(all_peaks_mouse)-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
sh2<-data.frame(group="shared",celltype=i,CCAN="mouse",frac=x/1000*length(all_peaks_human)/m)
percent_overlap<-rbind(percent_overlap,sh2)


#mouse DA sites
querypos<-unique(StringToGRanges(sort(mouse_DA[[i]]$feature_hg38_universal)))

#human CCAN
mpre<-suppressWarnings(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(all_peaks_human)))
xpre<-suppressWarnings(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(querypos)))
m<-length(unique(queryHits(mpre)))
x<-length(unique(queryHits(xpre)))
print("mouse DA human CCANS")
print(paste0("enrichment in mouse DA: ",x))
print(paste0("enrichment in mouse DA/thousand DA peaks: ",x/1000))
print(paste0("Frac of peaks in CCAN/all peaks: ",m/length(all_peaks_human)))

mouse_sites_in_CCANS<-sort(querypos)[(queryHits(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(querypos))))]
CCAN_sites_in_mouse_sites<-all_human_peaks_in_CCAN[(subjectHits(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(querypos))))]
sh<-data.frame(group="mouse",celltype=i,CCAN="human",hgtest=(1-phyper(x-1,m,length(all_peaks_human)-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
sh2<-data.frame(group="mouse",celltype=i,CCAN="human",frac=x/1000*length(all_peaks_human)/m)
percent_overlap<-rbind(percent_overlap,sh2)



#mouse CCAN
#mouse DA sites
querypos<-unique(StringToGRanges(sort(mouse_DA[[i]]$feature_mm9_mouse)))
mpre<-suppressWarnings(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(all_peaks_mouse)))
xpre<-suppressWarnings(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(querypos)))
m<-length(unique(queryHits(mpre)))
x<-length(unique(queryHits(xpre)))

print("mouse DA mouse CCANS")
print(paste0("enrichment in mouse DA: ",x))
print(paste0("enrichment in mouse DA/thousand DA peaks: ",x/1000))
print(paste0("Frac of peaks in CCAN/all peaks: ",m/length(all_peaks_mouse)))

mouse_sites_in_CCANS<-sort(querypos)[(queryHits(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(querypos))))]
CCAN_sites_in_mouse_sites<-all_mouse_peaks_in_CCAN[(subjectHits(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(querypos))))]
sh<-data.frame(group="mouse",celltype=i,CCAN="mouse",hgtest=(1-phyper(x-1,m,length(all_peaks_mouse)-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
sh2<-data.frame(group="mouse",celltype=i,CCAN="mouse",frac=x/1000*length(all_peaks_human)/m)
percent_overlap<-rbind(percent_overlap,sh2)


#human DA sites
querypos<-unique(StringToGRanges(sort(human_DA[[i]]$feature_hg38_universal)))

#human CCAN
mpre<-suppressWarnings(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(all_peaks_human)))
xpre<-suppressWarnings(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(querypos)))
m<-length(unique(queryHits(mpre)))
x<-length(unique(queryHits(xpre)))

print("human DA human CCANS")
print(paste0("enrichment in human DA: ",x))
print(paste0("enrichment in human DA/thousand DA peaks: ",x/1000))
print(paste0("Frac of peaks in CCAN/all peaks: ",m/length(all_peaks_human)))

human_sites_in_CCANS<-sort(querypos)[(queryHits(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(querypos))))]
CCAN_sites_in_human_sites<-all_human_peaks_in_CCAN[(subjectHits(findOverlaps(subject = all_human_peaks_in_CCAN,query = sort(querypos))))]
sh<-data.frame(group="human",celltype=i,CCAN="human",hgtest=(1-phyper(x-1,m,length(all_peaks_human)-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
sh2<-data.frame(group="human",celltype=i,CCAN="human",frac=x/1000*length(all_peaks_human)/m)
percent_overlap<-rbind(percent_overlap,sh2)



#mouse CCAN
#human DA sites
querypos<-unique(StringToGRanges(sort(human_DA[[i]]$feature_mm9_mouse)))
mpre<-suppressWarnings(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(all_peaks_mouse)))
xpre<-suppressWarnings(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(querypos)))
m<-length(unique(queryHits(mpre)))
x<-length(unique(queryHits(xpre)))

print("human DA mouse CCANS")
print(paste0("enrichment in human DA: ",x))
print(paste0("enrichment in human DA/thousand DA peaks: ",x/1000))
print(paste0("Frac of peaks in CCAN/all peaks: ",m/length(all_peaks_mouse)))

human_sites_in_CCANS<-sort(querypos)[(queryHits(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(querypos))))]
CCAN_sites_in_human_sites<-all_mouse_peaks_in_CCAN[(subjectHits(findOverlaps(subject = all_mouse_peaks_in_CCAN,query = sort(querypos))))]
sh<-data.frame(group="human",celltype=i,CCAN="mouse",hgtest=(1-phyper(x-1,m,length(all_peaks_mouse)-m,length(querypos))))
hypergeom_test<-rbind(hypergeom_test,sh)
sh2<-data.frame(group="human",celltype=i,CCAN="mouse",frac=x/1000*length(all_peaks_human)/m)
percent_overlap<-rbind(percent_overlap,sh2)

}

percent_overlap_m<-percent_overlap[which(percent_overlap$CCAN=="mouse"),]
percent_overlap_h<-percent_overlap[which(percent_overlap$CCAN=="human"),]

M<-t(scale(t(acast(percent_overlap_m, celltype~group, value.var="frac"))))
H<-t(scale(t(acast(percent_overlap_h, celltype~group, value.var="frac"))))

HM<-Heatmap(H)+Heatmap(M)

write.table(percent_overlap,file="Percent_overlap_CCANs.txt",quote = F,sep = "\t",row.names = T,col.names = T)



```






#including fetal data for pneumocytes
```{r}


#lung and pneumocytes
human_all_atac

all_cre_hg19<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/ALL.bg.hg19.bed",header = F)
all_cre_hg19<-paste(all_cre_hg19$V1,all_cre_hg19$V2,all_cre_hg19$V3,sep = "-")
all_cre_hg19_gr<-reduce(StringToGRanges(all_cre_hg19,sep = c("-","-")))
meta_fetal<-read.delim("/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/filtered.cell_metadata.for_website.txt.gz")
meta_fetal_lung<-meta_fetal[which(meta_fetal$tissue=="lung"),]
fragment1<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_4_lung.fragments.txt.gz"
fragment2<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_8_lung.fragments.txt.gz"
fragment3<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_33_lung.fragments.txt.gz"
fragment4<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_38_lung.fragments.txt.gz"
fragment5<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_44_lung.fragments.txt.gz"
fragment6<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_47_lung.fragments.txt.gz"
fragment7<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_68_lung.fragments.txt.gz"
fragment8<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_70_lung.fragments.txt.gz"

fragments1 <- CreateFragmentObject(
  path = fragment1,cells = meta_fetal_lung[meta_fetal_lung$donor_id=="H26547" & meta_fetal_lung$batch=="batch_1",]$cell
)
fragments2 <- CreateFragmentObject(
  path = fragment2,cells = meta_fetal_lung[meta_fetal_lung$donor_id=="H27058" & meta_fetal_lung$batch=="batch_1",]$cell,validate.fragments = T
)
fragments3 <- CreateFragmentObject(
  path = fragment3,cells = meta_fetal_lung[meta_fetal_lung$donor_id=="H27098" & meta_fetal_lung$batch=="batch_2",]$cell,validate.fragments = T
)
fragments4 <- CreateFragmentObject(
  path = fragment4,cells = meta_fetal_lung[meta_fetal_lung$donor_id=="H27431" & meta_fetal_lung$batch=="batch_2",]$cell,validate.fragments = T
)
fragments5 <- CreateFragmentObject(
  path = fragment5,cells = meta_fetal_lung[meta_fetal_lung$donor_id=="H27472" & meta_fetal_lung$batch=="batch_2",]$cell,validate.fragments = T
)
fragments6 <- CreateFragmentObject(
  path = fragment6,cells = meta_fetal_lung[meta_fetal_lung$donor_id=="H27469" & meta_fetal_lung$batch=="batch_2",]$cell,validate.fragments = T
)
fragments7 <- CreateFragmentObject(
  path = fragment7,cells = meta_fetal_lung[meta_fetal_lung$donor_id=="H27472" & meta_fetal_lung$batch=="batch_3",]$cell,validate.fragments = T
)
fragments8 <- CreateFragmentObject(
  path = fragment8,cells = meta_fetal_lung[meta_fetal_lung$donor_id=="H27469" & meta_fetal_lung$batch=="batch_3",]$cell,validate.fragments = T
)



plan("multiprocess", workers = 10)
plan()
options(future.globals.maxSize = 50 * 1024 ^ 3) # 
cRE_peaks_fetal<- FeatureMatrix(
 fragments = list(fragments1,fragments2,fragments3,fragments4,fragments5,fragments7,fragments8),
 features =  all_cre_hg19_gr,cells = meta_fetal_lung$cell
)

fetal_lung_assay <- CreateChromatinAssay(
  counts = cRE_peaks_fetal,
  sep = c("-", "-"),
  genome = "hg19",
  fragments = list(fragments1,fragments2,fragments3,fragments4,fragments5,fragments7,fragments8),
  min.cells = 1
)

fetal_lung <- CreateSeuratObject(
  counts = fetal_lung_assay,
  assay = 'peaks',
  project = 'ATAC',
)

fetal_lung<-AddMetaData(fetal_lung,meta_fetal_lung)

fetal_lung <- RunTFIDF(fetal_lung)
fetal_lung <- FindTopFeatures(fetal_lung, min.cutoff = 'q0')
fetal_lung <- RunSVD(object = fetal_lung)
fetal_lung <- RunUMAP(
  object = fetal_lung,
  reduction = 'lsi',
  dims = 2:30
)

DimPlot(fetal_lung,group.by ="cell_type",label = T)
DimPlot(fetal_lung,group.by ="day_of_pregnancy",label = T)

library(BSgenome.Hsapiens.UCSC.hg19)
library(chromVAR)
library(motifmatchr)
library(Matrix)
library(SummarizedExperiment)

S<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Shared2celline.Pneumocytes.hg19.bed",header = F)
HO<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.h.Pneumocytes.hg19.bed",header = F)
MO<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.m.Pneumocytes.hg19.bed",header = F)

M_granges<-unique(sort(StringToGRanges(paste(MO$V1,MO$V2,MO$V3,sep = "-"))))
H_granges<-unique(sort(StringToGRanges(paste(HO$V1,HO$V2,HO$V3,sep="-"))))
I_granges<-unique(sort(StringToGRanges(paste(S$V1,S$V2,S$V3,sep="-"))))

Mat_granges<-reduce(sort(StringToGRanges(row.names(fetal_lung))))

MO_Ol<-row.names(fetal_lung)[unique(subjectHits(findOverlaps(M_granges,subject = Mat_granges)))]
HO_Ol<-row.names(fetal_lung)[unique(subjectHits(findOverlaps(H_granges,subject = Mat_granges)))]
I_Ol<-row.names(fetal_lung)[unique(subjectHits(findOverlaps(I_granges,subject = Mat_granges)))]

have_reads_m<-fetal_lung[["peaks"]][[]][fetal_lung[["peaks"]][[]]$count>0,]
have_reads_m<-have_reads_m[-which(seqnames(rowRanges) == "chr17")[1],]


matched_m<-row.names(have_reads_m) %in% MO_Ol
matched_h<-row.names(have_reads_m) %in% HO_Ol
matched_i <- row.names(have_reads_m) %in% I_Ol

m_matched_df<- data.frame(mouse=matched_m,human=matched_h,int=matched_i)

rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m <- getAnnotations(annotations = m_matched_df, rowRanges = rowRanges)

fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(fetal_lung, assay = "peaks", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg19)
seqlengths(BSgenome.Hsapiens.UCSC.hg19)[1:22]
rowRanges[which(seqnames(rowRanges) == "chr17")[1],]


dev_m_i <- computeDeviations(object = fragments_m, annotations = anno_m)
chromvar.hz <- SummarizedExperiment::assays(dev_m_i)[[2]]
fetal_lung[["Deviation_PN"]] <- CreateAssayObject(data = chromvar.hz)

DefaultAssay(fetal_lung)<-"Deviation_PN"

Idents(fetal_lung)<-fetal_lung$cell_type
p2_mouse<-VlnPlot(fetal_lung, features = "mouse",idents =c("Bronchiolar and alveolar epithelial cells","Ciliated epithelial cells"),group.by = "day_of_pregnancy",pt.size = 0)+geom_boxplot()

p2_human<-VlnPlot(fetal_lung, features = "human",idents =c("Bronchiolar and alveolar epithelial cells","Ciliated epithelial cells"),group.by = "day_of_pregnancy",pt.size = 0)+geom_boxplot()

p2_shared<-VlnPlot(fetal_lung, features = "int",idents =c("Bronchiolar and alveolar epithelial cells","Ciliated epithelial cells"),group.by = "day_of_pregnancy",pt.size = 0)+geom_boxplot()

p2_mouse|p2_human|p2_shared


Idents(fetal_lung)<-fetal_lung$day_of_pregnancy
p2b<-RidgePlot(fetal_lung, features = row.names(fetal_lung), ncol = 3)

FeaturePlot(fetal_lung,features = c("human"),label = T)


saveRDS(fetal_lung,"/home/torkenczyk/H_M_chromatin_atlas/human_data/active_use_objects/Fetal_pn.rds")


Idents(fetal_lung)<-fetal_lung$cell_type
feta_al_preg<-subset(fetal_lung,ident=c("Bronchiolar and alveolar epithelial cells","Ciliated epithelial cells"))
#feta_al_preg<-subset(fetal_lung,ident=c("Bronchiolar and alveolar epithelial cells"))
DefaultAssay(feta_al_preg)<-"peaks"

feta_al_preg <- RunTFIDF(feta_al_preg)
feta_al_preg <- FindTopFeatures(feta_al_preg, min.cutoff = 'q0')
feta_al_preg <- RunSVD(object = feta_al_preg)
feta_al_preg <- RunUMAP(
  object = feta_al_preg,
  reduction = 'lsi',
  dims = 2:30
)
feta_al_preg <- FindNeighbors(object = feta_al_preg, reduction = 'lsi', dims = 2:30)
feta_al_preg <- FindClusters(object = feta_al_preg, verbose = FALSE, algorithm = 3,resolution = 1)





table(data.frame(feta_al_preg$day_of_pregnancy,feta_al_preg$peaks_snn_res.3))

A<-data.frame(table(data.frame(feta_al_preg$day_of_pregnancy,feta_al_preg$peaks_snn_res.0.8)))
names(A)<-c("D_pr","cluster","Freq")
A<-acast(A, A$D_pr~A$cluster, value.var="Freq")

Heatmap(t(scale(t(A))))


DimPlot(feta_al_preg,group.by = "peaks_snn_res.0.8",pt.size = 1)+DimPlot(feta_al_preg,group.by = "day_of_pregnancy",pt.size = 1)


#lets look at corrected access shared first
C<-GetAssayData(feta_al_preg,slot = "counts",assay = "peaks")[I_Ol,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(feta_al_preg$day_of_pregnancy)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(feta_al_preg$nFeature_peaks),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`))/log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)

library(ComplexHeatmap)
test_int_alv1<-as.matrix(Cagg2)

ha = HeatmapAnnotation(shared = anno_boxplot(test_int_alv1))
H_1<-Heatmap(test_int_alv1,show_column_names = T,show_row_names = F,cluster_rows = T,top_annotation = ha)

pdf("SHARED_PN_FET1.pdf")
H_1
dev.off()

matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames
test_int_alv1b<-as.matrix(Cagg2)

H_1b<-Heatmap(test_int_alv1b,show_column_names = T,show_row_names = F,cluster_rows = T)
pdf("SHARED_PN_FET2.pdf")
H_1b
dev.off()

#Then human
C<-GetAssayData(feta_al_preg,slot = "counts",assay = "peaks")[HO_Ol,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(feta_al_preg$day_of_pregnancy)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(feta_al_preg$nFeature_peaks),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`))/log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
#Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
#colnames(Cagg2)<-matnames

library(ComplexHeatmap)
test_human_alv1<-as.matrix(Cagg2)


ha = HeatmapAnnotation(human = anno_boxplot(test_human_alv1))
H_2<-Heatmap(test_human_alv1,show_column_names = T,show_row_names = F,cluster_rows = T,top_annotation = ha)
pdf("Human_PN_FET.pdf")
H_2
dev.off()

#Then mouse
C<-GetAssayData(feta_al_preg,slot = "counts",assay = "peaks")[MO_Ol,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(feta_al_preg$day_of_pregnancy)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(feta_al_preg$nFeature_peaks),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`))/log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
#Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
#colnames(Cagg2)<-matnames

library(ComplexHeatmap)
test_mouse_alv<-as.matrix(Cagg2)


H_3<-Heatmap(test_mouse_alv,show_column_names = T,show_row_names = F,cluster_rows = T)
pdf("Mouse_PN_FET.pdf")
H_3
dev.off()



#easier to do ptime


feta_al_preg<-subset(fetal_lung,ident=c("Bronchiolar and alveolar epithelial cells"))
DefaultAssay(feta_al_preg)<-"peaks"

feta_al_preg <- RunTFIDF(feta_al_preg)
feta_al_preg <- FindTopFeatures(feta_al_preg, min.cells = 10)
feta_al_preg <- RunSVD(object = feta_al_preg,n = 100)
feta_al_preg <- RunUMAP(
  object = feta_al_preg,
  reduction = 'lsi',
  dims = 2:100
)
feta_al_preg <- FindNeighbors(object = feta_al_preg, reduction = 'lsi', dims = 2:100)
feta_al_preg <- FindClusters(object = feta_al_preg, verbose = FALSE, algorithm = 3,resolution = 0.8)


library(Signac)
library(Seurat)
library(SeuratWrappers)
library(monocle3)
library(Matrix)
library(ggplot2)
library(patchwork)
set.seed(1234)

#try pseudotime
feta_al_preg.cds <- as.cell_data_set(feta_al_preg)
feta_al_preg.cds <- cluster_cells(cds = feta_al_preg.cds, reduction_method = "UMAP")
feta_al_preg.cds <- learn_graph(feta_al_preg.cds, use_partition = T,close_loop = F)

feta_al_preg.cds <- order_cells(feta_al_preg.cds)

plot_cells(feta_al_preg.cds,
           color_cells_by = "day_of_pregnancy",
           label_groups_by_cluster=T,
           label_leaves=T,
           label_branch_points=T)

plot_cells(
  cds = feta_al_preg.cds,
  color_cells_by = "pseudotime",
  show_trajectory_graph = TRUE
)



feta_al_preg <- AddMetaData(
  object = feta_al_preg,
  metadata = feta_al_preg.cds@principal_graph_aux@listData$UMAP$pseudotime,
  col.name = "ptime"
)

saveRDS(feta_al_preg,file = "Fetal_alveolar_only.rds")

#cluster along 1d 
library(Ckmeans.1d.dp)
kmpt<-Ckmeans.1d.dp(feta_al_preg$ptime)

pclust<-data.frame(time=feta_al_preg$ptime,preg=feta_al_preg$day_of_pregnancy,cluster=paste("Cluster",kmpt$cluster))

ggplot(pclust,aes(x=time,fill=as.factor(preg)))+geom_histogram()+theme_classic()

ggplot(pclust,aes(x=time,fill=as.factor(cluster)))+geom_histogram()+theme_classic()

#do chromvar but order by ptime?










#groups<-as.factor(feta_al_preg$day_of_pregnancy)
#but rerun with 

groups<-as.factor(pclust$cluster)

S<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Shared2celline.Pneumocytes.hg19.bed",header = F)
HO<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.h.Pneumocytes.hg19.bed",header = F)
MO<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.m.Pneumocytes.hg19.bed",header = F)

M_granges<-unique(sort(StringToGRanges(paste(MO$V1,MO$V2,MO$V3,sep = "-"))))
H_granges<-unique(sort(StringToGRanges(paste(HO$V1,HO$V2,HO$V3,sep="-"))))
I_granges<-unique(sort(StringToGRanges(paste(S$V1,S$V2,S$V3,sep="-"))))

Mat_granges<-reduce(sort(StringToGRanges(row.names(feta_al_preg))))

MO_Ol<-row.names(feta_al_preg)[unique(subjectHits(findOverlaps(M_granges,subject = Mat_granges)))]
HO_Ol<-row.names(feta_al_preg)[unique(subjectHits(findOverlaps(H_granges,subject = Mat_granges)))]
I_Ol<-row.names(feta_al_preg)[unique(subjectHits(findOverlaps(I_granges,subject = Mat_granges)))]


#lets look at corrected access shared first
C<-GetAssayData(feta_al_preg,slot = "counts",assay = "peaks")[I_Ol,]

C<-as.matrix((C > 0) + 0)
#groups<-as.factor(feta_al_preg$day_of_pregnancy)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(feta_al_preg$nFeature_peaks),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`))/log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)

library(ComplexHeatmap)
test_int_alv1<-as.matrix(Cagg2)

ha = HeatmapAnnotation(shared = anno_boxplot(test_int_alv1))
H_1<-Heatmap(test_int_alv1,show_column_names = T,show_row_names = F,cluster_rows = T,top_annotation = ha)

pdf("SHARED_PN_FET1.pdf")
H_1
dev.off()

matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames
test_int_alv1b<-as.matrix(Cagg2)

H_1b<-Heatmap(test_int_alv1b,show_column_names = T,show_row_names = F,cluster_rows = T)
pdf("SHARED_PN_FET2.pdf")
H_1b
dev.off()

#Then human
C<-GetAssayData(feta_al_preg,slot = "counts",assay = "peaks")[HO_Ol,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(feta_al_preg$day_of_pregnancy)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(feta_al_preg$nFeature_peaks),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`))/log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
#Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
#colnames(Cagg2)<-matnames

library(ComplexHeatmap)
test_human_alv1<-as.matrix(Cagg2)


ha = HeatmapAnnotation(human = anno_boxplot(test_human_alv1))
H_2<-Heatmap(test_human_alv1,show_column_names = T,show_row_names = F,cluster_rows = T,top_annotation = ha)
pdf("Human_PN_FET.pdf")
H_2
dev.off()

#Then mouse
C<-GetAssayData(feta_al_preg,slot = "counts",assay = "peaks")[MO_Ol,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(feta_al_preg$day_of_pregnancy)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(feta_al_preg$nFeature_peaks),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`))/log10(median_nfeature_category$`feta_al_preg$nFeature_peaks`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
#Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
#colnames(Cagg2)<-matnames

library(ComplexHeatmap)
test_mouse_alv<-as.matrix(Cagg2)


H_3<-Heatmap(test_mouse_alv,show_column_names = T,show_row_names = F,cluster_rows = T)
pdf("Mouse_PN_FET.pdf")
H_3
dev.off()

#heart and cardiomyocytes


all_cre_hg19<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/ALL.bg.hg19.bed",header = F)
all_cre_hg19<-paste(all_cre_hg19$V1,all_cre_hg19$V2,all_cre_hg19$V3,sep = "-")
all_cre_hg19_gr<-reduce(StringToGRanges(all_cre_hg19,sep = c("-","-")))
meta_fetal<-read.delim("/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/filtered.cell_metadata.for_website.txt.gz")
meta_fetal_heart<-meta_fetal[which(meta_fetal$tissue=="heart"),]
fragment1<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_12_heart.fragments.txt.gz"
fragment2<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_14_heart.fragments.txt.gz"
fragment3<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_32_heart.fragments.txt.gz"
fragment4<-"/home/torkenczyk/H_M_chromatin_atlas/human_data/human_fetal_data/sample_39_heart.fragments.txt.gz"


fragments1 <- CreateFragmentObject(
  path = fragment1,cells = meta_fetal_heart[meta_fetal_heart$donor_id=="H27423" & meta_fetal_heart$batch=="batch_1",]$cell
)
fragments2 <- CreateFragmentObject(
  path = fragment2,cells = meta_fetal_heart[meta_fetal_heart$donor_id=="H27431" & meta_fetal_heart$batch=="batch_1",]$cell,validate.fragments = T
)
fragments3 <- CreateFragmentObject(
  path = fragment3,cells = meta_fetal_heart[meta_fetal_heart$donor_id=="H27098" & meta_fetal_heart$batch=="batch_2",]$cell,validate.fragments = T
)
fragments4 <- CreateFragmentObject(
  path = fragment4,cells = meta_fetal_heart[meta_fetal_heart$donor_id=="H27464" & meta_fetal_heart$batch=="batch_2",]$cell,validate.fragments = T
)




plan("multiprocess", workers = 10)
plan()
options(future.globals.maxSize = 50 * 1024 ^ 3) # 
cRE_peaks_fetal<- FeatureMatrix(
 fragments = list(fragments1,fragments2,fragments3,fragments4),
 features =  all_cre_hg19_gr,cells = meta_fetal_heart$cell
)

fetal_heart_assay <- CreateChromatinAssay(
  counts = cRE_peaks_fetal,
  sep = c("-", "-"),
  genome = "hg19",
  fragments = list(fragments1,fragments2,fragments3,fragments4),
  min.cells = 1
)

fetal_heart <- CreateSeuratObject(
  counts = fetal_heart_assay,
  assay = 'peaks',
  project = 'ATAC',
)

fetal_heart<-AddMetaData(fetal_heart,meta_fetal_heart)

fetal_heart <- RunTFIDF(fetal_heart)
fetal_heart <- FindTopFeatures(fetal_heart, min.cutoff = 'q0')
fetal_heart <- RunSVD(object = fetal_heart)
fetal_heart <- RunUMAP(
  object = fetal_heart,
  reduction = 'lsi',
  dims = 2:30
)

DimPlot(fetal_heart,group.by ="cell_type",label = T)
DimPlot(fetal_heart,group.by ="day_of_pregnancy",label = T)


S<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Shared2celline.Cardiomyocytes.hg19.bed",header = F)
HO<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.h.Cardiomyocytes.hg19.bed",header = F)
MO<-read.table("/home/torkenczyk/H_M_chromatin_atlas/human_data/celltype_bedfiles/Uniq2celline.m.Cardiomyocytes.hg19.bed",header = F)

M_granges<-unique(sort(StringToGRanges(paste(MO$V1,MO$V2,MO$V3,sep = "-"))))
H_granges<-unique(sort(StringToGRanges(paste(HO$V1,HO$V2,HO$V3,sep="-"))))
I_granges<-unique(sort(StringToGRanges(paste(S$V1,S$V2,S$V3,sep="-"))))

Mat_granges<-reduce(sort(StringToGRanges(row.names(fetal_heart))))

MO_Ol<-row.names(fetal_heart)[unique(subjectHits(findOverlaps(M_granges,subject = Mat_granges)))]
HO_Ol<-row.names(fetal_heart)[unique(subjectHits(findOverlaps(H_granges,subject = Mat_granges)))]
I_Ol<-row.names(fetal_heart)[unique(subjectHits(findOverlaps(I_granges,subject = Mat_granges)))]

have_reads_m<-fetal_heart[["peaks"]][[]][fetal_heart[["peaks"]][[]]$count>0,]
have_reads_m<-have_reads_m[-which(seqnames(rowRanges) == "chr17")[1],]


matched_m<-row.names(have_reads_m) %in% MO_Ol
matched_h<-row.names(have_reads_m) %in% HO_Ol
matched_i <- row.names(have_reads_m) %in% I_Ol

m_matched_df<- data.frame(mouse=matched_m,human=matched_h,int=matched_i)

rowRanges<-StringToGRanges(row.names(have_reads_m))
anno_m <- getAnnotations(annotations = m_matched_df, rowRanges = rowRanges)

fragments_m <- SummarizedExperiment(assays = list(counts = GetAssayData(fetal_heart, assay = "peaks", slot = "counts")[row.names(have_reads_m),]), rowRanges = rowRanges)
fragments_m <- filterPeaks(fragments_m, non_overlapping = TRUE)
fragments_m <- addGCBias(fragments_m, genome = BSgenome.Hsapiens.UCSC.hg19)
seqlengths(BSgenome.Hsapiens.UCSC.hg19)[1:22]
rowRanges[which(seqnames(rowRanges) == "chr17")[1],]


dev_m_i <- computeDeviations(object = fragments_m, annotations = anno_m)
chromvar.hz <- SummarizedExperiment::assays(dev_m_i)[[2]]
fetal_heart[["Deviation_PN"]] <- CreateAssayObject(data = chromvar.hz)

DefaultAssay(fetal_heart)<-"Deviation_PN"

Idents(fetal_heart)<-fetal_heart$cell_type

RidgePlot(fetal_heart,features = c("human","mouse","int"))



p2_mouse<-VlnPlot(fetal_heart, features = "mouse",idents =c("Bronchiolar and alveolar epithelial cells","Ciliated epithelial cells"),group.by = "day_of_pregnancy",pt.size = 0)+geom_boxplot()

p2_human<-VlnPlot(fetal_heart, features = "human",idents =c("Bronchiolar and alveolar epithelial cells","Ciliated epithelial cells"),group.by = "day_of_pregnancy",pt.size = 0)+geom_boxplot()

p2_shared<-VlnPlot(fetal_heart, features = "int",idents =c("Bronchiolar and alveolar epithelial cells","Ciliated epithelial cells"),group.by = "day_of_pregnancy",pt.size = 0)+geom_boxplot()

p2_mouse+p2_human+p2_shared
saveRDS(fetal_heart,file="Fetal_heart_analysis.rds")

#fetal_heart_card<-subset(fetal_heart,ident=c("Bronchiolar and alveolar epithelial cells","Ciliated epithelial cells"))
fetal_heart_card<-subset(fetal_heart,ident=c("Cardiomyocytes","Cardiomyocytes/Vascular endothelial cells"))
DefaultAssay(fetal_heart_card)<-"peaks"

fetal_heart_card <- RunTFIDF(fetal_heart_card)
fetal_heart_card <- FindTopFeatures(fetal_heart_card, min.cutoff = 'q0')
fetal_heart_card <- RunSVD(object = fetal_heart_card)
fetal_heart_card <- RunUMAP(
  object = fetal_heart_card,
  reduction = 'lsi',
  dims = 2:30
)
fetal_heart_card <- FindNeighbors(object = fetal_heart_card, reduction = 'lsi', dims = 2:30)
fetal_heart_card <- FindClusters(object = fetal_heart_card, verbose = FALSE, algorithm = 3,resolution = 1)





table(data.frame(fetal_heart_card$day_of_pregnancy,fetal_heart_card$peaks_snn_res.1))

A<-data.frame(table(data.frame(fetal_heart_card$day_of_pregnancy,fetal_heart_card$peaks_snn_res.1)))
names(A)<-c("D_pr","cluster","Freq")
A<-acast(A, A$D_pr~A$cluster, value.var="Freq")

Heatmap(t(scale(t(A))))


DimPlot(fetal_heart_card,group.by = "cell_type",pt.size = 1)+DimPlot(fetal_heart_card,group.by = "peaks_snn_res.1",pt.size = 1)+DimPlot(fetal_heart_card,group.by = "day_of_pregnancy",pt.size = 1)


#lets look at corrected access shared first
C<-GetAssayData(fetal_heart_card,slot = "counts",assay = "peaks")[I_Ol,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(fetal_heart_card$day_of_pregnancy)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(fetal_heart_card$nFeature_peaks),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`fetal_heart_card$nFeature_peaks`))/log10(median_nfeature_category$`fetal_heart_card$nFeature_peaks`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)

library(ComplexHeatmap)
test_int_alv1<-as.matrix(Cagg2)

ha = HeatmapAnnotation(shared = anno_boxplot(test_int_alv1))
H_1<-Heatmap(test_int_alv1,show_column_names = T,show_row_names = F,cluster_rows = T,top_annotation = ha)

pdf("SHARED_CR_FET1.pdf")
H_1
dev.off()

matnames<-colnames(Cagg2)
Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
colnames(Cagg2)<-matnames
test_int_alv1b<-as.matrix(Cagg2)

H_1b<-Heatmap(test_int_alv1b,show_column_names = T,show_row_names = F,cluster_rows = T)
pdf("SHARED_PN==CR_FET2.pdf")
H_1b
dev.off()

#Then human
C<-GetAssayData(fetal_heart_card,slot = "counts",assay = "peaks")[HO_Ol,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(fetal_heart_card$day_of_pregnancy)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(fetal_heart_card$nFeature_peaks),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`fetal_heart_card$nFeature_peaks`))/log10(median_nfeature_category$`fetal_heart_card$nFeature_peaks`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
#Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
#colnames(Cagg2)<-matnames

library(ComplexHeatmap)
test_human_alv1<-as.matrix(Cagg2)


ha = HeatmapAnnotation(human = anno_boxplot(test_human_alv1))
H_2<-Heatmap(test_human_alv1,show_column_names = T,show_row_names = F,cluster_rows = T,top_annotation = ha)
pdf("Human_CR_FET.pdf")
H_2
dev.off()

#Then mouse
C<-GetAssayData(fetal_heart_card,slot = "counts",assay = "peaks")[MO_Ol,]

C<-as.matrix((C > 0) + 0)
groups<-as.factor(fetal_heart_card$day_of_pregnancy)

#aggregate
Cagg<-aggregate(t(C),by=list(groups),FUN = function(x){sum(x)/length(x)})
Cagg2<-as.data.frame(t(Cagg))
colnames(Cagg2)<-Cagg2[1,]
Cagg2<-Cagg2[-1,]
#turn everything into numeric
Cagg2[] <- lapply(Cagg2, function(x) {
   as.numeric(as.character(x))
})

#at this point we have the probability of accessibility for each cluster. To adjust for complexity we have to calculate the median number of sites accessible in each cluster we take the average of this and divide them by individual groups ()

median_nfeature_category<-aggregate(as.data.frame(fetal_heart_card$nFeature_peaks),by=list(groups),FUN=median)

median_nfeature_category$norm_complexity<-mean(log10(median_nfeature_category$`fetal_heart_card$nFeature_peaks`))/log10(median_nfeature_category$`fetal_heart_card$nFeature_peaks`)
norm_factor<-as.data.frame(median_nfeature_category$norm_complexity)
row.names(norm_factor)<-median_nfeature_category$Group.1
t(norm_factor)

temp<-apply(Cagg2,MARGIN = 1,FUN = function(x){data.frame(x*t(norm_factor))})
Cagg2<-ldply(temp, data.frame)
row.names(Cagg2)<-Cagg2$.id
Cagg2$.id<-NULL

library(scales)
matnames<-colnames(Cagg2)
#Cagg2<-as.data.frame(t(apply(Cagg2, 1, scale)))
#colnames(Cagg2)<-matnames

library(ComplexHeatmap)
test_mouse_alv<-as.matrix(Cagg2)


H_3<-Heatmap(test_mouse_alv,show_column_names = T,show_row_names = F,cluster_rows = T)
pdf("Mouse_CR.pdf")
H_3
dev.off()





```

remove, remove cells and recluster
```{r}

human_all_atac<-subset(human_all_atac,idents="remove",invert=T)
human_all_atac <- RunTFIDF(human_all_atac)
human_all_atac <- FindTopFeatures(human_all_atac, min.cutoff = 'q50')
human_all_atac <- RunSVD(human_all_atac)
human_all_atac <- RunUMAP(object = human_all_atac, reduction = 'lsi', dims = 2:30)
human_all_atac$celltype[is.na(human_all_atac$celltype)]<-"unknown"

p1<-DimPlot(human_all_atac,group.by = "celltype",label=T,raster=F)+theme(legend.position = "none")


Idents(mouse_select_atac)<-mouse_select_atac

mouse_select_atac <- RunTFIDF(mouse_select_atac)
mouse_select_atac <- FindTopFeatures(mouse_select_atac, min.cutoff = 'q50')
mouse_select_atac <- RunSVD(mouse_select_atac)
mouse_select_atac <- RunUMAP(object = mouse_select_atac, reduction = 'lsi', dims = 2:30)
p2<-DimPlot(mouse_select_atac,group.by = "cell_label",label=T)+theme(legend.position = "none")
p1|p2


integrated_H_M<-subset(integrated_H_M,idents="remove",invert=T)
integrated_H_M <- RunUMAP(object = integrated_H_M, reduction = 'integrated_dr', dims = 2:100)
DimPlot(integrated_H_M,label=T,split.by = "species",raster=F)
saveRDS(integrated_H_M,file="active_use_objects/Final_integration_all_bins_CCA_remove_removed.rds")

DimPlot(integrated_H_M,label=T,raster=F)+theme(legend.position = "none")


```

